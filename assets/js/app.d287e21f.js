(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(e){function n(n){for(var o,r,s=n[0],l=n[1],c=n[2],d=0,p=[];d<s.length;d++)r=s[d],Object.prototype.hasOwnProperty.call(i,r)&&i[r]&&p.push(i[r][0]),i[r]=0;for(o in l)Object.prototype.hasOwnProperty.call(l,o)&&(e[o]=l[o]);for(u&&u(n);p.length;)p.shift()();return a.push.apply(a,c||[]),t()}function t(){for(var e,n=0;n<a.length;n++){for(var t=a[n],o=!0,s=1;s<t.length;s++){var l=t[s];0!==i[l]&&(o=!1)}o&&(a.splice(n--,1),e=r(r.s=t[0]))}return e}var o={},i={9:0},a=[];function r(n){if(o[n])return o[n].exports;var t=o[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,r),t.l=!0,t.exports}r.e=function(e){var n=[],t=i[e];if(0!==t)if(t)n.push(t[2]);else{var o=new Promise((function(n,o){t=i[e]=[n,o]}));n.push(t[2]=o);var a,s=document.createElement("script");s.charset="utf-8",s.timeout=120,r.nc&&s.setAttribute("nonce",r.nc),s.src=function(e){return r.p+"assets/js/"+({10:"vendors~docsearch"}[e]||e)+"."+{1:"d0f96348",2:"cb31d67b",3:"9ec45c3a",4:"a8586f44",5:"8becdea1",6:"7aecb05c",7:"a14219dc",8:"f3254528",10:"2d439eba",11:"c96453ae",12:"6c0e7d54",13:"7a29a5f7",14:"b1d02d09",15:"a2ae31d0",16:"34b61461",17:"6e61de59",18:"4cba4a1b",19:"9f24a950",20:"045457f1",21:"88d18c6b",22:"11df8cf0",23:"1d09d57d",24:"215d2550",25:"a2ac6076",26:"1e78e39b",27:"981b8c36",28:"217c593a",29:"3672888f",30:"63fd5f72",31:"fd9eef44",32:"a20aa7d4",33:"e878339a",34:"16252ccf",35:"48dd4bbc",36:"dafc6d66",37:"d13b97b9",38:"7cdedd64",39:"66023053",40:"b836a7e2",41:"e9fdaaea",42:"eba3d91b",43:"b1de588a",44:"49647c70",45:"ebafdd12",46:"be54e623",47:"0e554db2",48:"0be5a2a1",49:"1910ab52",50:"199fd0c8",51:"0034e389",52:"43ecb741",53:"9ebe1c65",54:"0db85dbd",55:"210006d1",56:"af254ea0",57:"c0c5faab",58:"f8866d66",59:"a5380efd",60:"de381e06",61:"f890d92e",62:"4633119e",63:"388db2e0",64:"912f86e0",65:"f863778b"}[e]+".js"}(e);var l=new Error;a=function(n){s.onerror=s.onload=null,clearTimeout(c);var t=i[e];if(0!==t){if(t){var o=n&&("load"===n.type?"missing":n.type),a=n&&n.target&&n.target.src;l.message="Loading chunk "+e+" failed.\n("+o+": "+a+")",l.name="ChunkLoadError",l.type=o,l.request=a,t[1](l)}i[e]=void 0}};var c=setTimeout((function(){a({type:"timeout",target:s})}),12e4);s.onerror=s.onload=a,document.head.appendChild(s)}return Promise.all(n)},r.m=e,r.c=o,r.d=function(e,n,t){r.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,n){if(1&n&&(e=r(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)r.d(t,o,function(n){return e[n]}.bind(null,o));return t},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="/OpenCore-Post-Install/",r.oe=function(e){throw console.error(e),e};var s=window.webpackJsonp=window.webpackJsonp||[],l=s.push.bind(s);s.push=n,s=s.slice();for(var c=0;c<s.length;c++)n(s[c]);var u=l;a.push([103,0]),t()}([function(e,n,t){"use strict";var o=t(54),i=o.all;e.exports=o.IS_HTMLDDA?function(e){return"function"==typeof e||e===i}:function(e){return"function"==typeof e}},function(e,n,t){"use strict";var o=function(e){return e&&e.Math===Math&&e};e.exports=o("object"==typeof globalThis&&globalThis)||o("object"==typeof window&&window)||o("object"==typeof self&&self)||o("object"==typeof global&&global)||function(){return this}()||this||Function("return this")()},function(e,n,t){"use strict";var o=t(26),i=Function.prototype,a=i.call,r=o&&i.bind.bind(a,a);e.exports=o?r:function(e){return function(){return a.apply(e,arguments)}}},function(e,n,t){"use strict";e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,n,t){"use strict";var o=t(3);e.exports=!o((function(){return 7!==Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,n){var t=Array.isArray;e.exports=t},function(e,n,t){var o=t(68),i="object"==typeof self&&self&&self.Object===Object&&self,a=o||i||Function("return this")();e.exports=a},function(e,n,t){"use strict";var o=t(2),i=t(31),a=o({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,n){return a(i(e),n)}},function(e,n,t){"use strict";var o=t(0),i=t(54),a=i.all;e.exports=i.IS_HTMLDDA?function(e){return"object"==typeof e?null!==e:o(e)||e===a}:function(e){return"object"==typeof e?null!==e:o(e)}},function(e,n,t){var o=t(161),i=t(164);e.exports=function(e,n){var t=i(e,n);return o(t)?t:void 0}},function(e,n,t){"use strict";function o(e,n,t,o,i,a,r,s){var l,c="function"==typeof e?e.options:e;if(n&&(c.render=n,c.staticRenderFns=t,c._compiled=!0),o&&(c.functional=!0),a&&(c._scopeId="data-v-"+a),r?(l=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),i&&i.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(r)},c._ssrRegister=l):i&&(l=s?function(){i.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:i),l)if(c.functional){c._injectStyles=l;var u=c.render;c.render=function(e,n){return l.call(n),u(e,n)}}else{var d=c.beforeCreate;c.beforeCreate=d?[].concat(d,l):[l]}return{exports:e,options:c}}t.d(n,"a",(function(){return o}))},function(e,n){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,n,t){var o=t(14),i=t(146),a=t(147),r=o?o.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":r&&r in Object(e)?i(e):a(e)}},function(e,n,t){"use strict";var o=t(4),i=t(15),a=t(34);e.exports=o?function(e,n,t){return i.f(e,n,a(1,t))}:function(e,n,t){return e[n]=t,e}},function(e,n,t){var o=t(6).Symbol;e.exports=o},function(e,n,t){"use strict";var o=t(4),i=t(63),a=t(100),r=t(24),s=t(53),l=TypeError,c=Object.defineProperty,u=Object.getOwnPropertyDescriptor;n.f=o?a?function(e,n,t){if(r(e),n=s(n),r(t),"function"==typeof e&&"prototype"===n&&"value"in t&&"writable"in t&&!t.writable){var o=u(e,n);o&&o.writable&&(e[n]=t.value,t={configurable:"configurable"in t?t.configurable:o.configurable,enumerable:"enumerable"in t?t.enumerable:o.enumerable,writable:!1})}return c(e,n,t)}:c:function(e,n,t){if(r(e),n=s(n),r(t),i)try{return c(e,n,t)}catch(e){}if("get"in t||"set"in t)throw l("Accessors not supported");return"value"in t&&(e[n]=t.value),e}},function(e,n,t){"use strict";var o=t(2),i=o({}.toString),a=o("".slice);e.exports=function(e){return a(i(e),8,-1)}},function(e,n,t){var o=t(151),i=t(152),a=t(153),r=t(154),s=t(155);function l(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var o=e[n];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=i,l.prototype.get=a,l.prototype.has=r,l.prototype.set=s,e.exports=l},function(e,n,t){var o=t(70);e.exports=function(e,n){for(var t=e.length;t--;)if(o(e[t][0],n))return t;return-1}},function(e,n,t){var o=t(9)(Object,"create");e.exports=o},function(e,n,t){var o=t(173);e.exports=function(e,n){var t=e.__data__;return o(n)?t["string"==typeof n?"string":"hash"]:t.map}},function(e,n,t){var o=t(44);e.exports=function(e){if("string"==typeof e||o(e))return e;var n=e+"";return"0"==n&&1/e==-1/0?"-0":n}},function(e,n){var t=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,i=/^0b[01]+$/i,a=/^0o[0-7]+$/i,r=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,c=s||l||Function("return this")(),u=Object.prototype.toString,d=Math.max,p=Math.min,h=function(){return c.Date.now()};function m(e){var n=typeof e;return!!e&&("object"==n||"function"==n)}function f(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==u.call(e)}(e))return NaN;if(m(e)){var n="function"==typeof e.valueOf?e.valueOf():e;e=m(n)?n+"":n}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(t,"");var s=i.test(e);return s||a.test(e)?r(e.slice(2),s?2:8):o.test(e)?NaN:+e}e.exports=function(e,n,t){var o,i,a,r,s,l,c=0,u=!1,y=!1,g=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function b(n){var t=o,a=i;return o=i=void 0,c=n,r=e.apply(a,t)}function w(e){return c=e,s=setTimeout(k,n),u?b(e):r}function v(e){var t=e-l;return void 0===l||t>=n||t<0||y&&e-c>=a}function k(){var e=h();if(v(e))return x(e);s=setTimeout(k,function(e){var t=n-(e-l);return y?p(t,a-(e-c)):t}(e))}function x(e){return s=void 0,g&&o?b(e):(o=i=void 0,r)}function S(){var e=h(),t=v(e);if(o=arguments,i=this,l=e,t){if(void 0===s)return w(l);if(y)return s=setTimeout(k,n),b(l)}return void 0===s&&(s=setTimeout(k,n)),r}return n=f(n)||0,m(t)&&(u=!!t.leading,a=(y="maxWait"in t)?d(f(t.maxWait)||0,n):a,g="trailing"in t?!!t.trailing:g),S.cancel=function(){void 0!==s&&clearTimeout(s),c=0,o=l=i=s=void 0},S.flush=function(){return void 0===s?r:x(h())},S}},function(e,n,t){var o,i;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(i="function"==typeof(o=function(){var e,n,t={version:"0.2.0"},o=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function i(e,n,t){return e<n?n:e>t?t:e}function a(e){return 100*(-1+e)}t.configure=function(e){var n,t;for(n in e)void 0!==(t=e[n])&&e.hasOwnProperty(n)&&(o[n]=t);return this},t.status=null,t.set=function(e){var n=t.isStarted();e=i(e,o.minimum,1),t.status=1===e?null:e;var l=t.render(!n),c=l.querySelector(o.barSelector),u=o.speed,d=o.easing;return l.offsetWidth,r((function(n){""===o.positionUsing&&(o.positionUsing=t.getPositioningCSS()),s(c,function(e,n,t){var i;return(i="translate3d"===o.positionUsing?{transform:"translate3d("+a(e)+"%,0,0)"}:"translate"===o.positionUsing?{transform:"translate("+a(e)+"%,0)"}:{"margin-left":a(e)+"%"}).transition="all "+n+"ms "+t,i}(e,u,d)),1===e?(s(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){s(l,{transition:"all "+u+"ms linear",opacity:0}),setTimeout((function(){t.remove(),n()}),u)}),u)):setTimeout(n,u)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var e=function(){setTimeout((function(){t.status&&(t.trickle(),e())}),o.trickleSpeed)};return o.trickle&&e(),this},t.done=function(e){return e||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(e){var n=t.status;return n?("number"!=typeof e&&(e=(1-n)*i(Math.random()*n,.1,.95)),n=i(n+e,0,.994),t.set(n)):t.start()},t.trickle=function(){return t.inc(Math.random()*o.trickleRate)},e=0,n=0,t.promise=function(o){return o&&"resolved"!==o.state()?(0===n&&t.start(),e++,n++,o.always((function(){0==--n?(e=0,t.done()):t.set((e-n)/e)})),this):this},t.render=function(e){if(t.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var n=document.createElement("div");n.id="nprogress",n.innerHTML=o.template;var i,r=n.querySelector(o.barSelector),l=e?"-100":a(t.status||0),u=document.querySelector(o.parent);return s(r,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),o.showSpinner||(i=n.querySelector(o.spinnerSelector))&&p(i),u!=document.body&&c(u,"nprogress-custom-parent"),u.appendChild(n),n},t.remove=function(){u(document.documentElement,"nprogress-busy"),u(document.querySelector(o.parent),"nprogress-custom-parent");var e=document.getElementById("nprogress");e&&p(e)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var e=document.body.style,n="WebkitTransform"in e?"Webkit":"MozTransform"in e?"Moz":"msTransform"in e?"ms":"OTransform"in e?"O":"";return n+"Perspective"in e?"translate3d":n+"Transform"in e?"translate":"margin"};var r=function(){var e=[];function n(){var t=e.shift();t&&t(n)}return function(t){e.push(t),1==e.length&&n()}}(),s=function(){var e=["Webkit","O","Moz","ms"],n={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(e,n){return n.toUpperCase()})),n[t]||(n[t]=function(n){var t=document.body.style;if(n in t)return n;for(var o,i=e.length,a=n.charAt(0).toUpperCase()+n.slice(1);i--;)if((o=e[i]+a)in t)return o;return n}(t))}function o(e,n,o){n=t(n),e.style[n]=o}return function(e,n){var t,i,a=arguments;if(2==a.length)for(t in n)void 0!==(i=n[t])&&n.hasOwnProperty(t)&&o(e,t,i);else o(e,a[1],a[2])}}();function l(e,n){return("string"==typeof e?e:d(e)).indexOf(" "+n+" ")>=0}function c(e,n){var t=d(e),o=t+n;l(t,n)||(e.className=o.substring(1))}function u(e,n){var t,o=d(e);l(e,n)&&(t=o.replace(" "+n+" "," "),e.className=t.substring(1,t.length-1))}function d(e){return(" "+(e.className||"")+" ").replace(/\s+/gi," ")}function p(e){e&&e.parentNode&&e.parentNode.removeChild(e)}return t})?o.call(n,t,n,e):o)||(e.exports=i)},function(e,n,t){"use strict";var o=t(8),i=String,a=TypeError;e.exports=function(e){if(o(e))return e;throw a(i(e)+" is not an object")}},function(e,n,t){"use strict";var o=t(1),i=t(50).f,a=t(13),r=t(94),s=t(36),l=t(64),c=t(122);e.exports=function(e,n){var t,u,d,p,h,m=e.target,f=e.global,y=e.stat;if(t=f?o:y?o[m]||s(m,{}):(o[m]||{}).prototype)for(u in n){if(p=n[u],d=e.dontCallGetSet?(h=i(t,u))&&h.value:t[u],!c(f?u:m+(y?".":"#")+u,e.forced)&&void 0!==d){if(typeof p==typeof d)continue;l(p,d)}(e.sham||d&&d.sham)&&a(p,"sham",!0),r(t,u,p,e)}}},function(e,n,t){"use strict";var o=t(3);e.exports=!o((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},function(e,n,t){"use strict";var o=t(47),i=t(51);e.exports=function(e){return o(i(e))}},function(e,n,t){"use strict";var o=t(1),i=t(0),a=function(e){return i(e)?e:void 0};e.exports=function(e,n){return arguments.length<2?a(o[e]):o[e]&&o[e][n]}},function(e,n,t){"use strict";var o=t(0),i=t(109),a=TypeError;e.exports=function(e){if(o(e))return e;throw a(i(e)+" is not a function")}},function(e,n,t){"use strict";var o=t(1),i=t(60),a=t(7),r=t(62),s=t(58),l=t(57),c=o.Symbol,u=i("wks"),d=l?c.for||c:c&&c.withoutSetter||r;e.exports=function(e){return a(u,e)||(u[e]=s&&a(c,e)?c[e]:d("Symbol."+e)),u[e]}},function(e,n,t){"use strict";var o=t(51),i=Object;e.exports=function(e){return i(o(e))}},function(e,n,t){"use strict";var o=t(120);e.exports=function(e){return o(e.length)}},function(e,n,t){"use strict";var o=t(26),i=Function.prototype.call;e.exports=o?i.bind(i):function(){return i.apply(i,arguments)}},function(e,n,t){"use strict";e.exports=function(e,n){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:n}}},function(e,n,t){"use strict";var o=t(1),i=t(36),a=o["__core-js_shared__"]||i("__core-js_shared__",{});e.exports=a},function(e,n,t){"use strict";var o=t(1),i=Object.defineProperty;e.exports=function(e,n){try{i(o,e,{value:n,configurable:!0,writable:!0})}catch(t){o[e]=n}return n}},function(e,n,t){var o=t(145),i=t(11),a=Object.prototype,r=a.hasOwnProperty,s=a.propertyIsEnumerable,l=o(function(){return arguments}())?o:function(e){return i(e)&&r.call(e,"callee")&&!s.call(e,"callee")};e.exports=l},function(e,n,t){var o=t(9)(t(6),"Map");e.exports=o},function(e,n){e.exports=function(e){var n=typeof e;return null!=e&&("object"==n||"function"==n)}},function(e,n,t){var o=t(165),i=t(172),a=t(174),r=t(175),s=t(176);function l(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var o=e[n];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=i,l.prototype.get=a,l.prototype.has=r,l.prototype.set=s,e.exports=l},function(e,n){e.exports=function(e){var n=-1,t=Array(e.size);return e.forEach((function(e){t[++n]=e})),t}},function(e,n){e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},function(e,n,t){var o=t(5),i=t(44),a=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,r=/^\w*$/;e.exports=function(e,n){if(o(e))return!1;var t=typeof e;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=e&&!i(e))||(r.test(e)||!a.test(e)||null!=n&&e in Object(n))}},function(e,n,t){var o=t(12),i=t(11);e.exports=function(e){return"symbol"==typeof e||i(e)&&"[object Symbol]"==o(e)}},function(e,n){e.exports=function(e){return e}},function(e,n,t){"use strict";n.a=["ThemeManager","BackToTop"]},function(e,n,t){"use strict";var o=t(2),i=t(3),a=t(16),r=Object,s=o("".split);e.exports=i((function(){return!r("z").propertyIsEnumerable(0)}))?function(e){return"String"===a(e)?s(e,""):r(e)}:r},function(e,n,t){"use strict";e.exports={}},function(e,n){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,n,t){"use strict";var o=t(4),i=t(33),a=t(105),r=t(34),s=t(27),l=t(53),c=t(7),u=t(63),d=Object.getOwnPropertyDescriptor;n.f=o?d:function(e,n){if(e=s(e),n=l(n),u)try{return d(e,n)}catch(e){}if(c(e,n))return r(!i(a.f,e,n),e[n])}},function(e,n,t){"use strict";var o=t(52),i=TypeError;e.exports=function(e){if(o(e))throw i("Can't call method on "+e);return e}},function(e,n,t){"use strict";e.exports=function(e){return null==e}},function(e,n,t){"use strict";var o=t(106),i=t(55);e.exports=function(e){var n=o(e,"string");return i(n)?n:n+""}},function(e,n,t){"use strict";var o="object"==typeof document&&document.all,i=void 0===o&&void 0!==o;e.exports={all:o,IS_HTMLDDA:i}},function(e,n,t){"use strict";var o=t(28),i=t(0),a=t(56),r=t(57),s=Object;e.exports=r?function(e){return"symbol"==typeof e}:function(e){var n=o("Symbol");return i(n)&&a(n.prototype,s(e))}},function(e,n,t){"use strict";var o=t(2);e.exports=o({}.isPrototypeOf)},function(e,n,t){"use strict";var o=t(58);e.exports=o&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,n,t){"use strict";var o=t(59),i=t(3),a=t(1).String;e.exports=!!Object.getOwnPropertySymbols&&!i((function(){var e=Symbol("symbol detection");return!a(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&o&&o<41}))},function(e,n,t){"use strict";var o,i,a=t(1),r=t(107),s=a.process,l=a.Deno,c=s&&s.versions||l&&l.version,u=c&&c.v8;u&&(i=(o=u.split("."))[0]>0&&o[0]<4?1:+(o[0]+o[1])),!i&&r&&(!(o=r.match(/Edge\/(\d+)/))||o[1]>=74)&&(o=r.match(/Chrome\/(\d+)/))&&(i=+o[1]),e.exports=i},function(e,n,t){"use strict";var o=t(61),i=t(35);(e.exports=function(e,n){return i[e]||(i[e]=void 0!==n?n:{})})("versions",[]).push({version:"3.32.1",mode:o?"pure":"global",copyright:"© 2014-2023 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.32.1/LICENSE",source:"https://github.com/zloirock/core-js"})},function(e,n,t){"use strict";e.exports=!1},function(e,n,t){"use strict";var o=t(2),i=0,a=Math.random(),r=o(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+r(++i+a,36)}},function(e,n,t){"use strict";var o=t(4),i=t(3),a=t(99);e.exports=!o&&!i((function(){return 7!==Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},function(e,n,t){"use strict";var o=t(7),i=t(115),a=t(50),r=t(15);e.exports=function(e,n,t){for(var s=i(n),l=r.f,c=a.f,u=0;u<s.length;u++){var d=s[u];o(e,d)||t&&o(t,d)||l(e,d,c(n,d))}}},function(e,n,t){"use strict";var o=t(119);e.exports=function(e){var n=+e;return n!=n||0===n?0:o(n)}},function(e,n,t){"use strict";var o=t(132),i=t(24),a=t(133);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,n=!1,t={};try{(e=o(Object.prototype,"__proto__","set"))(t,[]),n=t instanceof Array}catch(e){}return function(t,o){return i(t),a(o),n?e(t,o):t.__proto__=o,t}}():void 0)},function(e,n){e.exports=function(e,n){for(var t=-1,o=n.length,i=e.length;++t<o;)e[i+t]=n[t];return e}},function(e,n){var t="object"==typeof global&&global&&global.Object===Object&&global;e.exports=t},function(e,n,t){var o=t(17),i=t(156),a=t(157),r=t(158),s=t(159),l=t(160);function c(e){var n=this.__data__=new o(e);this.size=n.size}c.prototype.clear=i,c.prototype.delete=a,c.prototype.get=r,c.prototype.has=s,c.prototype.set=l,e.exports=c},function(e,n){e.exports=function(e,n){return e===n||e!=e&&n!=n}},function(e,n,t){var o=t(12),i=t(39);e.exports=function(e){if(!i(e))return!1;var n=o(e);return"[object Function]"==n||"[object GeneratorFunction]"==n||"[object AsyncFunction]"==n||"[object Proxy]"==n}},function(e,n){var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,n,t){var o=t(177),i=t(11);e.exports=function e(n,t,a,r,s){return n===t||(null==n||null==t||!i(n)&&!i(t)?n!=n&&t!=t:o(n,t,a,r,e,s))}},function(e,n,t){var o=t(75),i=t(180),a=t(76);e.exports=function(e,n,t,r,s,l){var c=1&t,u=e.length,d=n.length;if(u!=d&&!(c&&d>u))return!1;var p=l.get(e),h=l.get(n);if(p&&h)return p==n&&h==e;var m=-1,f=!0,y=2&t?new o:void 0;for(l.set(e,n),l.set(n,e);++m<u;){var g=e[m],b=n[m];if(r)var w=c?r(b,g,m,n,e,l):r(g,b,m,e,n,l);if(void 0!==w){if(w)continue;f=!1;break}if(y){if(!i(n,(function(e,n){if(!a(y,n)&&(g===e||s(g,e,t,r,l)))return y.push(n)}))){f=!1;break}}else if(g!==b&&!s(g,b,t,r,l)){f=!1;break}}return l.delete(e),l.delete(n),f}},function(e,n,t){var o=t(40),i=t(178),a=t(179);function r(e){var n=-1,t=null==e?0:e.length;for(this.__data__=new o;++n<t;)this.add(e[n])}r.prototype.add=r.prototype.push=i,r.prototype.has=a,e.exports=r},function(e,n){e.exports=function(e,n){return e.has(n)}},function(e,n,t){var o=t(190),i=t(196),a=t(81);e.exports=function(e){return a(e)?o(e):i(e)}},function(e,n,t){(function(e){var o=t(6),i=t(192),a=n&&!n.nodeType&&n,r=a&&"object"==typeof e&&e&&!e.nodeType&&e,s=r&&r.exports===a?o.Buffer:void 0,l=(s?s.isBuffer:void 0)||i;e.exports=l}).call(this,t(49)(e))},function(e,n){var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,n){var o=typeof e;return!!(n=null==n?9007199254740991:n)&&("number"==o||"symbol"!=o&&t.test(e))&&e>-1&&e%1==0&&e<n}},function(e,n,t){var o=t(193),i=t(194),a=t(195),r=a&&a.isTypedArray,s=r?i(r):o;e.exports=s},function(e,n,t){var o=t(71),i=t(42);e.exports=function(e){return null!=e&&i(e.length)&&!o(e)}},function(e,n,t){var o=t(9)(t(6),"Set");e.exports=o},function(e,n,t){var o=t(39);e.exports=function(e){return e==e&&!o(e)}},function(e,n){e.exports=function(e,n){return function(t){return null!=t&&(t[e]===n&&(void 0!==n||e in Object(t)))}}},function(e,n,t){var o=t(86),i=t(21);e.exports=function(e,n){for(var t=0,a=(n=o(n,e)).length;null!=e&&t<a;)e=e[i(n[t++])];return t&&t==a?e:void 0}},function(e,n,t){var o=t(5),i=t(43),a=t(207),r=t(210);e.exports=function(e,n){return o(e)?e:i(e,n)?[e]:a(r(e))}},function(e,n,t){},function(e,n,t){},function(e,n,t){},function(e,n,t){var o=t(143),i=t(148),a=t(219),r=t(227),s=t(236),l=t(96),c=a((function(e){var n=l(e);return s(n)&&(n=void 0),r(o(e,1,s,!0),i(n,2))}));e.exports=c},function(e,n,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var o=/["'&<>]/;e.exports=function(e){var n,t=""+e,i=o.exec(t);if(!i)return t;var a="",r=0,s=0;for(r=i.index;r<t.length;r++){switch(t.charCodeAt(r)){case 34:n="&quot;";break;case 38:n="&amp;";break;case 39:n="&#39;";break;case 60:n="&lt;";break;case 62:n="&gt;";break;default:continue}s!==r&&(a+=t.substring(s,r)),s=r+1,a+=n}return s!==r?a+t.substring(s,r):a}},function(e,n,t){!function(){"use strict";e.exports={polyfill:function(){var e=window,n=document;if(!("scrollBehavior"in n.documentElement.style)||!0===e.__forceSmoothScrollPolyfill__){var t,o=e.HTMLElement||e.Element,i={scroll:e.scroll||e.scrollTo,scrollBy:e.scrollBy,elementScroll:o.prototype.scroll||s,scrollIntoView:o.prototype.scrollIntoView},a=e.performance&&e.performance.now?e.performance.now.bind(e.performance):Date.now,r=(t=e.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(t)?1:0);e.scroll=e.scrollTo=function(){void 0!==arguments[0]&&(!0!==l(arguments[0])?m.call(e,n.body,void 0!==arguments[0].left?~~arguments[0].left:e.scrollX||e.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:e.scrollY||e.pageYOffset):i.scroll.call(e,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:e.scrollX||e.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:e.scrollY||e.pageYOffset))},e.scrollBy=function(){void 0!==arguments[0]&&(l(arguments[0])?i.scrollBy.call(e,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):m.call(e,n.body,~~arguments[0].left+(e.scrollX||e.pageXOffset),~~arguments[0].top+(e.scrollY||e.pageYOffset)))},o.prototype.scroll=o.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==l(arguments[0])){var e=arguments[0].left,n=arguments[0].top;m.call(this,this,void 0===e?this.scrollLeft:~~e,void 0===n?this.scrollTop:~~n)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");i.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!=typeof arguments[0]?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},o.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==l(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):i.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},o.prototype.scrollIntoView=function(){if(!0!==l(arguments[0])){var t=p(this),o=t.getBoundingClientRect(),a=this.getBoundingClientRect();t!==n.body?(m.call(this,t,t.scrollLeft+a.left-o.left,t.scrollTop+a.top-o.top),"fixed"!==e.getComputedStyle(t).position&&e.scrollBy({left:o.left,top:o.top,behavior:"smooth"})):e.scrollBy({left:a.left,top:a.top,behavior:"smooth"})}else i.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function s(e,n){this.scrollLeft=e,this.scrollTop=n}function l(e){if(null===e||"object"!=typeof e||void 0===e.behavior||"auto"===e.behavior||"instant"===e.behavior)return!0;if("object"==typeof e&&"smooth"===e.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+e.behavior+" is not a valid value for enumeration ScrollBehavior.")}function c(e,n){return"Y"===n?e.clientHeight+r<e.scrollHeight:"X"===n?e.clientWidth+r<e.scrollWidth:void 0}function u(n,t){var o=e.getComputedStyle(n,null)["overflow"+t];return"auto"===o||"scroll"===o}function d(e){var n=c(e,"Y")&&u(e,"Y"),t=c(e,"X")&&u(e,"X");return n||t}function p(e){for(;e!==n.body&&!1===d(e);)e=e.parentNode||e.host;return e}function h(n){var t,o,i,r,s=(a()-n.startTime)/468;r=s=s>1?1:s,t=.5*(1-Math.cos(Math.PI*r)),o=n.startX+(n.x-n.startX)*t,i=n.startY+(n.y-n.startY)*t,n.method.call(n.scrollable,o,i),o===n.x&&i===n.y||e.requestAnimationFrame(h.bind(e,n))}function m(t,o,r){var l,c,u,d,p=a();t===n.body?(l=e,c=e.scrollX||e.pageXOffset,u=e.scrollY||e.pageYOffset,d=i.scroll):(l=t,c=t.scrollLeft,u=t.scrollTop,d=s),h({scrollable:l,method:d,startTime:p,startX:c,startY:u,x:o,y:r})}}}}()},function(e,n,t){"use strict";var o=t(25),i=t(31),a=t(32),r=t(126),s=t(128);o({target:"Array",proto:!0,arity:1,forced:t(3)((function(){return 4294967297!==[].push.call({length:4294967296},1)}))||!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(e){return e instanceof TypeError}}()},{push:function(e){var n=i(this),t=a(n),o=arguments.length;s(t+o);for(var l=0;l<o;l++)n[t]=arguments[l],t++;return r(n,t),t}})},function(e,n,t){"use strict";var o=t(0),i=t(15),a=t(97),r=t(36);e.exports=function(e,n,t,s){s||(s={});var l=s.enumerable,c=void 0!==s.name?s.name:n;if(o(t)&&a(t,c,s),s.global)l?e[n]=t:r(n,t);else{try{s.unsafe?e[n]&&(l=!0):delete e[n]}catch(e){}l?e[n]=t:i.f(e,n,{value:t,enumerable:!1,configurable:!s.nonConfigurable,writable:!s.nonWritable})}return e}},function(e,n,t){"use strict";var o=t(137),i=String;e.exports=function(e){if("Symbol"===o(e))throw TypeError("Cannot convert a Symbol value to a string");return i(e)}},function(e,n){e.exports=function(e){var n=null==e?0:e.length;return n?e[n-1]:void 0}},function(e,n,t){"use strict";var o=t(2),i=t(3),a=t(0),r=t(7),s=t(4),l=t(111).CONFIGURABLE,c=t(112),u=t(113),d=u.enforce,p=u.get,h=String,m=Object.defineProperty,f=o("".slice),y=o("".replace),g=o([].join),b=s&&!i((function(){return 8!==m((function(){}),"length",{value:8}).length})),w=String(String).split("String"),v=e.exports=function(e,n,t){"Symbol("===f(h(n),0,7)&&(n="["+y(h(n),/^Symbol\(([^)]*)\)/,"$1")+"]"),t&&t.getter&&(n="get "+n),t&&t.setter&&(n="set "+n),(!r(e,"name")||l&&e.name!==n)&&(s?m(e,"name",{value:n,configurable:!0}):e.name=n),b&&t&&r(t,"arity")&&e.length!==t.arity&&m(e,"length",{value:t.arity});try{t&&r(t,"constructor")&&t.constructor?s&&m(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(e){}var o=d(e);return r(o,"source")||(o.source=g(w,"string"==typeof n?n:"")),e};Function.prototype.toString=v((function(){return a(this)&&p(this).source||c(this)}),"toString")},function(e,n,t){"use strict";e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,n,t){"use strict";var o=t(1),i=t(8),a=o.document,r=i(a)&&i(a.createElement);e.exports=function(e){return r?a.createElement(e):{}}},function(e,n,t){"use strict";var o=t(4),i=t(3);e.exports=o&&i((function(){return 42!==Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(e,n,t){"use strict";var o=t(60),i=t(62),a=o("keys");e.exports=function(e){return a[e]||(a[e]=i(e))}},function(e,n,t){"use strict";var o=t(2),i=t(7),a=t(27),r=t(117).indexOf,s=t(48),l=o([].push);e.exports=function(e,n){var t,o=a(e),c=0,u=[];for(t in o)!i(s,t)&&i(o,t)&&l(u,t);for(;n.length>c;)i(o,t=n[c++])&&(~r(u,t)||l(u,t));return u}},function(e,n,t){e.exports=t(244)},function(e,n,t){"use strict";var o=t(25),i=t(123).left,a=t(124),r=t(59);o({target:"Array",proto:!0,forced:!t(125)&&r>79&&r<83||!a("reduce")},{reduce:function(e){var n=arguments.length;return i(this,e,n,n>1?arguments[1]:void 0)}})},function(e,n,t){"use strict";var o={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,a=i&&!o.call({1:2},1);n.f=a?function(e){var n=i(this,e);return!!n&&n.enumerable}:o},function(e,n,t){"use strict";var o=t(33),i=t(8),a=t(55),r=t(108),s=t(110),l=t(30),c=TypeError,u=l("toPrimitive");e.exports=function(e,n){if(!i(e)||a(e))return e;var t,l=r(e,u);if(l){if(void 0===n&&(n="default"),t=o(l,e,n),!i(t)||a(t))return t;throw c("Can't convert object to primitive value")}return void 0===n&&(n="number"),s(e,n)}},function(e,n,t){"use strict";e.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},function(e,n,t){"use strict";var o=t(29),i=t(52);e.exports=function(e,n){var t=e[n];return i(t)?void 0:o(t)}},function(e,n,t){"use strict";var o=String;e.exports=function(e){try{return o(e)}catch(e){return"Object"}}},function(e,n,t){"use strict";var o=t(33),i=t(0),a=t(8),r=TypeError;e.exports=function(e,n){var t,s;if("string"===n&&i(t=e.toString)&&!a(s=o(t,e)))return s;if(i(t=e.valueOf)&&!a(s=o(t,e)))return s;if("string"!==n&&i(t=e.toString)&&!a(s=o(t,e)))return s;throw r("Can't convert object to primitive value")}},function(e,n,t){"use strict";var o=t(4),i=t(7),a=Function.prototype,r=o&&Object.getOwnPropertyDescriptor,s=i(a,"name"),l=s&&"something"===function(){}.name,c=s&&(!o||o&&r(a,"name").configurable);e.exports={EXISTS:s,PROPER:l,CONFIGURABLE:c}},function(e,n,t){"use strict";var o=t(2),i=t(0),a=t(35),r=o(Function.toString);i(a.inspectSource)||(a.inspectSource=function(e){return r(e)}),e.exports=a.inspectSource},function(e,n,t){"use strict";var o,i,a,r=t(114),s=t(1),l=t(8),c=t(13),u=t(7),d=t(35),p=t(101),h=t(48),m=s.TypeError,f=s.WeakMap;if(r||d.state){var y=d.state||(d.state=new f);y.get=y.get,y.has=y.has,y.set=y.set,o=function(e,n){if(y.has(e))throw m("Object already initialized");return n.facade=e,y.set(e,n),n},i=function(e){return y.get(e)||{}},a=function(e){return y.has(e)}}else{var g=p("state");h[g]=!0,o=function(e,n){if(u(e,g))throw m("Object already initialized");return n.facade=e,c(e,g,n),n},i=function(e){return u(e,g)?e[g]:{}},a=function(e){return u(e,g)}}e.exports={set:o,get:i,has:a,enforce:function(e){return a(e)?i(e):o(e,{})},getterFor:function(e){return function(n){var t;if(!l(n)||(t=i(n)).type!==e)throw m("Incompatible receiver, "+e+" required");return t}}}},function(e,n,t){"use strict";var o=t(1),i=t(0),a=o.WeakMap;e.exports=i(a)&&/native code/.test(String(a))},function(e,n,t){"use strict";var o=t(28),i=t(2),a=t(116),r=t(121),s=t(24),l=i([].concat);e.exports=o("Reflect","ownKeys")||function(e){var n=a.f(s(e)),t=r.f;return t?l(n,t(e)):n}},function(e,n,t){"use strict";var o=t(102),i=t(98).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(e){return o(e,i)}},function(e,n,t){"use strict";var o=t(27),i=t(118),a=t(32),r=function(e){return function(n,t,r){var s,l=o(n),c=a(l),u=i(r,c);if(e&&t!=t){for(;c>u;)if((s=l[u++])!=s)return!0}else for(;c>u;u++)if((e||u in l)&&l[u]===t)return e||u||0;return!e&&-1}};e.exports={includes:r(!0),indexOf:r(!1)}},function(e,n,t){"use strict";var o=t(65),i=Math.max,a=Math.min;e.exports=function(e,n){var t=o(e);return t<0?i(t+n,0):a(t,n)}},function(e,n,t){"use strict";var o=Math.ceil,i=Math.floor;e.exports=Math.trunc||function(e){var n=+e;return(n>0?i:o)(n)}},function(e,n,t){"use strict";var o=t(65),i=Math.min;e.exports=function(e){return e>0?i(o(e),9007199254740991):0}},function(e,n,t){"use strict";n.f=Object.getOwnPropertySymbols},function(e,n,t){"use strict";var o=t(3),i=t(0),a=/#|\.prototype\./,r=function(e,n){var t=l[s(e)];return t===u||t!==c&&(i(n)?o(n):!!n)},s=r.normalize=function(e){return String(e).replace(a,".").toLowerCase()},l=r.data={},c=r.NATIVE="N",u=r.POLYFILL="P";e.exports=r},function(e,n,t){"use strict";var o=t(29),i=t(31),a=t(47),r=t(32),s=TypeError,l=function(e){return function(n,t,l,c){o(t);var u=i(n),d=a(u),p=r(u),h=e?p-1:0,m=e?-1:1;if(l<2)for(;;){if(h in d){c=d[h],h+=m;break}if(h+=m,e?h<0:p<=h)throw s("Reduce of empty array with no initial value")}for(;e?h>=0:p>h;h+=m)h in d&&(c=t(c,d[h],h,u));return c}};e.exports={left:l(!1),right:l(!0)}},function(e,n,t){"use strict";var o=t(3);e.exports=function(e,n){var t=[][e];return!!t&&o((function(){t.call(null,n||function(){return 1},1)}))}},function(e,n,t){"use strict";var o=t(1),i=t(16);e.exports="process"===i(o.process)},function(e,n,t){"use strict";var o=t(4),i=t(127),a=TypeError,r=Object.getOwnPropertyDescriptor,s=o&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(e){return e instanceof TypeError}}();e.exports=s?function(e,n){if(i(e)&&!r(e,"length").writable)throw a("Cannot set read only .length");return e.length=n}:function(e,n){return e.length=n}},function(e,n,t){"use strict";var o=t(16);e.exports=Array.isArray||function(e){return"Array"===o(e)}},function(e,n,t){"use strict";var o=TypeError;e.exports=function(e){if(e>9007199254740991)throw o("Maximum allowed index exceeded");return e}},function(e,n,t){"use strict";var o=t(25),i=t(1),a=t(130),r=t(131),s=i.WebAssembly,l=7!==Error("e",{cause:7}).cause,c=function(e,n){var t={};t[e]=r(e,n,l),o({global:!0,constructor:!0,arity:1,forced:l},t)},u=function(e,n){if(s&&s[e]){var t={};t[e]=r("WebAssembly."+e,n,l),o({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:l},t)}};c("Error",(function(e){return function(n){return a(e,this,arguments)}})),c("EvalError",(function(e){return function(n){return a(e,this,arguments)}})),c("RangeError",(function(e){return function(n){return a(e,this,arguments)}})),c("ReferenceError",(function(e){return function(n){return a(e,this,arguments)}})),c("SyntaxError",(function(e){return function(n){return a(e,this,arguments)}})),c("TypeError",(function(e){return function(n){return a(e,this,arguments)}})),c("URIError",(function(e){return function(n){return a(e,this,arguments)}})),u("CompileError",(function(e){return function(n){return a(e,this,arguments)}})),u("LinkError",(function(e){return function(n){return a(e,this,arguments)}})),u("RuntimeError",(function(e){return function(n){return a(e,this,arguments)}}))},function(e,n,t){"use strict";var o=t(26),i=Function.prototype,a=i.apply,r=i.call;e.exports="object"==typeof Reflect&&Reflect.apply||(o?r.bind(a):function(){return r.apply(a,arguments)})},function(e,n,t){"use strict";var o=t(28),i=t(7),a=t(13),r=t(56),s=t(66),l=t(64),c=t(134),u=t(135),d=t(136),p=t(139),h=t(140),m=t(4),f=t(61);e.exports=function(e,n,t,y){var g=y?2:1,b=e.split("."),w=b[b.length-1],v=o.apply(null,b);if(v){var k=v.prototype;if(!f&&i(k,"cause")&&delete k.cause,!t)return v;var x=o("Error"),S=n((function(e,n){var t=d(y?n:e,void 0),o=y?new v(e):new v;return void 0!==t&&a(o,"message",t),h(o,S,o.stack,2),this&&r(k,this)&&u(o,this,S),arguments.length>g&&p(o,arguments[g]),o}));if(S.prototype=k,"Error"!==w?s?s(S,x):l(S,x,{name:!0}):m&&"stackTraceLimit"in v&&(c(S,v,"stackTraceLimit"),c(S,v,"prepareStackTrace")),l(S,v),!f)try{k.name!==w&&a(k,"name",w),k.constructor=S}catch(e){}return S}}},function(e,n,t){"use strict";var o=t(2),i=t(29);e.exports=function(e,n,t){try{return o(i(Object.getOwnPropertyDescriptor(e,n)[t]))}catch(e){}}},function(e,n,t){"use strict";var o=t(0),i=String,a=TypeError;e.exports=function(e){if("object"==typeof e||o(e))return e;throw a("Can't set "+i(e)+" as a prototype")}},function(e,n,t){"use strict";var o=t(15).f;e.exports=function(e,n,t){t in e||o(e,t,{configurable:!0,get:function(){return n[t]},set:function(e){n[t]=e}})}},function(e,n,t){"use strict";var o=t(0),i=t(8),a=t(66);e.exports=function(e,n,t){var r,s;return a&&o(r=n.constructor)&&r!==t&&i(s=r.prototype)&&s!==t.prototype&&a(e,s),e}},function(e,n,t){"use strict";var o=t(95);e.exports=function(e,n){return void 0===e?arguments.length<2?"":n:o(e)}},function(e,n,t){"use strict";var o=t(138),i=t(0),a=t(16),r=t(30)("toStringTag"),s=Object,l="Arguments"===a(function(){return arguments}());e.exports=o?a:function(e){var n,t,o;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(t=function(e,n){try{return e[n]}catch(e){}}(n=s(e),r))?t:l?a(n):"Object"===(o=a(n))&&i(n.callee)?"Arguments":o}},function(e,n,t){"use strict";var o={};o[t(30)("toStringTag")]="z",e.exports="[object z]"===String(o)},function(e,n,t){"use strict";var o=t(8),i=t(13);e.exports=function(e,n){o(n)&&"cause"in n&&i(e,"cause",n.cause)}},function(e,n,t){"use strict";var o=t(13),i=t(141),a=t(142),r=Error.captureStackTrace;e.exports=function(e,n,t,s){a&&(r?r(e,n):o(e,"stack",i(t,s)))}},function(e,n,t){"use strict";var o=t(2),i=Error,a=o("".replace),r=String(i("zxcasd").stack),s=/\n\s*at [^:]*:[^\n]*/,l=s.test(r);e.exports=function(e,n){if(l&&"string"==typeof e&&!i.prepareStackTrace)for(;n--;)e=a(e,s,"");return e}},function(e,n,t){"use strict";var o=t(3),i=t(34);e.exports=!o((function(){var e=Error("a");return!("stack"in e)||(Object.defineProperty(e,"stack",i(1,7)),7!==e.stack)}))},function(e,n,t){var o=t(67),i=t(144);e.exports=function e(n,t,a,r,s){var l=-1,c=n.length;for(a||(a=i),s||(s=[]);++l<c;){var u=n[l];t>0&&a(u)?t>1?e(u,t-1,a,r,s):o(s,u):r||(s[s.length]=u)}return s}},function(e,n,t){var o=t(14),i=t(37),a=t(5),r=o?o.isConcatSpreadable:void 0;e.exports=function(e){return a(e)||i(e)||!!(r&&e&&e[r])}},function(e,n,t){var o=t(12),i=t(11);e.exports=function(e){return i(e)&&"[object Arguments]"==o(e)}},function(e,n,t){var o=t(14),i=Object.prototype,a=i.hasOwnProperty,r=i.toString,s=o?o.toStringTag:void 0;e.exports=function(e){var n=a.call(e,s),t=e[s];try{e[s]=void 0;var o=!0}catch(e){}var i=r.call(e);return o&&(n?e[s]=t:delete e[s]),i}},function(e,n){var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},function(e,n,t){var o=t(149),i=t(205),a=t(45),r=t(5),s=t(216);e.exports=function(e){return"function"==typeof e?e:null==e?a:"object"==typeof e?r(e)?i(e[0],e[1]):o(e):s(e)}},function(e,n,t){var o=t(150),i=t(204),a=t(84);e.exports=function(e){var n=i(e);return 1==n.length&&n[0][2]?a(n[0][0],n[0][1]):function(t){return t===e||o(t,e,n)}}},function(e,n,t){var o=t(69),i=t(73);e.exports=function(e,n,t,a){var r=t.length,s=r,l=!a;if(null==e)return!s;for(e=Object(e);r--;){var c=t[r];if(l&&c[2]?c[1]!==e[c[0]]:!(c[0]in e))return!1}for(;++r<s;){var u=(c=t[r])[0],d=e[u],p=c[1];if(l&&c[2]){if(void 0===d&&!(u in e))return!1}else{var h=new o;if(a)var m=a(d,p,u,e,n,h);if(!(void 0===m?i(p,d,3,a,h):m))return!1}}return!0}},function(e,n){e.exports=function(){this.__data__=[],this.size=0}},function(e,n,t){var o=t(18),i=Array.prototype.splice;e.exports=function(e){var n=this.__data__,t=o(n,e);return!(t<0)&&(t==n.length-1?n.pop():i.call(n,t,1),--this.size,!0)}},function(e,n,t){var o=t(18);e.exports=function(e){var n=this.__data__,t=o(n,e);return t<0?void 0:n[t][1]}},function(e,n,t){var o=t(18);e.exports=function(e){return o(this.__data__,e)>-1}},function(e,n,t){var o=t(18);e.exports=function(e,n){var t=this.__data__,i=o(t,e);return i<0?(++this.size,t.push([e,n])):t[i][1]=n,this}},function(e,n,t){var o=t(17);e.exports=function(){this.__data__=new o,this.size=0}},function(e,n){e.exports=function(e){var n=this.__data__,t=n.delete(e);return this.size=n.size,t}},function(e,n){e.exports=function(e){return this.__data__.get(e)}},function(e,n){e.exports=function(e){return this.__data__.has(e)}},function(e,n,t){var o=t(17),i=t(38),a=t(40);e.exports=function(e,n){var t=this.__data__;if(t instanceof o){var r=t.__data__;if(!i||r.length<199)return r.push([e,n]),this.size=++t.size,this;t=this.__data__=new a(r)}return t.set(e,n),this.size=t.size,this}},function(e,n,t){var o=t(71),i=t(162),a=t(39),r=t(72),s=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,u=l.toString,d=c.hasOwnProperty,p=RegExp("^"+u.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!a(e)||i(e))&&(o(e)?p:s).test(r(e))}},function(e,n,t){var o,i=t(163),a=(o=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+o:"";e.exports=function(e){return!!a&&a in e}},function(e,n,t){var o=t(6)["__core-js_shared__"];e.exports=o},function(e,n){e.exports=function(e,n){return null==e?void 0:e[n]}},function(e,n,t){var o=t(166),i=t(17),a=t(38);e.exports=function(){this.size=0,this.__data__={hash:new o,map:new(a||i),string:new o}}},function(e,n,t){var o=t(167),i=t(168),a=t(169),r=t(170),s=t(171);function l(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var o=e[n];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=i,l.prototype.get=a,l.prototype.has=r,l.prototype.set=s,e.exports=l},function(e,n,t){var o=t(19);e.exports=function(){this.__data__=o?o(null):{},this.size=0}},function(e,n){e.exports=function(e){var n=this.has(e)&&delete this.__data__[e];return this.size-=n?1:0,n}},function(e,n,t){var o=t(19),i=Object.prototype.hasOwnProperty;e.exports=function(e){var n=this.__data__;if(o){var t=n[e];return"__lodash_hash_undefined__"===t?void 0:t}return i.call(n,e)?n[e]:void 0}},function(e,n,t){var o=t(19),i=Object.prototype.hasOwnProperty;e.exports=function(e){var n=this.__data__;return o?void 0!==n[e]:i.call(n,e)}},function(e,n,t){var o=t(19);e.exports=function(e,n){var t=this.__data__;return this.size+=this.has(e)?0:1,t[e]=o&&void 0===n?"__lodash_hash_undefined__":n,this}},function(e,n,t){var o=t(20);e.exports=function(e){var n=o(this,e).delete(e);return this.size-=n?1:0,n}},function(e,n){e.exports=function(e){var n=typeof e;return"string"==n||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==e:null===e}},function(e,n,t){var o=t(20);e.exports=function(e){return o(this,e).get(e)}},function(e,n,t){var o=t(20);e.exports=function(e){return o(this,e).has(e)}},function(e,n,t){var o=t(20);e.exports=function(e,n){var t=o(this,e),i=t.size;return t.set(e,n),this.size+=t.size==i?0:1,this}},function(e,n,t){var o=t(69),i=t(74),a=t(181),r=t(184),s=t(200),l=t(5),c=t(78),u=t(80),d="[object Object]",p=Object.prototype.hasOwnProperty;e.exports=function(e,n,t,h,m,f){var y=l(e),g=l(n),b=y?"[object Array]":s(e),w=g?"[object Array]":s(n),v=(b="[object Arguments]"==b?d:b)==d,k=(w="[object Arguments]"==w?d:w)==d,x=b==w;if(x&&c(e)){if(!c(n))return!1;y=!0,v=!1}if(x&&!v)return f||(f=new o),y||u(e)?i(e,n,t,h,m,f):a(e,n,b,t,h,m,f);if(!(1&t)){var S=v&&p.call(e,"__wrapped__"),C=k&&p.call(n,"__wrapped__");if(S||C){var A=S?e.value():e,P=C?n.value():n;return f||(f=new o),m(A,P,t,h,f)}}return!!x&&(f||(f=new o),r(e,n,t,h,m,f))}},function(e,n){e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},function(e,n){e.exports=function(e){return this.__data__.has(e)}},function(e,n){e.exports=function(e,n){for(var t=-1,o=null==e?0:e.length;++t<o;)if(n(e[t],t,e))return!0;return!1}},function(e,n,t){var o=t(14),i=t(182),a=t(70),r=t(74),s=t(183),l=t(41),c=o?o.prototype:void 0,u=c?c.valueOf:void 0;e.exports=function(e,n,t,o,c,d,p){switch(t){case"[object DataView]":if(e.byteLength!=n.byteLength||e.byteOffset!=n.byteOffset)return!1;e=e.buffer,n=n.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=n.byteLength||!d(new i(e),new i(n)));case"[object Boolean]":case"[object Date]":case"[object Number]":return a(+e,+n);case"[object Error]":return e.name==n.name&&e.message==n.message;case"[object RegExp]":case"[object String]":return e==n+"";case"[object Map]":var h=s;case"[object Set]":var m=1&o;if(h||(h=l),e.size!=n.size&&!m)return!1;var f=p.get(e);if(f)return f==n;o|=2,p.set(e,n);var y=r(h(e),h(n),o,c,d,p);return p.delete(e),y;case"[object Symbol]":if(u)return u.call(e)==u.call(n)}return!1}},function(e,n,t){var o=t(6).Uint8Array;e.exports=o},function(e,n){e.exports=function(e){var n=-1,t=Array(e.size);return e.forEach((function(e,o){t[++n]=[o,e]})),t}},function(e,n,t){var o=t(185),i=Object.prototype.hasOwnProperty;e.exports=function(e,n,t,a,r,s){var l=1&t,c=o(e),u=c.length;if(u!=o(n).length&&!l)return!1;for(var d=u;d--;){var p=c[d];if(!(l?p in n:i.call(n,p)))return!1}var h=s.get(e),m=s.get(n);if(h&&m)return h==n&&m==e;var f=!0;s.set(e,n),s.set(n,e);for(var y=l;++d<u;){var g=e[p=c[d]],b=n[p];if(a)var w=l?a(b,g,p,n,e,s):a(g,b,p,e,n,s);if(!(void 0===w?g===b||r(g,b,t,a,s):w)){f=!1;break}y||(y="constructor"==p)}if(f&&!y){var v=e.constructor,k=n.constructor;v==k||!("constructor"in e)||!("constructor"in n)||"function"==typeof v&&v instanceof v&&"function"==typeof k&&k instanceof k||(f=!1)}return s.delete(e),s.delete(n),f}},function(e,n,t){var o=t(186),i=t(187),a=t(77);e.exports=function(e){return o(e,a,i)}},function(e,n,t){var o=t(67),i=t(5);e.exports=function(e,n,t){var a=n(e);return i(e)?a:o(a,t(e))}},function(e,n,t){var o=t(188),i=t(189),a=Object.prototype.propertyIsEnumerable,r=Object.getOwnPropertySymbols,s=r?function(e){return null==e?[]:(e=Object(e),o(r(e),(function(n){return a.call(e,n)})))}:i;e.exports=s},function(e,n){e.exports=function(e,n){for(var t=-1,o=null==e?0:e.length,i=0,a=[];++t<o;){var r=e[t];n(r,t,e)&&(a[i++]=r)}return a}},function(e,n){e.exports=function(){return[]}},function(e,n,t){var o=t(191),i=t(37),a=t(5),r=t(78),s=t(79),l=t(80),c=Object.prototype.hasOwnProperty;e.exports=function(e,n){var t=a(e),u=!t&&i(e),d=!t&&!u&&r(e),p=!t&&!u&&!d&&l(e),h=t||u||d||p,m=h?o(e.length,String):[],f=m.length;for(var y in e)!n&&!c.call(e,y)||h&&("length"==y||d&&("offset"==y||"parent"==y)||p&&("buffer"==y||"byteLength"==y||"byteOffset"==y)||s(y,f))||m.push(y);return m}},function(e,n){e.exports=function(e,n){for(var t=-1,o=Array(e);++t<e;)o[t]=n(t);return o}},function(e,n){e.exports=function(){return!1}},function(e,n,t){var o=t(12),i=t(42),a=t(11),r={};r["[object Float32Array]"]=r["[object Float64Array]"]=r["[object Int8Array]"]=r["[object Int16Array]"]=r["[object Int32Array]"]=r["[object Uint8Array]"]=r["[object Uint8ClampedArray]"]=r["[object Uint16Array]"]=r["[object Uint32Array]"]=!0,r["[object Arguments]"]=r["[object Array]"]=r["[object ArrayBuffer]"]=r["[object Boolean]"]=r["[object DataView]"]=r["[object Date]"]=r["[object Error]"]=r["[object Function]"]=r["[object Map]"]=r["[object Number]"]=r["[object Object]"]=r["[object RegExp]"]=r["[object Set]"]=r["[object String]"]=r["[object WeakMap]"]=!1,e.exports=function(e){return a(e)&&i(e.length)&&!!r[o(e)]}},function(e,n){e.exports=function(e){return function(n){return e(n)}}},function(e,n,t){(function(e){var o=t(68),i=n&&!n.nodeType&&n,a=i&&"object"==typeof e&&e&&!e.nodeType&&e,r=a&&a.exports===i&&o.process,s=function(){try{var e=a&&a.require&&a.require("util").types;return e||r&&r.binding&&r.binding("util")}catch(e){}}();e.exports=s}).call(this,t(49)(e))},function(e,n,t){var o=t(197),i=t(198),a=Object.prototype.hasOwnProperty;e.exports=function(e){if(!o(e))return i(e);var n=[];for(var t in Object(e))a.call(e,t)&&"constructor"!=t&&n.push(t);return n}},function(e,n){var t=Object.prototype;e.exports=function(e){var n=e&&e.constructor;return e===("function"==typeof n&&n.prototype||t)}},function(e,n,t){var o=t(199)(Object.keys,Object);e.exports=o},function(e,n){e.exports=function(e,n){return function(t){return e(n(t))}}},function(e,n,t){var o=t(201),i=t(38),a=t(202),r=t(82),s=t(203),l=t(12),c=t(72),u=c(o),d=c(i),p=c(a),h=c(r),m=c(s),f=l;(o&&"[object DataView]"!=f(new o(new ArrayBuffer(1)))||i&&"[object Map]"!=f(new i)||a&&"[object Promise]"!=f(a.resolve())||r&&"[object Set]"!=f(new r)||s&&"[object WeakMap]"!=f(new s))&&(f=function(e){var n=l(e),t="[object Object]"==n?e.constructor:void 0,o=t?c(t):"";if(o)switch(o){case u:return"[object DataView]";case d:return"[object Map]";case p:return"[object Promise]";case h:return"[object Set]";case m:return"[object WeakMap]"}return n}),e.exports=f},function(e,n,t){var o=t(9)(t(6),"DataView");e.exports=o},function(e,n,t){var o=t(9)(t(6),"Promise");e.exports=o},function(e,n,t){var o=t(9)(t(6),"WeakMap");e.exports=o},function(e,n,t){var o=t(83),i=t(77);e.exports=function(e){for(var n=i(e),t=n.length;t--;){var a=n[t],r=e[a];n[t]=[a,r,o(r)]}return n}},function(e,n,t){var o=t(73),i=t(206),a=t(213),r=t(43),s=t(83),l=t(84),c=t(21);e.exports=function(e,n){return r(e)&&s(n)?l(c(e),n):function(t){var r=i(t,e);return void 0===r&&r===n?a(t,e):o(n,r,3)}}},function(e,n,t){var o=t(85);e.exports=function(e,n,t){var i=null==e?void 0:o(e,n);return void 0===i?t:i}},function(e,n,t){var o=t(208),i=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,a=/\\(\\)?/g,r=o((function(e){var n=[];return 46===e.charCodeAt(0)&&n.push(""),e.replace(i,(function(e,t,o,i){n.push(o?i.replace(a,"$1"):t||e)})),n}));e.exports=r},function(e,n,t){var o=t(209);e.exports=function(e){var n=o(e,(function(e){return 500===t.size&&t.clear(),e})),t=n.cache;return n}},function(e,n,t){var o=t(40);function i(e,n){if("function"!=typeof e||null!=n&&"function"!=typeof n)throw new TypeError("Expected a function");var t=function(){var o=arguments,i=n?n.apply(this,o):o[0],a=t.cache;if(a.has(i))return a.get(i);var r=e.apply(this,o);return t.cache=a.set(i,r)||a,r};return t.cache=new(i.Cache||o),t}i.Cache=o,e.exports=i},function(e,n,t){var o=t(211);e.exports=function(e){return null==e?"":o(e)}},function(e,n,t){var o=t(14),i=t(212),a=t(5),r=t(44),s=o?o.prototype:void 0,l=s?s.toString:void 0;e.exports=function e(n){if("string"==typeof n)return n;if(a(n))return i(n,e)+"";if(r(n))return l?l.call(n):"";var t=n+"";return"0"==t&&1/n==-1/0?"-0":t}},function(e,n){e.exports=function(e,n){for(var t=-1,o=null==e?0:e.length,i=Array(o);++t<o;)i[t]=n(e[t],t,e);return i}},function(e,n,t){var o=t(214),i=t(215);e.exports=function(e,n){return null!=e&&i(e,n,o)}},function(e,n){e.exports=function(e,n){return null!=e&&n in Object(e)}},function(e,n,t){var o=t(86),i=t(37),a=t(5),r=t(79),s=t(42),l=t(21);e.exports=function(e,n,t){for(var c=-1,u=(n=o(n,e)).length,d=!1;++c<u;){var p=l(n[c]);if(!(d=null!=e&&t(e,p)))break;e=e[p]}return d||++c!=u?d:!!(u=null==e?0:e.length)&&s(u)&&r(p,u)&&(a(e)||i(e))}},function(e,n,t){var o=t(217),i=t(218),a=t(43),r=t(21);e.exports=function(e){return a(e)?o(r(e)):i(e)}},function(e,n){e.exports=function(e){return function(n){return null==n?void 0:n[e]}}},function(e,n,t){var o=t(85);e.exports=function(e){return function(n){return o(n,e)}}},function(e,n,t){var o=t(45),i=t(220),a=t(222);e.exports=function(e,n){return a(i(e,n,o),e+"")}},function(e,n,t){var o=t(221),i=Math.max;e.exports=function(e,n,t){return n=i(void 0===n?e.length-1:n,0),function(){for(var a=arguments,r=-1,s=i(a.length-n,0),l=Array(s);++r<s;)l[r]=a[n+r];r=-1;for(var c=Array(n+1);++r<n;)c[r]=a[r];return c[n]=t(l),o(e,this,c)}}},function(e,n){e.exports=function(e,n,t){switch(t.length){case 0:return e.call(n);case 1:return e.call(n,t[0]);case 2:return e.call(n,t[0],t[1]);case 3:return e.call(n,t[0],t[1],t[2])}return e.apply(n,t)}},function(e,n,t){var o=t(223),i=t(226)(o);e.exports=i},function(e,n,t){var o=t(224),i=t(225),a=t(45),r=i?function(e,n){return i(e,"toString",{configurable:!0,enumerable:!1,value:o(n),writable:!0})}:a;e.exports=r},function(e,n){e.exports=function(e){return function(){return e}}},function(e,n,t){var o=t(9),i=function(){try{var e=o(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=i},function(e,n){var t=Date.now;e.exports=function(e){var n=0,o=0;return function(){var i=t(),a=16-(i-o);if(o=i,a>0){if(++n>=800)return arguments[0]}else n=0;return e.apply(void 0,arguments)}}},function(e,n,t){var o=t(75),i=t(228),a=t(233),r=t(76),s=t(234),l=t(41);e.exports=function(e,n,t){var c=-1,u=i,d=e.length,p=!0,h=[],m=h;if(t)p=!1,u=a;else if(d>=200){var f=n?null:s(e);if(f)return l(f);p=!1,u=r,m=new o}else m=n?[]:h;e:for(;++c<d;){var y=e[c],g=n?n(y):y;if(y=t||0!==y?y:0,p&&g==g){for(var b=m.length;b--;)if(m[b]===g)continue e;n&&m.push(g),h.push(y)}else u(m,g,t)||(m!==h&&m.push(g),h.push(y))}return h}},function(e,n,t){var o=t(229);e.exports=function(e,n){return!!(null==e?0:e.length)&&o(e,n,0)>-1}},function(e,n,t){var o=t(230),i=t(231),a=t(232);e.exports=function(e,n,t){return n==n?a(e,n,t):o(e,i,t)}},function(e,n){e.exports=function(e,n,t,o){for(var i=e.length,a=t+(o?1:-1);o?a--:++a<i;)if(n(e[a],a,e))return a;return-1}},function(e,n){e.exports=function(e){return e!=e}},function(e,n){e.exports=function(e,n,t){for(var o=t-1,i=e.length;++o<i;)if(e[o]===n)return o;return-1}},function(e,n){e.exports=function(e,n,t){for(var o=-1,i=null==e?0:e.length;++o<i;)if(t(n,e[o]))return!0;return!1}},function(e,n,t){var o=t(82),i=t(235),a=t(41),r=o&&1/a(new o([,-0]))[1]==1/0?function(e){return new o(e)}:i;e.exports=r},function(e,n){e.exports=function(){}},function(e,n,t){var o=t(81),i=t(11);e.exports=function(e){return i(e)&&o(e)}},function(e,n,t){},function(e,n,t){},function(e,n,t){},function(e,n,t){"use strict";t(87)},function(e,n,t){},function(e,n,t){"use strict";t(88)},function(e,n,t){"use strict";t(89)},function(e,n,t){"use strict";t.r(n);
/*!
 * Vue.js v2.7.14
 * (c) 2014-2022 Evan You
 * Released under the MIT License.
 */
var o=Object.freeze({}),i=Array.isArray;function a(e){return null==e}function r(e){return null!=e}function s(e){return!0===e}function l(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function c(e){return"function"==typeof e}function u(e){return null!==e&&"object"==typeof e}var d=Object.prototype.toString;function p(e){return"[object Object]"===d.call(e)}function h(e){return"[object RegExp]"===d.call(e)}function m(e){var n=parseFloat(String(e));return n>=0&&Math.floor(n)===n&&isFinite(e)}function f(e){return r(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function y(e){return null==e?"":Array.isArray(e)||p(e)&&e.toString===d?JSON.stringify(e,null,2):String(e)}function g(e){var n=parseFloat(e);return isNaN(n)?e:n}function b(e,n){for(var t=Object.create(null),o=e.split(","),i=0;i<o.length;i++)t[o[i]]=!0;return n?function(e){return t[e.toLowerCase()]}:function(e){return t[e]}}b("slot,component",!0);var w=b("key,ref,slot,slot-scope,is");function v(e,n){var t=e.length;if(t){if(n===e[t-1])return void(e.length=t-1);var o=e.indexOf(n);if(o>-1)return e.splice(o,1)}}var k=Object.prototype.hasOwnProperty;function x(e,n){return k.call(e,n)}function S(e){var n=Object.create(null);return function(t){return n[t]||(n[t]=e(t))}}var C=/-(\w)/g,A=S((function(e){return e.replace(C,(function(e,n){return n?n.toUpperCase():""}))})),P=S((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),I=/\B([A-Z])/g,T=S((function(e){return e.replace(I,"-$1").toLowerCase()}));var O=Function.prototype.bind?function(e,n){return e.bind(n)}:function(e,n){function t(t){var o=arguments.length;return o?o>1?e.apply(n,arguments):e.call(n,t):e.call(n)}return t._length=e.length,t};function M(e,n){n=n||0;for(var t=e.length-n,o=new Array(t);t--;)o[t]=e[t+n];return o}function D(e,n){for(var t in n)e[t]=n[t];return e}function B(e){for(var n={},t=0;t<e.length;t++)e[t]&&D(n,e[t]);return n}function _(e,n,t){}var E=function(e,n,t){return!1},U=function(e){return e};function F(e,n){if(e===n)return!0;var t=u(e),o=u(n);if(!t||!o)return!t&&!o&&String(e)===String(n);try{var i=Array.isArray(e),a=Array.isArray(n);if(i&&a)return e.length===n.length&&e.every((function(e,t){return F(e,n[t])}));if(e instanceof Date&&n instanceof Date)return e.getTime()===n.getTime();if(i||a)return!1;var r=Object.keys(e),s=Object.keys(n);return r.length===s.length&&r.every((function(t){return F(e[t],n[t])}))}catch(e){return!1}}function L(e,n){for(var t=0;t<e.length;t++)if(F(e[t],n))return t;return-1}function R(e){var n=!1;return function(){n||(n=!0,e.apply(this,arguments))}}function N(e,n){return e===n?0===e&&1/e!=1/n:e==e||n==n}var j=["component","directive","filter"],z=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],G={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:E,isReservedAttr:E,isUnknownElement:E,getTagNamespace:_,parsePlatformTagName:U,mustUseProp:E,async:!0,_lifecycleHooks:z},V=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function H(e){var n=(e+"").charCodeAt(0);return 36===n||95===n}function W(e,n,t,o){Object.defineProperty(e,n,{value:t,enumerable:!!o,writable:!0,configurable:!0})}var $=new RegExp("[^".concat(V.source,".$_\\d]"));var q="__proto__"in{},X="undefined"!=typeof window,Y=X&&window.navigator.userAgent.toLowerCase(),K=Y&&/msie|trident/.test(Y),Q=Y&&Y.indexOf("msie 9.0")>0,Z=Y&&Y.indexOf("edge/")>0;Y&&Y.indexOf("android");var J=Y&&/iphone|ipad|ipod|ios/.test(Y);Y&&/chrome\/\d+/.test(Y),Y&&/phantomjs/.test(Y);var ee,ne=Y&&Y.match(/firefox\/(\d+)/),te={}.watch,oe=!1;if(X)try{var ie={};Object.defineProperty(ie,"passive",{get:function(){oe=!0}}),window.addEventListener("test-passive",null,ie)}catch(e){}var ae=function(){return void 0===ee&&(ee=!X&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),ee},re=X&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function se(e){return"function"==typeof e&&/native code/.test(e.toString())}var le,ce="undefined"!=typeof Symbol&&se(Symbol)&&"undefined"!=typeof Reflect&&se(Reflect.ownKeys);le="undefined"!=typeof Set&&se(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var ue=null;function de(e){void 0===e&&(e=null),e||ue&&ue._scope.off(),ue=e,e&&e._scope.on()}var pe=function(){function e(e,n,t,o,i,a,r,s){this.tag=e,this.data=n,this.children=t,this.text=o,this.elm=i,this.ns=void 0,this.context=a,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=n&&n.key,this.componentOptions=r,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(e.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),e}(),he=function(e){void 0===e&&(e="");var n=new pe;return n.text=e,n.isComment=!0,n};function me(e){return new pe(void 0,void 0,void 0,String(e))}function fe(e){var n=new pe(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return n.ns=e.ns,n.isStatic=e.isStatic,n.key=e.key,n.isComment=e.isComment,n.fnContext=e.fnContext,n.fnOptions=e.fnOptions,n.fnScopeId=e.fnScopeId,n.asyncMeta=e.asyncMeta,n.isCloned=!0,n}var ye=0,ge=[],be=function(){function e(){this._pending=!1,this.id=ye++,this.subs=[]}return e.prototype.addSub=function(e){this.subs.push(e)},e.prototype.removeSub=function(e){this.subs[this.subs.indexOf(e)]=null,this._pending||(this._pending=!0,ge.push(this))},e.prototype.depend=function(n){e.target&&e.target.addDep(this)},e.prototype.notify=function(e){var n=this.subs.filter((function(e){return e}));for(var t=0,o=n.length;t<o;t++){0,n[t].update()}},e}();be.target=null;var we=[];function ve(e){we.push(e),be.target=e}function ke(){we.pop(),be.target=we[we.length-1]}var xe=Array.prototype,Se=Object.create(xe);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var n=xe[e];W(Se,e,(function(){for(var t=[],o=0;o<arguments.length;o++)t[o]=arguments[o];var i,a=n.apply(this,t),r=this.__ob__;switch(e){case"push":case"unshift":i=t;break;case"splice":i=t.slice(2)}return i&&r.observeArray(i),r.dep.notify(),a}))}));var Ce=Object.getOwnPropertyNames(Se),Ae={},Pe=!0;function Ie(e){Pe=e}var Te={notify:_,depend:_,addSub:_,removeSub:_},Oe=function(){function e(e,n,t){if(void 0===n&&(n=!1),void 0===t&&(t=!1),this.value=e,this.shallow=n,this.mock=t,this.dep=t?Te:new be,this.vmCount=0,W(e,"__ob__",this),i(e)){if(!t)if(q)e.__proto__=Se;else for(var o=0,a=Ce.length;o<a;o++){W(e,s=Ce[o],Se[s])}n||this.observeArray(e)}else{var r=Object.keys(e);for(o=0;o<r.length;o++){var s;De(e,s=r[o],Ae,void 0,n,t)}}}return e.prototype.observeArray=function(e){for(var n=0,t=e.length;n<t;n++)Me(e[n],!1,this.mock)},e}();function Me(e,n,t){return e&&x(e,"__ob__")&&e.__ob__ instanceof Oe?e.__ob__:!Pe||!t&&ae()||!i(e)&&!p(e)||!Object.isExtensible(e)||e.__v_skip||Re(e)||e instanceof pe?void 0:new Oe(e,n,t)}function De(e,n,t,o,a,r){var s=new be,l=Object.getOwnPropertyDescriptor(e,n);if(!l||!1!==l.configurable){var c=l&&l.get,u=l&&l.set;c&&!u||t!==Ae&&2!==arguments.length||(t=e[n]);var d=!a&&Me(t,!1,r);return Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:function(){var n=c?c.call(e):t;return be.target&&(s.depend(),d&&(d.dep.depend(),i(n)&&Ee(n))),Re(n)&&!a?n.value:n},set:function(n){var o=c?c.call(e):t;if(N(o,n)){if(u)u.call(e,n);else{if(c)return;if(!a&&Re(o)&&!Re(n))return void(o.value=n);t=n}d=!a&&Me(n,!1,r),s.notify()}}}),s}}function Be(e,n,t){if(!Le(e)){var o=e.__ob__;return i(e)&&m(n)?(e.length=Math.max(e.length,n),e.splice(n,1,t),o&&!o.shallow&&o.mock&&Me(t,!1,!0),t):n in e&&!(n in Object.prototype)?(e[n]=t,t):e._isVue||o&&o.vmCount?t:o?(De(o.value,n,t,void 0,o.shallow,o.mock),o.dep.notify(),t):(e[n]=t,t)}}function _e(e,n){if(i(e)&&m(n))e.splice(n,1);else{var t=e.__ob__;e._isVue||t&&t.vmCount||Le(e)||x(e,n)&&(delete e[n],t&&t.dep.notify())}}function Ee(e){for(var n=void 0,t=0,o=e.length;t<o;t++)(n=e[t])&&n.__ob__&&n.__ob__.dep.depend(),i(n)&&Ee(n)}function Ue(e){return Fe(e,!0),W(e,"__v_isShallow",!0),e}function Fe(e,n){if(!Le(e)){Me(e,n,ae());0}}function Le(e){return!(!e||!e.__v_isReadonly)}function Re(e){return!(!e||!0!==e.__v_isRef)}function Ne(e,n,t){Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var e=n[t];if(Re(e))return e.value;var o=e&&e.__ob__;return o&&o.dep.depend(),e},set:function(e){var o=n[t];Re(o)&&!Re(e)?o.value=e:n[t]=e}})}"".concat("watcher"," callback"),"".concat("watcher"," getter"),"".concat("watcher"," cleanup");var je;var ze=function(){function e(e){void 0===e&&(e=!1),this.detached=e,this.active=!0,this.effects=[],this.cleanups=[],this.parent=je,!e&&je&&(this.index=(je.scopes||(je.scopes=[])).push(this)-1)}return e.prototype.run=function(e){if(this.active){var n=je;try{return je=this,e()}finally{je=n}}else 0},e.prototype.on=function(){je=this},e.prototype.off=function(){je=this.parent},e.prototype.stop=function(e){if(this.active){var n=void 0,t=void 0;for(n=0,t=this.effects.length;n<t;n++)this.effects[n].teardown();for(n=0,t=this.cleanups.length;n<t;n++)this.cleanups[n]();if(this.scopes)for(n=0,t=this.scopes.length;n<t;n++)this.scopes[n].stop(!0);if(!this.detached&&this.parent&&!e){var o=this.parent.scopes.pop();o&&o!==this&&(this.parent.scopes[this.index]=o,o.index=this.index)}this.parent=void 0,this.active=!1}},e}();function Ge(e){var n=e._provided,t=e.$parent&&e.$parent._provided;return t===n?e._provided=Object.create(t):n}var Ve=S((function(e){var n="&"===e.charAt(0),t="~"===(e=n?e.slice(1):e).charAt(0),o="!"===(e=t?e.slice(1):e).charAt(0);return{name:e=o?e.slice(1):e,once:t,capture:o,passive:n}}));function He(e,n){function t(){var e=t.fns;if(!i(e))return In(e,null,arguments,n,"v-on handler");for(var o=e.slice(),a=0;a<o.length;a++)In(o[a],null,arguments,n,"v-on handler")}return t.fns=e,t}function We(e,n,t,o,i,r){var l,c,u,d;for(l in e)c=e[l],u=n[l],d=Ve(l),a(c)||(a(u)?(a(c.fns)&&(c=e[l]=He(c,r)),s(d.once)&&(c=e[l]=i(d.name,c,d.capture)),t(d.name,c,d.capture,d.passive,d.params)):c!==u&&(u.fns=c,e[l]=u));for(l in n)a(e[l])&&o((d=Ve(l)).name,n[l],d.capture)}function $e(e,n,t){var o;e instanceof pe&&(e=e.data.hook||(e.data.hook={}));var i=e[n];function l(){t.apply(this,arguments),v(o.fns,l)}a(i)?o=He([l]):r(i.fns)&&s(i.merged)?(o=i).fns.push(l):o=He([i,l]),o.merged=!0,e[n]=o}function qe(e,n,t,o,i){if(r(n)){if(x(n,t))return e[t]=n[t],i||delete n[t],!0;if(x(n,o))return e[t]=n[o],i||delete n[o],!0}return!1}function Xe(e){return l(e)?[me(e)]:i(e)?function e(n,t){var o,c,u,d,p=[];for(o=0;o<n.length;o++)a(c=n[o])||"boolean"==typeof c||(u=p.length-1,d=p[u],i(c)?c.length>0&&(Ye((c=e(c,"".concat(t||"","_").concat(o)))[0])&&Ye(d)&&(p[u]=me(d.text+c[0].text),c.shift()),p.push.apply(p,c)):l(c)?Ye(d)?p[u]=me(d.text+c):""!==c&&p.push(me(c)):Ye(c)&&Ye(d)?p[u]=me(d.text+c.text):(s(n._isVList)&&r(c.tag)&&a(c.key)&&r(t)&&(c.key="__vlist".concat(t,"_").concat(o,"__")),p.push(c)));return p}(e):void 0}function Ye(e){return r(e)&&r(e.text)&&!1===e.isComment}function Ke(e,n){var t,o,a,s,l=null;if(i(e)||"string"==typeof e)for(l=new Array(e.length),t=0,o=e.length;t<o;t++)l[t]=n(e[t],t);else if("number"==typeof e)for(l=new Array(e),t=0;t<e;t++)l[t]=n(t+1,t);else if(u(e))if(ce&&e[Symbol.iterator]){l=[];for(var c=e[Symbol.iterator](),d=c.next();!d.done;)l.push(n(d.value,l.length)),d=c.next()}else for(a=Object.keys(e),l=new Array(a.length),t=0,o=a.length;t<o;t++)s=a[t],l[t]=n(e[s],s,t);return r(l)||(l=[]),l._isVList=!0,l}function Qe(e,n,t,o){var i,a=this.$scopedSlots[e];a?(t=t||{},o&&(t=D(D({},o),t)),i=a(t)||(c(n)?n():n)):i=this.$slots[e]||(c(n)?n():n);var r=t&&t.slot;return r?this.$createElement("template",{slot:r},i):i}function Ze(e){return Mt(this.$options,"filters",e,!0)||U}function Je(e,n){return i(e)?-1===e.indexOf(n):e!==n}function en(e,n,t,o,i){var a=G.keyCodes[n]||t;return i&&o&&!G.keyCodes[n]?Je(i,o):a?Je(a,e):o?T(o)!==n:void 0===e}function nn(e,n,t,o,a){if(t)if(u(t)){i(t)&&(t=B(t));var r=void 0,s=function(i){if("class"===i||"style"===i||w(i))r=e;else{var s=e.attrs&&e.attrs.type;r=o||G.mustUseProp(n,s,i)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var l=A(i),c=T(i);l in r||c in r||(r[i]=t[i],a&&((e.on||(e.on={}))["update:".concat(i)]=function(e){t[i]=e}))};for(var l in t)s(l)}else;return e}function tn(e,n){var t=this._staticTrees||(this._staticTrees=[]),o=t[e];return o&&!n||an(o=t[e]=this.$options.staticRenderFns[e].call(this._renderProxy,this._c,this),"__static__".concat(e),!1),o}function on(e,n,t){return an(e,"__once__".concat(n).concat(t?"_".concat(t):""),!0),e}function an(e,n,t){if(i(e))for(var o=0;o<e.length;o++)e[o]&&"string"!=typeof e[o]&&rn(e[o],"".concat(n,"_").concat(o),t);else rn(e,n,t)}function rn(e,n,t){e.isStatic=!0,e.key=n,e.isOnce=t}function sn(e,n){if(n)if(p(n)){var t=e.on=e.on?D({},e.on):{};for(var o in n){var i=t[o],a=n[o];t[o]=i?[].concat(i,a):a}}else;return e}function ln(e,n,t,o){n=n||{$stable:!t};for(var a=0;a<e.length;a++){var r=e[a];i(r)?ln(r,n,t):r&&(r.proxy&&(r.fn.proxy=!0),n[r.key]=r.fn)}return o&&(n.$key=o),n}function cn(e,n){for(var t=0;t<n.length;t+=2){var o=n[t];"string"==typeof o&&o&&(e[n[t]]=n[t+1])}return e}function un(e,n){return"string"==typeof e?n+e:e}function dn(e){e._o=on,e._n=g,e._s=y,e._l=Ke,e._t=Qe,e._q=F,e._i=L,e._m=tn,e._f=Ze,e._k=en,e._b=nn,e._v=me,e._e=he,e._u=ln,e._g=sn,e._d=cn,e._p=un}function pn(e,n){if(!e||!e.length)return{};for(var t={},o=0,i=e.length;o<i;o++){var a=e[o],r=a.data;if(r&&r.attrs&&r.attrs.slot&&delete r.attrs.slot,a.context!==n&&a.fnContext!==n||!r||null==r.slot)(t.default||(t.default=[])).push(a);else{var s=r.slot,l=t[s]||(t[s]=[]);"template"===a.tag?l.push.apply(l,a.children||[]):l.push(a)}}for(var c in t)t[c].every(hn)&&delete t[c];return t}function hn(e){return e.isComment&&!e.asyncFactory||" "===e.text}function mn(e){return e.isComment&&e.asyncFactory}function fn(e,n,t,i){var a,r=Object.keys(t).length>0,s=n?!!n.$stable:!r,l=n&&n.$key;if(n){if(n._normalized)return n._normalized;if(s&&i&&i!==o&&l===i.$key&&!r&&!i.$hasNormal)return i;for(var c in a={},n)n[c]&&"$"!==c[0]&&(a[c]=yn(e,t,c,n[c]))}else a={};for(var u in t)u in a||(a[u]=gn(t,u));return n&&Object.isExtensible(n)&&(n._normalized=a),W(a,"$stable",s),W(a,"$key",l),W(a,"$hasNormal",r),a}function yn(e,n,t,o){var a=function(){var n=ue;de(e);var t=arguments.length?o.apply(null,arguments):o({}),a=(t=t&&"object"==typeof t&&!i(t)?[t]:Xe(t))&&t[0];return de(n),t&&(!a||1===t.length&&a.isComment&&!mn(a))?void 0:t};return o.proxy&&Object.defineProperty(n,t,{get:a,enumerable:!0,configurable:!0}),a}function gn(e,n){return function(){return e[n]}}function bn(e){return{get attrs(){if(!e._attrsProxy){var n=e._attrsProxy={};W(n,"_v_attr_proxy",!0),wn(n,e.$attrs,o,e,"$attrs")}return e._attrsProxy},get listeners(){e._listenersProxy||wn(e._listenersProxy={},e.$listeners,o,e,"$listeners");return e._listenersProxy},get slots(){return function(e){e._slotsProxy||kn(e._slotsProxy={},e.$scopedSlots);return e._slotsProxy}(e)},emit:O(e.$emit,e),expose:function(n){n&&Object.keys(n).forEach((function(t){return Ne(e,n,t)}))}}}function wn(e,n,t,o,i){var a=!1;for(var r in n)r in e?n[r]!==t[r]&&(a=!0):(a=!0,vn(e,r,o,i));for(var r in e)r in n||(a=!0,delete e[r]);return a}function vn(e,n,t,o){Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:function(){return t[o][n]}})}function kn(e,n){for(var t in n)e[t]=n[t];for(var t in e)t in n||delete e[t]}var xn=null;function Sn(e,n){return(e.__esModule||ce&&"Module"===e[Symbol.toStringTag])&&(e=e.default),u(e)?n.extend(e):e}function Cn(e){if(i(e))for(var n=0;n<e.length;n++){var t=e[n];if(r(t)&&(r(t.componentOptions)||mn(t)))return t}}function An(e,n,t,o,d,p){return(i(t)||l(t))&&(d=o,o=t,t=void 0),s(p)&&(d=2),function(e,n,t,o,l){if(r(t)&&r(t.__ob__))return he();r(t)&&r(t.is)&&(n=t.is);if(!n)return he();0;i(o)&&c(o[0])&&((t=t||{}).scopedSlots={default:o[0]},o.length=0);2===l?o=Xe(o):1===l&&(o=function(e){for(var n=0;n<e.length;n++)if(i(e[n]))return Array.prototype.concat.apply([],e);return e}(o));var d,p;if("string"==typeof n){var h=void 0;p=e.$vnode&&e.$vnode.ns||G.getTagNamespace(n),d=G.isReservedTag(n)?new pe(G.parsePlatformTagName(n),t,o,void 0,void 0,e):t&&t.pre||!r(h=Mt(e.$options,"components",n))?new pe(n,t,o,void 0,void 0,e):vt(h,t,e,o,n)}else d=vt(n,t,e,o);return i(d)?d:r(d)?(r(p)&&function e(n,t,o){n.ns=t,"foreignObject"===n.tag&&(t=void 0,o=!0);if(r(n.children))for(var i=0,l=n.children.length;i<l;i++){var c=n.children[i];r(c.tag)&&(a(c.ns)||s(o)&&"svg"!==c.tag)&&e(c,t,o)}}(d,p),r(t)&&function(e){u(e.style)&&Gn(e.style);u(e.class)&&Gn(e.class)}(t),d):he()}(e,n,t,o,d)}function Pn(e,n,t){ve();try{if(n)for(var o=n;o=o.$parent;){var i=o.$options.errorCaptured;if(i)for(var a=0;a<i.length;a++)try{if(!1===i[a].call(o,e,n,t))return}catch(e){Tn(e,o,"errorCaptured hook")}}Tn(e,n,t)}finally{ke()}}function In(e,n,t,o,i){var a;try{(a=t?e.apply(n,t):e.call(n))&&!a._isVue&&f(a)&&!a._handled&&(a.catch((function(e){return Pn(e,o,i+" (Promise/async)")})),a._handled=!0)}catch(e){Pn(e,o,i)}return a}function Tn(e,n,t){if(G.errorHandler)try{return G.errorHandler.call(null,e,n,t)}catch(n){n!==e&&On(n,null,"config.errorHandler")}On(e,n,t)}function On(e,n,t){if(!X||"undefined"==typeof console)throw e;console.error(e)}var Mn,Dn=!1,Bn=[],_n=!1;function En(){_n=!1;var e=Bn.slice(0);Bn.length=0;for(var n=0;n<e.length;n++)e[n]()}if("undefined"!=typeof Promise&&se(Promise)){var Un=Promise.resolve();Mn=function(){Un.then(En),J&&setTimeout(_)},Dn=!0}else if(K||"undefined"==typeof MutationObserver||!se(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Mn="undefined"!=typeof setImmediate&&se(setImmediate)?function(){setImmediate(En)}:function(){setTimeout(En,0)};else{var Fn=1,Ln=new MutationObserver(En),Rn=document.createTextNode(String(Fn));Ln.observe(Rn,{characterData:!0}),Mn=function(){Fn=(Fn+1)%2,Rn.data=String(Fn)},Dn=!0}function Nn(e,n){var t;if(Bn.push((function(){if(e)try{e.call(n)}catch(e){Pn(e,n,"nextTick")}else t&&t(n)})),_n||(_n=!0,Mn()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){t=e}))}function jn(e){return function(n,t){if(void 0===t&&(t=ue),t)return function(e,n,t){var o=e.$options;o[n]=Pt(o[n],t)}(t,e,n)}}jn("beforeMount"),jn("mounted"),jn("beforeUpdate"),jn("updated"),jn("beforeDestroy"),jn("destroyed"),jn("activated"),jn("deactivated"),jn("serverPrefetch"),jn("renderTracked"),jn("renderTriggered"),jn("errorCaptured");var zn=new le;function Gn(e){return function e(n,t){var o,a,r=i(n);if(!r&&!u(n)||n.__v_skip||Object.isFrozen(n)||n instanceof pe)return;if(n.__ob__){var s=n.__ob__.dep.id;if(t.has(s))return;t.add(s)}if(r)for(o=n.length;o--;)e(n[o],t);else if(Re(n))e(n.value,t);else for(a=Object.keys(n),o=a.length;o--;)e(n[a[o]],t)}(e,zn),zn.clear(),e}var Vn,Hn=0,Wn=function(){function e(e,n,t,o,i){var a,r;a=this,void 0===(r=je&&!je._vm?je:e?e._scope:void 0)&&(r=je),r&&r.active&&r.effects.push(a),(this.vm=e)&&i&&(e._watcher=this),o?(this.deep=!!o.deep,this.user=!!o.user,this.lazy=!!o.lazy,this.sync=!!o.sync,this.before=o.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++Hn,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new le,this.newDepIds=new le,this.expression="",c(n)?this.getter=n:(this.getter=function(e){if(!$.test(e)){var n=e.split(".");return function(e){for(var t=0;t<n.length;t++){if(!e)return;e=e[n[t]]}return e}}}(n),this.getter||(this.getter=_)),this.value=this.lazy?void 0:this.get()}return e.prototype.get=function(){var e;ve(this);var n=this.vm;try{e=this.getter.call(n,n)}catch(e){if(!this.user)throw e;Pn(e,n,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&Gn(e),ke(),this.cleanupDeps()}return e},e.prototype.addDep=function(e){var n=e.id;this.newDepIds.has(n)||(this.newDepIds.add(n),this.newDeps.push(e),this.depIds.has(n)||e.addSub(this))},e.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var n=this.deps[e];this.newDepIds.has(n.id)||n.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},e.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():pt(this)},e.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||u(e)||this.deep){var n=this.value;if(this.value=e,this.user){var t='callback for watcher "'.concat(this.expression,'"');In(this.cb,this.vm,[e,n],this.vm,t)}else this.cb.call(this.vm,e,n)}}},e.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},e.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},e.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&v(this.vm._scope.effects,this),this.active){for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},e}();function $n(e,n){Vn.$on(e,n)}function qn(e,n){Vn.$off(e,n)}function Xn(e,n){var t=Vn;return function o(){var i=n.apply(null,arguments);null!==i&&t.$off(e,o)}}function Yn(e,n,t){Vn=e,We(n,t||{},$n,qn,Xn,e),Vn=void 0}var Kn=null;function Qn(e){var n=Kn;return Kn=e,function(){Kn=n}}function Zn(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function Jn(e,n){if(n){if(e._directInactive=!1,Zn(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var t=0;t<e.$children.length;t++)Jn(e.$children[t]);et(e,"activated")}}function et(e,n,t,o){void 0===o&&(o=!0),ve();var i=ue;o&&de(e);var a=e.$options[n],r="".concat(n," hook");if(a)for(var s=0,l=a.length;s<l;s++)In(a[s],e,t||null,e,r);e._hasHookEvent&&e.$emit("hook:"+n),o&&de(i),ke()}var nt=[],tt=[],ot={},it=!1,at=!1,rt=0;var st=0,lt=Date.now;if(X&&!K){var ct=window.performance;ct&&"function"==typeof ct.now&&lt()>document.createEvent("Event").timeStamp&&(lt=function(){return ct.now()})}var ut=function(e,n){if(e.post){if(!n.post)return 1}else if(n.post)return-1;return e.id-n.id};function dt(){var e,n;for(st=lt(),at=!0,nt.sort(ut),rt=0;rt<nt.length;rt++)(e=nt[rt]).before&&e.before(),n=e.id,ot[n]=null,e.run();var t=tt.slice(),o=nt.slice();rt=nt.length=tt.length=0,ot={},it=at=!1,function(e){for(var n=0;n<e.length;n++)e[n]._inactive=!0,Jn(e[n],!0)}(t),function(e){var n=e.length;for(;n--;){var t=e[n],o=t.vm;o&&o._watcher===t&&o._isMounted&&!o._isDestroyed&&et(o,"updated")}}(o),function(){for(var e=0;e<ge.length;e++){var n=ge[e];n.subs=n.subs.filter((function(e){return e})),n._pending=!1}ge.length=0}(),re&&G.devtools&&re.emit("flush")}function pt(e){var n=e.id;if(null==ot[n]&&(e!==be.target||!e.noRecurse)){if(ot[n]=!0,at){for(var t=nt.length-1;t>rt&&nt[t].id>e.id;)t--;nt.splice(t+1,0,e)}else nt.push(e);it||(it=!0,Nn(dt))}}function ht(e,n){if(e){for(var t=Object.create(null),o=ce?Reflect.ownKeys(e):Object.keys(e),i=0;i<o.length;i++){var a=o[i];if("__ob__"!==a){var r=e[a].from;if(r in n._provided)t[a]=n._provided[r];else if("default"in e[a]){var s=e[a].default;t[a]=c(s)?s.call(n):s}else 0}}return t}}function mt(e,n,t,a,r){var l,c=this,u=r.options;x(a,"_uid")?(l=Object.create(a))._original=a:(l=a,a=a._original);var d=s(u._compiled),p=!d;this.data=e,this.props=n,this.children=t,this.parent=a,this.listeners=e.on||o,this.injections=ht(u.inject,a),this.slots=function(){return c.$slots||fn(a,e.scopedSlots,c.$slots=pn(t,a)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return fn(a,e.scopedSlots,this.slots())}}),d&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=fn(a,e.scopedSlots,this.$slots)),u._scopeId?this._c=function(e,n,t,o){var r=An(l,e,n,t,o,p);return r&&!i(r)&&(r.fnScopeId=u._scopeId,r.fnContext=a),r}:this._c=function(e,n,t,o){return An(l,e,n,t,o,p)}}function ft(e,n,t,o,i){var a=fe(e);return a.fnContext=t,a.fnOptions=o,n.slot&&((a.data||(a.data={})).slot=n.slot),a}function yt(e,n){for(var t in n)e[A(t)]=n[t]}function gt(e){return e.name||e.__name||e._componentTag}dn(mt.prototype);var bt={init:function(e,n){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var t=e;bt.prepatch(t,t)}else{(e.componentInstance=function(e,n){var t={_isComponent:!0,_parentVnode:e,parent:n},o=e.data.inlineTemplate;r(o)&&(t.render=o.render,t.staticRenderFns=o.staticRenderFns);return new e.componentOptions.Ctor(t)}(e,Kn)).$mount(n?e.elm:void 0,n)}},prepatch:function(e,n){var t=n.componentOptions;!function(e,n,t,i,a){var r=i.data.scopedSlots,s=e.$scopedSlots,l=!!(r&&!r.$stable||s!==o&&!s.$stable||r&&e.$scopedSlots.$key!==r.$key||!r&&e.$scopedSlots.$key),c=!!(a||e.$options._renderChildren||l),u=e.$vnode;e.$options._parentVnode=i,e.$vnode=i,e._vnode&&(e._vnode.parent=i),e.$options._renderChildren=a;var d=i.data.attrs||o;e._attrsProxy&&wn(e._attrsProxy,d,u.data&&u.data.attrs||o,e,"$attrs")&&(c=!0),e.$attrs=d,t=t||o;var p=e.$options._parentListeners;if(e._listenersProxy&&wn(e._listenersProxy,t,p||o,e,"$listeners"),e.$listeners=e.$options._parentListeners=t,Yn(e,t,p),n&&e.$options.props){Ie(!1);for(var h=e._props,m=e.$options._propKeys||[],f=0;f<m.length;f++){var y=m[f],g=e.$options.props;h[y]=Dt(y,g,n,e)}Ie(!0),e.$options.propsData=n}c&&(e.$slots=pn(a,i.context),e.$forceUpdate())}(n.componentInstance=e.componentInstance,t.propsData,t.listeners,n,t.children)},insert:function(e){var n,t=e.context,o=e.componentInstance;o._isMounted||(o._isMounted=!0,et(o,"mounted")),e.data.keepAlive&&(t._isMounted?((n=o)._inactive=!1,tt.push(n)):Jn(o,!0))},destroy:function(e){var n=e.componentInstance;n._isDestroyed||(e.data.keepAlive?function e(n,t){if(!(t&&(n._directInactive=!0,Zn(n))||n._inactive)){n._inactive=!0;for(var o=0;o<n.$children.length;o++)e(n.$children[o]);et(n,"deactivated")}}(n,!0):n.$destroy())}},wt=Object.keys(bt);function vt(e,n,t,l,c){if(!a(e)){var d=t.$options._base;if(u(e)&&(e=d.extend(e)),"function"==typeof e){var p;if(a(e.cid)&&void 0===(e=function(e,n){if(s(e.error)&&r(e.errorComp))return e.errorComp;if(r(e.resolved))return e.resolved;var t=xn;if(t&&r(e.owners)&&-1===e.owners.indexOf(t)&&e.owners.push(t),s(e.loading)&&r(e.loadingComp))return e.loadingComp;if(t&&!r(e.owners)){var o=e.owners=[t],i=!0,l=null,c=null;t.$on("hook:destroyed",(function(){return v(o,t)}));var d=function(e){for(var n=0,t=o.length;n<t;n++)o[n].$forceUpdate();e&&(o.length=0,null!==l&&(clearTimeout(l),l=null),null!==c&&(clearTimeout(c),c=null))},p=R((function(t){e.resolved=Sn(t,n),i?o.length=0:d(!0)})),h=R((function(n){r(e.errorComp)&&(e.error=!0,d(!0))})),m=e(p,h);return u(m)&&(f(m)?a(e.resolved)&&m.then(p,h):f(m.component)&&(m.component.then(p,h),r(m.error)&&(e.errorComp=Sn(m.error,n)),r(m.loading)&&(e.loadingComp=Sn(m.loading,n),0===m.delay?e.loading=!0:l=setTimeout((function(){l=null,a(e.resolved)&&a(e.error)&&(e.loading=!0,d(!1))}),m.delay||200)),r(m.timeout)&&(c=setTimeout((function(){c=null,a(e.resolved)&&h(null)}),m.timeout)))),i=!1,e.loading?e.loadingComp:e.resolved}}(p=e,d)))return function(e,n,t,o,i){var a=he();return a.asyncFactory=e,a.asyncMeta={data:n,context:t,children:o,tag:i},a}(p,n,t,l,c);n=n||{},Wt(e),r(n.model)&&function(e,n){var t=e.model&&e.model.prop||"value",o=e.model&&e.model.event||"input";(n.attrs||(n.attrs={}))[t]=n.model.value;var a=n.on||(n.on={}),s=a[o],l=n.model.callback;r(s)?(i(s)?-1===s.indexOf(l):s!==l)&&(a[o]=[l].concat(s)):a[o]=l}(e.options,n);var h=function(e,n,t){var o=n.options.props;if(!a(o)){var i={},s=e.attrs,l=e.props;if(r(s)||r(l))for(var c in o){var u=T(c);qe(i,l,c,u,!0)||qe(i,s,c,u,!1)}return i}}(n,e);if(s(e.options.functional))return function(e,n,t,a,s){var l=e.options,c={},u=l.props;if(r(u))for(var d in u)c[d]=Dt(d,u,n||o);else r(t.attrs)&&yt(c,t.attrs),r(t.props)&&yt(c,t.props);var p=new mt(t,c,s,a,e),h=l.render.call(null,p._c,p);if(h instanceof pe)return ft(h,t,p.parent,l,p);if(i(h)){for(var m=Xe(h)||[],f=new Array(m.length),y=0;y<m.length;y++)f[y]=ft(m[y],t,p.parent,l,p);return f}}(e,h,n,t,l);var m=n.on;if(n.on=n.nativeOn,s(e.options.abstract)){var y=n.slot;n={},y&&(n.slot=y)}!function(e){for(var n=e.hook||(e.hook={}),t=0;t<wt.length;t++){var o=wt[t],i=n[o],a=bt[o];i===a||i&&i._merged||(n[o]=i?kt(a,i):a)}}(n);var g=gt(e.options)||c;return new pe("vue-component-".concat(e.cid).concat(g?"-".concat(g):""),n,void 0,void 0,void 0,t,{Ctor:e,propsData:h,listeners:m,tag:c,children:l},p)}}}function kt(e,n){var t=function(t,o){e(t,o),n(t,o)};return t._merged=!0,t}var xt=_,St=G.optionMergeStrategies;function Ct(e,n,t){if(void 0===t&&(t=!0),!n)return e;for(var o,i,a,r=ce?Reflect.ownKeys(n):Object.keys(n),s=0;s<r.length;s++)"__ob__"!==(o=r[s])&&(i=e[o],a=n[o],t&&x(e,o)?i!==a&&p(i)&&p(a)&&Ct(i,a):Be(e,o,a));return e}function At(e,n,t){return t?function(){var o=c(n)?n.call(t,t):n,i=c(e)?e.call(t,t):e;return o?Ct(o,i):i}:n?e?function(){return Ct(c(n)?n.call(this,this):n,c(e)?e.call(this,this):e)}:n:e}function Pt(e,n){var t=n?e?e.concat(n):i(n)?n:[n]:e;return t?function(e){for(var n=[],t=0;t<e.length;t++)-1===n.indexOf(e[t])&&n.push(e[t]);return n}(t):t}function It(e,n,t,o){var i=Object.create(e||null);return n?D(i,n):i}St.data=function(e,n,t){return t?At(e,n,t):n&&"function"!=typeof n?e:At(e,n)},z.forEach((function(e){St[e]=Pt})),j.forEach((function(e){St[e+"s"]=It})),St.watch=function(e,n,t,o){if(e===te&&(e=void 0),n===te&&(n=void 0),!n)return Object.create(e||null);if(!e)return n;var a={};for(var r in D(a,e),n){var s=a[r],l=n[r];s&&!i(s)&&(s=[s]),a[r]=s?s.concat(l):i(l)?l:[l]}return a},St.props=St.methods=St.inject=St.computed=function(e,n,t,o){if(!e)return n;var i=Object.create(null);return D(i,e),n&&D(i,n),i},St.provide=function(e,n){return e?function(){var t=Object.create(null);return Ct(t,c(e)?e.call(this):e),n&&Ct(t,c(n)?n.call(this):n,!1),t}:n};var Tt=function(e,n){return void 0===n?e:n};function Ot(e,n,t){if(c(n)&&(n=n.options),function(e,n){var t=e.props;if(t){var o,a,r={};if(i(t))for(o=t.length;o--;)"string"==typeof(a=t[o])&&(r[A(a)]={type:null});else if(p(t))for(var s in t)a=t[s],r[A(s)]=p(a)?a:{type:a};else 0;e.props=r}}(n),function(e,n){var t=e.inject;if(t){var o=e.inject={};if(i(t))for(var a=0;a<t.length;a++)o[t[a]]={from:t[a]};else if(p(t))for(var r in t){var s=t[r];o[r]=p(s)?D({from:r},s):{from:s}}else 0}}(n),function(e){var n=e.directives;if(n)for(var t in n){var o=n[t];c(o)&&(n[t]={bind:o,update:o})}}(n),!n._base&&(n.extends&&(e=Ot(e,n.extends,t)),n.mixins))for(var o=0,a=n.mixins.length;o<a;o++)e=Ot(e,n.mixins[o],t);var r,s={};for(r in e)l(r);for(r in n)x(e,r)||l(r);function l(o){var i=St[o]||Tt;s[o]=i(e[o],n[o],t,o)}return s}function Mt(e,n,t,o){if("string"==typeof t){var i=e[n];if(x(i,t))return i[t];var a=A(t);if(x(i,a))return i[a];var r=P(a);return x(i,r)?i[r]:i[t]||i[a]||i[r]}}function Dt(e,n,t,o){var i=n[e],a=!x(t,e),r=t[e],s=Ut(Boolean,i.type);if(s>-1)if(a&&!x(i,"default"))r=!1;else if(""===r||r===T(e)){var l=Ut(String,i.type);(l<0||s<l)&&(r=!0)}if(void 0===r){r=function(e,n,t){if(!x(n,"default"))return;var o=n.default;0;if(e&&e.$options.propsData&&void 0===e.$options.propsData[t]&&void 0!==e._props[t])return e._props[t];return c(o)&&"Function"!==_t(n.type)?o.call(e):o}(o,i,e);var u=Pe;Ie(!0),Me(r),Ie(u)}return r}var Bt=/^\s*function (\w+)/;function _t(e){var n=e&&e.toString().match(Bt);return n?n[1]:""}function Et(e,n){return _t(e)===_t(n)}function Ut(e,n){if(!i(n))return Et(n,e)?0:-1;for(var t=0,o=n.length;t<o;t++)if(Et(n[t],e))return t;return-1}var Ft={enumerable:!0,configurable:!0,get:_,set:_};function Lt(e,n,t){Ft.get=function(){return this[n][t]},Ft.set=function(e){this[n][t]=e},Object.defineProperty(e,t,Ft)}function Rt(e){var n=e.$options;if(n.props&&function(e,n){var t=e.$options.propsData||{},o=e._props=Ue({}),i=e.$options._propKeys=[];e.$parent&&Ie(!1);var a=function(a){i.push(a);var r=Dt(a,n,t,e);De(o,a,r),a in e||Lt(e,"_props",a)};for(var r in n)a(r);Ie(!0)}(e,n.props),function(e){var n=e.$options,t=n.setup;if(t){var o=e._setupContext=bn(e);de(e),ve();var i=In(t,null,[e._props||Ue({}),o],e,"setup");if(ke(),de(),c(i))n.render=i;else if(u(i))if(e._setupState=i,i.__sfc){var a=e._setupProxy={};for(var r in i)"__sfc"!==r&&Ne(a,i,r)}else for(var r in i)H(r)||Ne(e,i,r);else 0}}(e),n.methods&&function(e,n){e.$options.props;for(var t in n)e[t]="function"!=typeof n[t]?_:O(n[t],e)}(e,n.methods),n.data)!function(e){var n=e.$options.data;p(n=e._data=c(n)?function(e,n){ve();try{return e.call(n,n)}catch(e){return Pn(e,n,"data()"),{}}finally{ke()}}(n,e):n||{})||(n={});var t=Object.keys(n),o=e.$options.props,i=(e.$options.methods,t.length);for(;i--;){var a=t[i];0,o&&x(o,a)||H(a)||Lt(e,"_data",a)}var r=Me(n);r&&r.vmCount++}(e);else{var t=Me(e._data={});t&&t.vmCount++}n.computed&&function(e,n){var t=e._computedWatchers=Object.create(null),o=ae();for(var i in n){var a=n[i],r=c(a)?a:a.get;0,o||(t[i]=new Wn(e,r||_,_,Nt)),i in e||jt(e,i,a)}}(e,n.computed),n.watch&&n.watch!==te&&function(e,n){for(var t in n){var o=n[t];if(i(o))for(var a=0;a<o.length;a++)Vt(e,t,o[a]);else Vt(e,t,o)}}(e,n.watch)}var Nt={lazy:!0};function jt(e,n,t){var o=!ae();c(t)?(Ft.get=o?zt(n):Gt(t),Ft.set=_):(Ft.get=t.get?o&&!1!==t.cache?zt(n):Gt(t.get):_,Ft.set=t.set||_),Object.defineProperty(e,n,Ft)}function zt(e){return function(){var n=this._computedWatchers&&this._computedWatchers[e];if(n)return n.dirty&&n.evaluate(),be.target&&n.depend(),n.value}}function Gt(e){return function(){return e.call(this,this)}}function Vt(e,n,t,o){return p(t)&&(o=t,t=t.handler),"string"==typeof t&&(t=e[t]),e.$watch(n,t,o)}var Ht=0;function Wt(e){var n=e.options;if(e.super){var t=Wt(e.super);if(t!==e.superOptions){e.superOptions=t;var o=function(e){var n,t=e.options,o=e.sealedOptions;for(var i in t)t[i]!==o[i]&&(n||(n={}),n[i]=t[i]);return n}(e);o&&D(e.extendOptions,o),(n=e.options=Ot(t,e.extendOptions)).name&&(n.components[n.name]=e)}}return n}function $t(e){this._init(e)}function qt(e){e.cid=0;var n=1;e.extend=function(e){e=e||{};var t=this,o=t.cid,i=e._Ctor||(e._Ctor={});if(i[o])return i[o];var a=gt(e)||gt(t.options);var r=function(e){this._init(e)};return(r.prototype=Object.create(t.prototype)).constructor=r,r.cid=n++,r.options=Ot(t.options,e),r.super=t,r.options.props&&function(e){var n=e.options.props;for(var t in n)Lt(e.prototype,"_props",t)}(r),r.options.computed&&function(e){var n=e.options.computed;for(var t in n)jt(e.prototype,t,n[t])}(r),r.extend=t.extend,r.mixin=t.mixin,r.use=t.use,j.forEach((function(e){r[e]=t[e]})),a&&(r.options.components[a]=r),r.superOptions=t.options,r.extendOptions=e,r.sealedOptions=D({},r.options),i[o]=r,r}}function Xt(e){return e&&(gt(e.Ctor.options)||e.tag)}function Yt(e,n){return i(e)?e.indexOf(n)>-1:"string"==typeof e?e.split(",").indexOf(n)>-1:!!h(e)&&e.test(n)}function Kt(e,n){var t=e.cache,o=e.keys,i=e._vnode;for(var a in t){var r=t[a];if(r){var s=r.name;s&&!n(s)&&Qt(t,a,o,i)}}}function Qt(e,n,t,o){var i=e[n];!i||o&&i.tag===o.tag||i.componentInstance.$destroy(),e[n]=null,v(t,n)}$t.prototype._init=function(e){var n=this;n._uid=Ht++,n._isVue=!0,n.__v_skip=!0,n._scope=new ze(!0),n._scope._vm=!0,e&&e._isComponent?function(e,n){var t=e.$options=Object.create(e.constructor.options),o=n._parentVnode;t.parent=n.parent,t._parentVnode=o;var i=o.componentOptions;t.propsData=i.propsData,t._parentListeners=i.listeners,t._renderChildren=i.children,t._componentTag=i.tag,n.render&&(t.render=n.render,t.staticRenderFns=n.staticRenderFns)}(n,e):n.$options=Ot(Wt(n.constructor),e||{},n),n._renderProxy=n,n._self=n,function(e){var n=e.$options,t=n.parent;if(t&&!n.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(e)}e.$parent=t,e.$root=t?t.$root:e,e.$children=[],e.$refs={},e._provided=t?t._provided:Object.create(null),e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(n),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var n=e.$options._parentListeners;n&&Yn(e,n)}(n),function(e){e._vnode=null,e._staticTrees=null;var n=e.$options,t=e.$vnode=n._parentVnode,i=t&&t.context;e.$slots=pn(n._renderChildren,i),e.$scopedSlots=t?fn(e.$parent,t.data.scopedSlots,e.$slots):o,e._c=function(n,t,o,i){return An(e,n,t,o,i,!1)},e.$createElement=function(n,t,o,i){return An(e,n,t,o,i,!0)};var a=t&&t.data;De(e,"$attrs",a&&a.attrs||o,null,!0),De(e,"$listeners",n._parentListeners||o,null,!0)}(n),et(n,"beforeCreate",void 0,!1),function(e){var n=ht(e.$options.inject,e);n&&(Ie(!1),Object.keys(n).forEach((function(t){De(e,t,n[t])})),Ie(!0))}(n),Rt(n),function(e){var n=e.$options.provide;if(n){var t=c(n)?n.call(e):n;if(!u(t))return;for(var o=Ge(e),i=ce?Reflect.ownKeys(t):Object.keys(t),a=0;a<i.length;a++){var r=i[a];Object.defineProperty(o,r,Object.getOwnPropertyDescriptor(t,r))}}}(n),et(n,"created"),n.$options.el&&n.$mount(n.$options.el)},function(e){var n={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(e.prototype,"$data",n),Object.defineProperty(e.prototype,"$props",t),e.prototype.$set=Be,e.prototype.$delete=_e,e.prototype.$watch=function(e,n,t){if(p(n))return Vt(this,e,n,t);(t=t||{}).user=!0;var o=new Wn(this,e,n,t);if(t.immediate){var i='callback for immediate watcher "'.concat(o.expression,'"');ve(),In(n,this,[o.value],this,i),ke()}return function(){o.teardown()}}}($t),function(e){var n=/^hook:/;e.prototype.$on=function(e,t){var o=this;if(i(e))for(var a=0,r=e.length;a<r;a++)o.$on(e[a],t);else(o._events[e]||(o._events[e]=[])).push(t),n.test(e)&&(o._hasHookEvent=!0);return o},e.prototype.$once=function(e,n){var t=this;function o(){t.$off(e,o),n.apply(t,arguments)}return o.fn=n,t.$on(e,o),t},e.prototype.$off=function(e,n){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(i(e)){for(var o=0,a=e.length;o<a;o++)t.$off(e[o],n);return t}var r,s=t._events[e];if(!s)return t;if(!n)return t._events[e]=null,t;for(var l=s.length;l--;)if((r=s[l])===n||r.fn===n){s.splice(l,1);break}return t},e.prototype.$emit=function(e){var n=this,t=n._events[e];if(t){t=t.length>1?M(t):t;for(var o=M(arguments,1),i='event handler for "'.concat(e,'"'),a=0,r=t.length;a<r;a++)In(t[a],n,o,n,i)}return n}}($t),function(e){e.prototype._update=function(e,n){var t=this,o=t.$el,i=t._vnode,a=Qn(t);t._vnode=e,t.$el=i?t.__patch__(i,e):t.__patch__(t.$el,e,n,!1),a(),o&&(o.__vue__=null),t.$el&&(t.$el.__vue__=t);for(var r=t;r&&r.$vnode&&r.$parent&&r.$vnode===r.$parent._vnode;)r.$parent.$el=r.$el,r=r.$parent},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){et(e,"beforeDestroy"),e._isBeingDestroyed=!0;var n=e.$parent;!n||n._isBeingDestroyed||e.$options.abstract||v(n.$children,e),e._scope.stop(),e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),et(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}($t),function(e){dn(e.prototype),e.prototype.$nextTick=function(e){return Nn(e,this)},e.prototype._render=function(){var e,n=this,t=n.$options,o=t.render,a=t._parentVnode;a&&n._isMounted&&(n.$scopedSlots=fn(n.$parent,a.data.scopedSlots,n.$slots,n.$scopedSlots),n._slotsProxy&&kn(n._slotsProxy,n.$scopedSlots)),n.$vnode=a;try{de(n),xn=n,e=o.call(n._renderProxy,n.$createElement)}catch(t){Pn(t,n,"render"),e=n._vnode}finally{xn=null,de()}return i(e)&&1===e.length&&(e=e[0]),e instanceof pe||(e=he()),e.parent=a,e}}($t);var Zt=[String,RegExp,Array],Jt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Zt,exclude:Zt,max:[String,Number]},methods:{cacheVNode:function(){var e=this.cache,n=this.keys,t=this.vnodeToCache,o=this.keyToCache;if(t){var i=t.tag,a=t.componentInstance,r=t.componentOptions;e[o]={name:Xt(r),tag:i,componentInstance:a},n.push(o),this.max&&n.length>parseInt(this.max)&&Qt(e,n[0],n,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)Qt(this.cache,e,this.keys)},mounted:function(){var e=this;this.cacheVNode(),this.$watch("include",(function(n){Kt(e,(function(e){return Yt(n,e)}))})),this.$watch("exclude",(function(n){Kt(e,(function(e){return!Yt(n,e)}))}))},updated:function(){this.cacheVNode()},render:function(){var e=this.$slots.default,n=Cn(e),t=n&&n.componentOptions;if(t){var o=Xt(t),i=this.include,a=this.exclude;if(i&&(!o||!Yt(i,o))||a&&o&&Yt(a,o))return n;var r=this.cache,s=this.keys,l=null==n.key?t.Ctor.cid+(t.tag?"::".concat(t.tag):""):n.key;r[l]?(n.componentInstance=r[l].componentInstance,v(s,l),s.push(l)):(this.vnodeToCache=n,this.keyToCache=l),n.data.keepAlive=!0}return n||e&&e[0]}}};!function(e){var n={get:function(){return G}};Object.defineProperty(e,"config",n),e.util={warn:xt,extend:D,mergeOptions:Ot,defineReactive:De},e.set=Be,e.delete=_e,e.nextTick=Nn,e.observable=function(e){return Me(e),e},e.options=Object.create(null),j.forEach((function(n){e.options[n+"s"]=Object.create(null)})),e.options._base=e,D(e.options.components,Jt),function(e){e.use=function(e){var n=this._installedPlugins||(this._installedPlugins=[]);if(n.indexOf(e)>-1)return this;var t=M(arguments,1);return t.unshift(this),c(e.install)?e.install.apply(e,t):c(e)&&e.apply(null,t),n.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=Ot(this.options,e),this}}(e),qt(e),function(e){j.forEach((function(n){e[n]=function(e,t){return t?("component"===n&&p(t)&&(t.name=t.name||e,t=this.options._base.extend(t)),"directive"===n&&c(t)&&(t={bind:t,update:t}),this.options[n+"s"][e]=t,t):this.options[n+"s"][e]}}))}(e)}($t),Object.defineProperty($t.prototype,"$isServer",{get:ae}),Object.defineProperty($t.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty($t,"FunctionalRenderContext",{value:mt}),$t.version="2.7.14";var eo=b("style,class"),no=b("input,textarea,option,select,progress"),to=b("contenteditable,draggable,spellcheck"),oo=b("events,caret,typing,plaintext-only"),io=b("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),ao="http://www.w3.org/1999/xlink",ro=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},so=function(e){return ro(e)?e.slice(6,e.length):""},lo=function(e){return null==e||!1===e};function co(e){for(var n=e.data,t=e,o=e;r(o.componentInstance);)(o=o.componentInstance._vnode)&&o.data&&(n=uo(o.data,n));for(;r(t=t.parent);)t&&t.data&&(n=uo(n,t.data));return function(e,n){if(r(e)||r(n))return po(e,ho(n));return""}(n.staticClass,n.class)}function uo(e,n){return{staticClass:po(e.staticClass,n.staticClass),class:r(e.class)?[e.class,n.class]:n.class}}function po(e,n){return e?n?e+" "+n:e:n||""}function ho(e){return Array.isArray(e)?function(e){for(var n,t="",o=0,i=e.length;o<i;o++)r(n=ho(e[o]))&&""!==n&&(t&&(t+=" "),t+=n);return t}(e):u(e)?function(e){var n="";for(var t in e)e[t]&&(n&&(n+=" "),n+=t);return n}(e):"string"==typeof e?e:""}var mo={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},fo=b("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),yo=b("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),go=function(e){return fo(e)||yo(e)};var bo=Object.create(null);var wo=b("text,number,password,search,email,tel,url");var vo=Object.freeze({__proto__:null,createElement:function(e,n){var t=document.createElement(e);return"select"!==e||n.data&&n.data.attrs&&void 0!==n.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(e,n){return document.createElementNS(mo[e],n)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,n,t){e.insertBefore(n,t)},removeChild:function(e,n){e.removeChild(n)},appendChild:function(e,n){e.appendChild(n)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,n){e.textContent=n},setStyleScope:function(e,n){e.setAttribute(n,"")}}),ko={create:function(e,n){xo(n)},update:function(e,n){e.data.ref!==n.data.ref&&(xo(e,!0),xo(n))},destroy:function(e){xo(e,!0)}};function xo(e,n){var t=e.data.ref;if(r(t)){var o=e.context,a=e.componentInstance||e.elm,s=n?null:a,l=n?void 0:a;if(c(t))In(t,o,[s],o,"template ref function");else{var u=e.data.refInFor,d="string"==typeof t||"number"==typeof t,p=Re(t),h=o.$refs;if(d||p)if(u){var m=d?h[t]:t.value;n?i(m)&&v(m,a):i(m)?m.includes(a)||m.push(a):d?(h[t]=[a],So(o,t,h[t])):t.value=[a]}else if(d){if(n&&h[t]!==a)return;h[t]=l,So(o,t,s)}else if(p){if(n&&t.value!==a)return;t.value=s}else 0}}}function So(e,n,t){var o=e._setupState;o&&x(o,n)&&(Re(o[n])?o[n].value=t:o[n]=t)}var Co=new pe("",{},[]),Ao=["create","activate","update","remove","destroy"];function Po(e,n){return e.key===n.key&&e.asyncFactory===n.asyncFactory&&(e.tag===n.tag&&e.isComment===n.isComment&&r(e.data)===r(n.data)&&function(e,n){if("input"!==e.tag)return!0;var t,o=r(t=e.data)&&r(t=t.attrs)&&t.type,i=r(t=n.data)&&r(t=t.attrs)&&t.type;return o===i||wo(o)&&wo(i)}(e,n)||s(e.isAsyncPlaceholder)&&a(n.asyncFactory.error))}function Io(e,n,t){var o,i,a={};for(o=n;o<=t;++o)r(i=e[o].key)&&(a[i]=o);return a}var To={create:Oo,update:Oo,destroy:function(e){Oo(e,Co)}};function Oo(e,n){(e.data.directives||n.data.directives)&&function(e,n){var t,o,i,a=e===Co,r=n===Co,s=Do(e.data.directives,e.context),l=Do(n.data.directives,n.context),c=[],u=[];for(t in l)o=s[t],i=l[t],o?(i.oldValue=o.value,i.oldArg=o.arg,_o(i,"update",n,e),i.def&&i.def.componentUpdated&&u.push(i)):(_o(i,"bind",n,e),i.def&&i.def.inserted&&c.push(i));if(c.length){var d=function(){for(var t=0;t<c.length;t++)_o(c[t],"inserted",n,e)};a?$e(n,"insert",d):d()}u.length&&$e(n,"postpatch",(function(){for(var t=0;t<u.length;t++)_o(u[t],"componentUpdated",n,e)}));if(!a)for(t in s)l[t]||_o(s[t],"unbind",e,e,r)}(e,n)}var Mo=Object.create(null);function Do(e,n){var t,o,i=Object.create(null);if(!e)return i;for(t=0;t<e.length;t++){if((o=e[t]).modifiers||(o.modifiers=Mo),i[Bo(o)]=o,n._setupState&&n._setupState.__sfc){var a=o.def||Mt(n,"_setupState","v-"+o.name);o.def="function"==typeof a?{bind:a,update:a}:a}o.def=o.def||Mt(n.$options,"directives",o.name)}return i}function Bo(e){return e.rawName||"".concat(e.name,".").concat(Object.keys(e.modifiers||{}).join("."))}function _o(e,n,t,o,i){var a=e.def&&e.def[n];if(a)try{a(t.elm,e,t,o,i)}catch(o){Pn(o,t.context,"directive ".concat(e.name," ").concat(n," hook"))}}var Eo=[ko,To];function Uo(e,n){var t=n.componentOptions;if(!(r(t)&&!1===t.Ctor.options.inheritAttrs||a(e.data.attrs)&&a(n.data.attrs))){var o,i,l=n.elm,c=e.data.attrs||{},u=n.data.attrs||{};for(o in(r(u.__ob__)||s(u._v_attr_proxy))&&(u=n.data.attrs=D({},u)),u)i=u[o],c[o]!==i&&Fo(l,o,i,n.data.pre);for(o in(K||Z)&&u.value!==c.value&&Fo(l,"value",u.value),c)a(u[o])&&(ro(o)?l.removeAttributeNS(ao,so(o)):to(o)||l.removeAttribute(o))}}function Fo(e,n,t,o){o||e.tagName.indexOf("-")>-1?Lo(e,n,t):io(n)?lo(t)?e.removeAttribute(n):(t="allowfullscreen"===n&&"EMBED"===e.tagName?"true":n,e.setAttribute(n,t)):to(n)?e.setAttribute(n,function(e,n){return lo(n)||"false"===n?"false":"contenteditable"===e&&oo(n)?n:"true"}(n,t)):ro(n)?lo(t)?e.removeAttributeNS(ao,so(n)):e.setAttributeNS(ao,n,t):Lo(e,n,t)}function Lo(e,n,t){if(lo(t))e.removeAttribute(n);else{if(K&&!Q&&"TEXTAREA"===e.tagName&&"placeholder"===n&&""!==t&&!e.__ieph){var o=function(n){n.stopImmediatePropagation(),e.removeEventListener("input",o)};e.addEventListener("input",o),e.__ieph=!0}e.setAttribute(n,t)}}var Ro={create:Uo,update:Uo};function No(e,n){var t=n.elm,o=n.data,i=e.data;if(!(a(o.staticClass)&&a(o.class)&&(a(i)||a(i.staticClass)&&a(i.class)))){var s=co(n),l=t._transitionClasses;r(l)&&(s=po(s,ho(l))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var jo,zo={create:No,update:No};function Go(e,n,t){var o=jo;return function i(){var a=n.apply(null,arguments);null!==a&&Wo(e,i,t,o)}}var Vo=Dn&&!(ne&&Number(ne[1])<=53);function Ho(e,n,t,o){if(Vo){var i=st,a=n;n=a._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=i||e.timeStamp<=0||e.target.ownerDocument!==document)return a.apply(this,arguments)}}jo.addEventListener(e,n,oe?{capture:t,passive:o}:t)}function Wo(e,n,t,o){(o||jo).removeEventListener(e,n._wrapper||n,t)}function $o(e,n){if(!a(e.data.on)||!a(n.data.on)){var t=n.data.on||{},o=e.data.on||{};jo=n.elm||e.elm,function(e){if(r(e.__r)){var n=K?"change":"input";e[n]=[].concat(e.__r,e[n]||[]),delete e.__r}r(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(t),We(t,o,Ho,Wo,Go,n.context),jo=void 0}}var qo,Xo={create:$o,update:$o,destroy:function(e){return $o(e,Co)}};function Yo(e,n){if(!a(e.data.domProps)||!a(n.data.domProps)){var t,o,i=n.elm,l=e.data.domProps||{},c=n.data.domProps||{};for(t in(r(c.__ob__)||s(c._v_attr_proxy))&&(c=n.data.domProps=D({},c)),l)t in c||(i[t]="");for(t in c){if(o=c[t],"textContent"===t||"innerHTML"===t){if(n.children&&(n.children.length=0),o===l[t])continue;1===i.childNodes.length&&i.removeChild(i.childNodes[0])}if("value"===t&&"PROGRESS"!==i.tagName){i._value=o;var u=a(o)?"":String(o);Ko(i,u)&&(i.value=u)}else if("innerHTML"===t&&yo(i.tagName)&&a(i.innerHTML)){(qo=qo||document.createElement("div")).innerHTML="<svg>".concat(o,"</svg>");for(var d=qo.firstChild;i.firstChild;)i.removeChild(i.firstChild);for(;d.firstChild;)i.appendChild(d.firstChild)}else if(o!==l[t])try{i[t]=o}catch(e){}}}}function Ko(e,n){return!e.composing&&("OPTION"===e.tagName||function(e,n){var t=!0;try{t=document.activeElement!==e}catch(e){}return t&&e.value!==n}(e,n)||function(e,n){var t=e.value,o=e._vModifiers;if(r(o)){if(o.number)return g(t)!==g(n);if(o.trim)return t.trim()!==n.trim()}return t!==n}(e,n))}var Qo={create:Yo,update:Yo},Zo=S((function(e){var n={},t=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var o=e.split(t);o.length>1&&(n[o[0].trim()]=o[1].trim())}})),n}));function Jo(e){var n=ei(e.style);return e.staticStyle?D(e.staticStyle,n):n}function ei(e){return Array.isArray(e)?B(e):"string"==typeof e?Zo(e):e}var ni,ti=/^--/,oi=/\s*!important$/,ii=function(e,n,t){if(ti.test(n))e.style.setProperty(n,t);else if(oi.test(t))e.style.setProperty(T(n),t.replace(oi,""),"important");else{var o=ri(n);if(Array.isArray(t))for(var i=0,a=t.length;i<a;i++)e.style[o]=t[i];else e.style[o]=t}},ai=["Webkit","Moz","ms"],ri=S((function(e){if(ni=ni||document.createElement("div").style,"filter"!==(e=A(e))&&e in ni)return e;for(var n=e.charAt(0).toUpperCase()+e.slice(1),t=0;t<ai.length;t++){var o=ai[t]+n;if(o in ni)return o}}));function si(e,n){var t=n.data,o=e.data;if(!(a(t.staticStyle)&&a(t.style)&&a(o.staticStyle)&&a(o.style))){var i,s,l=n.elm,c=o.staticStyle,u=o.normalizedStyle||o.style||{},d=c||u,p=ei(n.data.style)||{};n.data.normalizedStyle=r(p.__ob__)?D({},p):p;var h=function(e,n){var t,o={};if(n)for(var i=e;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(t=Jo(i.data))&&D(o,t);(t=Jo(e.data))&&D(o,t);for(var a=e;a=a.parent;)a.data&&(t=Jo(a.data))&&D(o,t);return o}(n,!0);for(s in d)a(h[s])&&ii(l,s,"");for(s in h)(i=h[s])!==d[s]&&ii(l,s,null==i?"":i)}}var li={create:si,update:si},ci=/\s+/;function ui(e,n){if(n&&(n=n.trim()))if(e.classList)n.indexOf(" ")>-1?n.split(ci).forEach((function(n){return e.classList.add(n)})):e.classList.add(n);else{var t=" ".concat(e.getAttribute("class")||""," ");t.indexOf(" "+n+" ")<0&&e.setAttribute("class",(t+n).trim())}}function di(e,n){if(n&&(n=n.trim()))if(e.classList)n.indexOf(" ")>-1?n.split(ci).forEach((function(n){return e.classList.remove(n)})):e.classList.remove(n),e.classList.length||e.removeAttribute("class");else{for(var t=" ".concat(e.getAttribute("class")||""," "),o=" "+n+" ";t.indexOf(o)>=0;)t=t.replace(o," ");(t=t.trim())?e.setAttribute("class",t):e.removeAttribute("class")}}function pi(e){if(e){if("object"==typeof e){var n={};return!1!==e.css&&D(n,hi(e.name||"v")),D(n,e),n}return"string"==typeof e?hi(e):void 0}}var hi=S((function(e){return{enterClass:"".concat(e,"-enter"),enterToClass:"".concat(e,"-enter-to"),enterActiveClass:"".concat(e,"-enter-active"),leaveClass:"".concat(e,"-leave"),leaveToClass:"".concat(e,"-leave-to"),leaveActiveClass:"".concat(e,"-leave-active")}})),mi=X&&!Q,fi="transition",yi="transitionend",gi="animation",bi="animationend";mi&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(fi="WebkitTransition",yi="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(gi="WebkitAnimation",bi="webkitAnimationEnd"));var wi=X?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function vi(e){wi((function(){wi(e)}))}function ki(e,n){var t=e._transitionClasses||(e._transitionClasses=[]);t.indexOf(n)<0&&(t.push(n),ui(e,n))}function xi(e,n){e._transitionClasses&&v(e._transitionClasses,n),di(e,n)}function Si(e,n,t){var o=Ai(e,n),i=o.type,a=o.timeout,r=o.propCount;if(!i)return t();var s="transition"===i?yi:bi,l=0,c=function(){e.removeEventListener(s,u),t()},u=function(n){n.target===e&&++l>=r&&c()};setTimeout((function(){l<r&&c()}),a+1),e.addEventListener(s,u)}var Ci=/\b(transform|all)(,|$)/;function Ai(e,n){var t,o=window.getComputedStyle(e),i=(o[fi+"Delay"]||"").split(", "),a=(o[fi+"Duration"]||"").split(", "),r=Pi(i,a),s=(o[gi+"Delay"]||"").split(", "),l=(o[gi+"Duration"]||"").split(", "),c=Pi(s,l),u=0,d=0;return"transition"===n?r>0&&(t="transition",u=r,d=a.length):"animation"===n?c>0&&(t="animation",u=c,d=l.length):d=(t=(u=Math.max(r,c))>0?r>c?"transition":"animation":null)?"transition"===t?a.length:l.length:0,{type:t,timeout:u,propCount:d,hasTransform:"transition"===t&&Ci.test(o[fi+"Property"])}}function Pi(e,n){for(;e.length<n.length;)e=e.concat(e);return Math.max.apply(null,n.map((function(n,t){return Ii(n)+Ii(e[t])})))}function Ii(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Ti(e,n){var t=e.elm;r(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var o=pi(e.data.transition);if(!a(o)&&!r(t._enterCb)&&1===t.nodeType){for(var i=o.css,s=o.type,l=o.enterClass,d=o.enterToClass,p=o.enterActiveClass,h=o.appearClass,m=o.appearToClass,f=o.appearActiveClass,y=o.beforeEnter,b=o.enter,w=o.afterEnter,v=o.enterCancelled,k=o.beforeAppear,x=o.appear,S=o.afterAppear,C=o.appearCancelled,A=o.duration,P=Kn,I=Kn.$vnode;I&&I.parent;)P=I.context,I=I.parent;var T=!P._isMounted||!e.isRootInsert;if(!T||x||""===x){var O=T&&h?h:l,M=T&&f?f:p,D=T&&m?m:d,B=T&&k||y,_=T&&c(x)?x:b,E=T&&S||w,U=T&&C||v,F=g(u(A)?A.enter:A);0;var L=!1!==i&&!Q,N=Di(_),j=t._enterCb=R((function(){L&&(xi(t,D),xi(t,M)),j.cancelled?(L&&xi(t,O),U&&U(t)):E&&E(t),t._enterCb=null}));e.data.show||$e(e,"insert",(function(){var n=t.parentNode,o=n&&n._pending&&n._pending[e.key];o&&o.tag===e.tag&&o.elm._leaveCb&&o.elm._leaveCb(),_&&_(t,j)})),B&&B(t),L&&(ki(t,O),ki(t,M),vi((function(){xi(t,O),j.cancelled||(ki(t,D),N||(Mi(F)?setTimeout(j,F):Si(t,s,j)))}))),e.data.show&&(n&&n(),_&&_(t,j)),L||N||j()}}}function Oi(e,n){var t=e.elm;r(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var o=pi(e.data.transition);if(a(o)||1!==t.nodeType)return n();if(!r(t._leaveCb)){var i=o.css,s=o.type,l=o.leaveClass,c=o.leaveToClass,d=o.leaveActiveClass,p=o.beforeLeave,h=o.leave,m=o.afterLeave,f=o.leaveCancelled,y=o.delayLeave,b=o.duration,w=!1!==i&&!Q,v=Di(h),k=g(u(b)?b.leave:b);0;var x=t._leaveCb=R((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[e.key]=null),w&&(xi(t,c),xi(t,d)),x.cancelled?(w&&xi(t,l),f&&f(t)):(n(),m&&m(t)),t._leaveCb=null}));y?y(S):S()}function S(){x.cancelled||(!e.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[e.key]=e),p&&p(t),w&&(ki(t,l),ki(t,d),vi((function(){xi(t,l),x.cancelled||(ki(t,c),v||(Mi(k)?setTimeout(x,k):Si(t,s,x)))}))),h&&h(t,x),w||v||x())}}function Mi(e){return"number"==typeof e&&!isNaN(e)}function Di(e){if(a(e))return!1;var n=e.fns;return r(n)?Di(Array.isArray(n)?n[0]:n):(e._length||e.length)>1}function Bi(e,n){!0!==n.data.show&&Ti(n)}var _i=function(e){var n,t,o={},c=e.modules,u=e.nodeOps;for(n=0;n<Ao.length;++n)for(o[Ao[n]]=[],t=0;t<c.length;++t)r(c[t][Ao[n]])&&o[Ao[n]].push(c[t][Ao[n]]);function d(e){var n=u.parentNode(e);r(n)&&u.removeChild(n,e)}function p(e,n,t,i,a,l,c){if(r(e.elm)&&r(l)&&(e=l[c]=fe(e)),e.isRootInsert=!a,!function(e,n,t,i){var a=e.data;if(r(a)){var l=r(e.componentInstance)&&a.keepAlive;if(r(a=a.hook)&&r(a=a.init)&&a(e,!1),r(e.componentInstance))return h(e,n),m(t,e.elm,i),s(l)&&function(e,n,t,i){var a,s=e;for(;s.componentInstance;)if(s=s.componentInstance._vnode,r(a=s.data)&&r(a=a.transition)){for(a=0;a<o.activate.length;++a)o.activate[a](Co,s);n.push(s);break}m(t,e.elm,i)}(e,n,t,i),!0}}(e,n,t,i)){var d=e.data,p=e.children,y=e.tag;r(y)?(e.elm=e.ns?u.createElementNS(e.ns,y):u.createElement(y,e),w(e),f(e,p,n),r(d)&&g(e,n),m(t,e.elm,i)):s(e.isComment)?(e.elm=u.createComment(e.text),m(t,e.elm,i)):(e.elm=u.createTextNode(e.text),m(t,e.elm,i))}}function h(e,n){r(e.data.pendingInsert)&&(n.push.apply(n,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,y(e)?(g(e,n),w(e)):(xo(e),n.push(e))}function m(e,n,t){r(e)&&(r(t)?u.parentNode(t)===e&&u.insertBefore(e,n,t):u.appendChild(e,n))}function f(e,n,t){if(i(n)){0;for(var o=0;o<n.length;++o)p(n[o],t,e.elm,null,!0,n,o)}else l(e.text)&&u.appendChild(e.elm,u.createTextNode(String(e.text)))}function y(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return r(e.tag)}function g(e,t){for(var i=0;i<o.create.length;++i)o.create[i](Co,e);r(n=e.data.hook)&&(r(n.create)&&n.create(Co,e),r(n.insert)&&t.push(e))}function w(e){var n;if(r(n=e.fnScopeId))u.setStyleScope(e.elm,n);else for(var t=e;t;)r(n=t.context)&&r(n=n.$options._scopeId)&&u.setStyleScope(e.elm,n),t=t.parent;r(n=Kn)&&n!==e.context&&n!==e.fnContext&&r(n=n.$options._scopeId)&&u.setStyleScope(e.elm,n)}function v(e,n,t,o,i,a){for(;o<=i;++o)p(t[o],a,e,n,!1,t,o)}function k(e){var n,t,i=e.data;if(r(i))for(r(n=i.hook)&&r(n=n.destroy)&&n(e),n=0;n<o.destroy.length;++n)o.destroy[n](e);if(r(n=e.children))for(t=0;t<e.children.length;++t)k(e.children[t])}function x(e,n,t){for(;n<=t;++n){var o=e[n];r(o)&&(r(o.tag)?(S(o),k(o)):d(o.elm))}}function S(e,n){if(r(n)||r(e.data)){var t,i=o.remove.length+1;for(r(n)?n.listeners+=i:n=function(e,n){function t(){0==--t.listeners&&d(e)}return t.listeners=n,t}(e.elm,i),r(t=e.componentInstance)&&r(t=t._vnode)&&r(t.data)&&S(t,n),t=0;t<o.remove.length;++t)o.remove[t](e,n);r(t=e.data.hook)&&r(t=t.remove)?t(e,n):n()}else d(e.elm)}function C(e,n,t,o){for(var i=t;i<o;i++){var a=n[i];if(r(a)&&Po(e,a))return i}}function A(e,n,t,i,l,c){if(e!==n){r(n.elm)&&r(i)&&(n=i[l]=fe(n));var d=n.elm=e.elm;if(s(e.isAsyncPlaceholder))r(n.asyncFactory.resolved)?T(e.elm,n,t):n.isAsyncPlaceholder=!0;else if(s(n.isStatic)&&s(e.isStatic)&&n.key===e.key&&(s(n.isCloned)||s(n.isOnce)))n.componentInstance=e.componentInstance;else{var h,m=n.data;r(m)&&r(h=m.hook)&&r(h=h.prepatch)&&h(e,n);var f=e.children,g=n.children;if(r(m)&&y(n)){for(h=0;h<o.update.length;++h)o.update[h](e,n);r(h=m.hook)&&r(h=h.update)&&h(e,n)}a(n.text)?r(f)&&r(g)?f!==g&&function(e,n,t,o,i){var s,l,c,d=0,h=0,m=n.length-1,f=n[0],y=n[m],g=t.length-1,b=t[0],w=t[g],k=!i;for(0;d<=m&&h<=g;)a(f)?f=n[++d]:a(y)?y=n[--m]:Po(f,b)?(A(f,b,o,t,h),f=n[++d],b=t[++h]):Po(y,w)?(A(y,w,o,t,g),y=n[--m],w=t[--g]):Po(f,w)?(A(f,w,o,t,g),k&&u.insertBefore(e,f.elm,u.nextSibling(y.elm)),f=n[++d],w=t[--g]):Po(y,b)?(A(y,b,o,t,h),k&&u.insertBefore(e,y.elm,f.elm),y=n[--m],b=t[++h]):(a(s)&&(s=Io(n,d,m)),a(l=r(b.key)?s[b.key]:C(b,n,d,m))?p(b,o,e,f.elm,!1,t,h):Po(c=n[l],b)?(A(c,b,o,t,h),n[l]=void 0,k&&u.insertBefore(e,c.elm,f.elm)):p(b,o,e,f.elm,!1,t,h),b=t[++h]);d>m?v(e,a(t[g+1])?null:t[g+1].elm,t,h,g,o):h>g&&x(n,d,m)}(d,f,g,t,c):r(g)?(r(e.text)&&u.setTextContent(d,""),v(d,null,g,0,g.length-1,t)):r(f)?x(f,0,f.length-1):r(e.text)&&u.setTextContent(d,""):e.text!==n.text&&u.setTextContent(d,n.text),r(m)&&r(h=m.hook)&&r(h=h.postpatch)&&h(e,n)}}}function P(e,n,t){if(s(t)&&r(e.parent))e.parent.data.pendingInsert=n;else for(var o=0;o<n.length;++o)n[o].data.hook.insert(n[o])}var I=b("attrs,class,staticClass,staticStyle,key");function T(e,n,t,o){var i,a=n.tag,l=n.data,c=n.children;if(o=o||l&&l.pre,n.elm=e,s(n.isComment)&&r(n.asyncFactory))return n.isAsyncPlaceholder=!0,!0;if(r(l)&&(r(i=l.hook)&&r(i=i.init)&&i(n,!0),r(i=n.componentInstance)))return h(n,t),!0;if(r(a)){if(r(c))if(e.hasChildNodes())if(r(i=l)&&r(i=i.domProps)&&r(i=i.innerHTML)){if(i!==e.innerHTML)return!1}else{for(var u=!0,d=e.firstChild,p=0;p<c.length;p++){if(!d||!T(d,c[p],t,o)){u=!1;break}d=d.nextSibling}if(!u||d)return!1}else f(n,c,t);if(r(l)){var m=!1;for(var y in l)if(!I(y)){m=!0,g(n,t);break}!m&&l.class&&Gn(l.class)}}else e.data!==n.text&&(e.data=n.text);return!0}return function(e,n,t,i){if(!a(n)){var l,c=!1,d=[];if(a(e))c=!0,p(n,d);else{var h=r(e.nodeType);if(!h&&Po(e,n))A(e,n,d,null,null,i);else{if(h){if(1===e.nodeType&&e.hasAttribute("data-server-rendered")&&(e.removeAttribute("data-server-rendered"),t=!0),s(t)&&T(e,n,d))return P(n,d,!0),e;l=e,e=new pe(u.tagName(l).toLowerCase(),{},[],void 0,l)}var m=e.elm,f=u.parentNode(m);if(p(n,d,m._leaveCb?null:f,u.nextSibling(m)),r(n.parent))for(var g=n.parent,b=y(n);g;){for(var w=0;w<o.destroy.length;++w)o.destroy[w](g);if(g.elm=n.elm,b){for(var v=0;v<o.create.length;++v)o.create[v](Co,g);var S=g.data.hook.insert;if(S.merged)for(var C=1;C<S.fns.length;C++)S.fns[C]()}else xo(g);g=g.parent}r(f)?x([e],0,0):r(e.tag)&&k(e)}}return P(n,d,c),n.elm}r(e)&&k(e)}}({nodeOps:vo,modules:[Ro,zo,Xo,Qo,li,X?{create:Bi,activate:Bi,remove:function(e,n){!0!==e.data.show?Oi(e,n):n()}}:{}].concat(Eo)});Q&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&zi(e,"input")}));var Ei={inserted:function(e,n,t,o){"select"===t.tag?(o.elm&&!o.elm._vOptions?$e(t,"postpatch",(function(){Ei.componentUpdated(e,n,t)})):Ui(e,n,t.context),e._vOptions=[].map.call(e.options,Ri)):("textarea"===t.tag||wo(e.type))&&(e._vModifiers=n.modifiers,n.modifiers.lazy||(e.addEventListener("compositionstart",Ni),e.addEventListener("compositionend",ji),e.addEventListener("change",ji),Q&&(e.vmodel=!0)))},componentUpdated:function(e,n,t){if("select"===t.tag){Ui(e,n,t.context);var o=e._vOptions,i=e._vOptions=[].map.call(e.options,Ri);if(i.some((function(e,n){return!F(e,o[n])})))(e.multiple?n.value.some((function(e){return Li(e,i)})):n.value!==n.oldValue&&Li(n.value,i))&&zi(e,"change")}}};function Ui(e,n,t){Fi(e,n,t),(K||Z)&&setTimeout((function(){Fi(e,n,t)}),0)}function Fi(e,n,t){var o=n.value,i=e.multiple;if(!i||Array.isArray(o)){for(var a,r,s=0,l=e.options.length;s<l;s++)if(r=e.options[s],i)a=L(o,Ri(r))>-1,r.selected!==a&&(r.selected=a);else if(F(Ri(r),o))return void(e.selectedIndex!==s&&(e.selectedIndex=s));i||(e.selectedIndex=-1)}}function Li(e,n){return n.every((function(n){return!F(n,e)}))}function Ri(e){return"_value"in e?e._value:e.value}function Ni(e){e.target.composing=!0}function ji(e){e.target.composing&&(e.target.composing=!1,zi(e.target,"input"))}function zi(e,n){var t=document.createEvent("HTMLEvents");t.initEvent(n,!0,!0),e.dispatchEvent(t)}function Gi(e){return!e.componentInstance||e.data&&e.data.transition?e:Gi(e.componentInstance._vnode)}var Vi={model:Ei,show:{bind:function(e,n,t){var o=n.value,i=(t=Gi(t)).data&&t.data.transition,a=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;o&&i?(t.data.show=!0,Ti(t,(function(){e.style.display=a}))):e.style.display=o?a:"none"},update:function(e,n,t){var o=n.value;!o!=!n.oldValue&&((t=Gi(t)).data&&t.data.transition?(t.data.show=!0,o?Ti(t,(function(){e.style.display=e.__vOriginalDisplay})):Oi(t,(function(){e.style.display="none"}))):e.style.display=o?e.__vOriginalDisplay:"none")},unbind:function(e,n,t,o,i){i||(e.style.display=e.__vOriginalDisplay)}}},Hi={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Wi(e){var n=e&&e.componentOptions;return n&&n.Ctor.options.abstract?Wi(Cn(n.children)):e}function $i(e){var n={},t=e.$options;for(var o in t.propsData)n[o]=e[o];var i=t._parentListeners;for(var o in i)n[A(o)]=i[o];return n}function qi(e,n){if(/\d-keep-alive$/.test(n.tag))return e("keep-alive",{props:n.componentOptions.propsData})}var Xi=function(e){return e.tag||mn(e)},Yi=function(e){return"show"===e.name},Ki={name:"transition",props:Hi,abstract:!0,render:function(e){var n=this,t=this.$slots.default;if(t&&(t=t.filter(Xi)).length){0;var o=this.mode;0;var i=t[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return i;var a=Wi(i);if(!a)return i;if(this._leaving)return qi(e,i);var r="__transition-".concat(this._uid,"-");a.key=null==a.key?a.isComment?r+"comment":r+a.tag:l(a.key)?0===String(a.key).indexOf(r)?a.key:r+a.key:a.key;var s=(a.data||(a.data={})).transition=$i(this),c=this._vnode,u=Wi(c);if(a.data.directives&&a.data.directives.some(Yi)&&(a.data.show=!0),u&&u.data&&!function(e,n){return n.key===e.key&&n.tag===e.tag}(a,u)&&!mn(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var d=u.data.transition=D({},s);if("out-in"===o)return this._leaving=!0,$e(d,"afterLeave",(function(){n._leaving=!1,n.$forceUpdate()})),qi(e,i);if("in-out"===o){if(mn(a))return c;var p,h=function(){p()};$e(s,"afterEnter",h),$e(s,"enterCancelled",h),$e(d,"delayLeave",(function(e){p=e}))}}return i}}},Qi=D({tag:String,moveClass:String},Hi);function Zi(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function Ji(e){e.data.newPos=e.elm.getBoundingClientRect()}function ea(e){var n=e.data.pos,t=e.data.newPos,o=n.left-t.left,i=n.top-t.top;if(o||i){e.data.moved=!0;var a=e.elm.style;a.transform=a.WebkitTransform="translate(".concat(o,"px,").concat(i,"px)"),a.transitionDuration="0s"}}delete Qi.mode;var na={Transition:Ki,TransitionGroup:{props:Qi,beforeMount:function(){var e=this,n=this._update;this._update=function(t,o){var i=Qn(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,i(),n.call(e,t,o)}},render:function(e){for(var n=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),o=this.prevChildren=this.children,i=this.$slots.default||[],a=this.children=[],r=$i(this),s=0;s<i.length;s++){if((u=i[s]).tag)if(null!=u.key&&0!==String(u.key).indexOf("__vlist"))a.push(u),t[u.key]=u,(u.data||(u.data={})).transition=r;else;}if(o){var l=[],c=[];for(s=0;s<o.length;s++){var u;(u=o[s]).data.transition=r,u.data.pos=u.elm.getBoundingClientRect(),t[u.key]?l.push(u):c.push(u)}this.kept=e(n,null,l),this.removed=c}return e(n,null,a)},updated:function(){var e=this.prevChildren,n=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,n)&&(e.forEach(Zi),e.forEach(Ji),e.forEach(ea),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var t=e.elm,o=t.style;ki(t,n),o.transform=o.WebkitTransform=o.transitionDuration="",t.addEventListener(yi,t._moveCb=function e(o){o&&o.target!==t||o&&!/transform$/.test(o.propertyName)||(t.removeEventListener(yi,e),t._moveCb=null,xi(t,n))})}})))},methods:{hasMove:function(e,n){if(!mi)return!1;if(this._hasMove)return this._hasMove;var t=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){di(t,e)})),ui(t,n),t.style.display="none",this.$el.appendChild(t);var o=Ai(t);return this.$el.removeChild(t),this._hasMove=o.hasTransform}}}};function ta(e,n){for(var t in n)e[t]=n[t];return e}$t.config.mustUseProp=function(e,n,t){return"value"===t&&no(e)&&"button"!==n||"selected"===t&&"option"===e||"checked"===t&&"input"===e||"muted"===t&&"video"===e},$t.config.isReservedTag=go,$t.config.isReservedAttr=eo,$t.config.getTagNamespace=function(e){return yo(e)?"svg":"math"===e?"math":void 0},$t.config.isUnknownElement=function(e){if(!X)return!0;if(go(e))return!1;if(e=e.toLowerCase(),null!=bo[e])return bo[e];var n=document.createElement(e);return e.indexOf("-")>-1?bo[e]=n.constructor===window.HTMLUnknownElement||n.constructor===window.HTMLElement:bo[e]=/HTMLUnknownElement/.test(n.toString())},D($t.options.directives,Vi),D($t.options.components,na),$t.prototype.__patch__=X?_i:_,$t.prototype.$mount=function(e,n){return function(e,n,t){var o;e.$el=n,e.$options.render||(e.$options.render=he),et(e,"beforeMount"),o=function(){e._update(e._render(),t)},new Wn(e,o,_,{before:function(){e._isMounted&&!e._isDestroyed&&et(e,"beforeUpdate")}},!0),t=!1;var i=e._preWatchers;if(i)for(var a=0;a<i.length;a++)i[a].run();return null==e.$vnode&&(e._isMounted=!0,et(e,"mounted")),e}(this,e=e&&X?function(e){if("string"==typeof e){var n=document.querySelector(e);return n||document.createElement("div")}return e}(e):void 0,n)},X&&setTimeout((function(){G.devtools&&re&&re.emit("init",$t)}),0);var oa=/[!'()*]/g,ia=function(e){return"%"+e.charCodeAt(0).toString(16)},aa=/%2C/g,ra=function(e){return encodeURIComponent(e).replace(oa,ia).replace(aa,",")};function sa(e){try{return decodeURIComponent(e)}catch(e){0}return e}var la=function(e){return null==e||"object"==typeof e?e:String(e)};function ca(e){var n={};return(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach((function(e){var t=e.replace(/\+/g," ").split("="),o=sa(t.shift()),i=t.length>0?sa(t.join("=")):null;void 0===n[o]?n[o]=i:Array.isArray(n[o])?n[o].push(i):n[o]=[n[o],i]})),n):n}function ua(e){var n=e?Object.keys(e).map((function(n){var t=e[n];if(void 0===t)return"";if(null===t)return ra(n);if(Array.isArray(t)){var o=[];return t.forEach((function(e){void 0!==e&&(null===e?o.push(ra(n)):o.push(ra(n)+"="+ra(e)))})),o.join("&")}return ra(n)+"="+ra(t)})).filter((function(e){return e.length>0})).join("&"):null;return n?"?"+n:""}var da=/\/?$/;function pa(e,n,t,o){var i=o&&o.options.stringifyQuery,a=n.query||{};try{a=ha(a)}catch(e){}var r={name:n.name||e&&e.name,meta:e&&e.meta||{},path:n.path||"/",hash:n.hash||"",query:a,params:n.params||{},fullPath:ya(n,i),matched:e?fa(e):[]};return t&&(r.redirectedFrom=ya(t,i)),Object.freeze(r)}function ha(e){if(Array.isArray(e))return e.map(ha);if(e&&"object"==typeof e){var n={};for(var t in e)n[t]=ha(e[t]);return n}return e}var ma=pa(null,{path:"/"});function fa(e){for(var n=[];e;)n.unshift(e),e=e.parent;return n}function ya(e,n){var t=e.path,o=e.query;void 0===o&&(o={});var i=e.hash;return void 0===i&&(i=""),(t||"/")+(n||ua)(o)+i}function ga(e,n,t){return n===ma?e===n:!!n&&(e.path&&n.path?e.path.replace(da,"")===n.path.replace(da,"")&&(t||e.hash===n.hash&&ba(e.query,n.query)):!(!e.name||!n.name)&&(e.name===n.name&&(t||e.hash===n.hash&&ba(e.query,n.query)&&ba(e.params,n.params))))}function ba(e,n){if(void 0===e&&(e={}),void 0===n&&(n={}),!e||!n)return e===n;var t=Object.keys(e).sort(),o=Object.keys(n).sort();return t.length===o.length&&t.every((function(t,i){var a=e[t];if(o[i]!==t)return!1;var r=n[t];return null==a||null==r?a===r:"object"==typeof a&&"object"==typeof r?ba(a,r):String(a)===String(r)}))}function wa(e){for(var n=0;n<e.matched.length;n++){var t=e.matched[n];for(var o in t.instances){var i=t.instances[o],a=t.enteredCbs[o];if(i&&a){delete t.enteredCbs[o];for(var r=0;r<a.length;r++)i._isBeingDestroyed||a[r](i)}}}}var va={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(e,n){var t=n.props,o=n.children,i=n.parent,a=n.data;a.routerView=!0;for(var r=i.$createElement,s=t.name,l=i.$route,c=i._routerViewCache||(i._routerViewCache={}),u=0,d=!1;i&&i._routerRoot!==i;){var p=i.$vnode?i.$vnode.data:{};p.routerView&&u++,p.keepAlive&&i._directInactive&&i._inactive&&(d=!0),i=i.$parent}if(a.routerViewDepth=u,d){var h=c[s],m=h&&h.component;return m?(h.configProps&&ka(m,a,h.route,h.configProps),r(m,a,o)):r()}var f=l.matched[u],y=f&&f.components[s];if(!f||!y)return c[s]=null,r();c[s]={component:y},a.registerRouteInstance=function(e,n){var t=f.instances[s];(n&&t!==e||!n&&t===e)&&(f.instances[s]=n)},(a.hook||(a.hook={})).prepatch=function(e,n){f.instances[s]=n.componentInstance},a.hook.init=function(e){e.data.keepAlive&&e.componentInstance&&e.componentInstance!==f.instances[s]&&(f.instances[s]=e.componentInstance),wa(l)};var g=f.props&&f.props[s];return g&&(ta(c[s],{route:l,configProps:g}),ka(y,a,l,g)),r(y,a,o)}};function ka(e,n,t,o){var i=n.props=function(e,n){switch(typeof n){case"undefined":return;case"object":return n;case"function":return n(e);case"boolean":return n?e.params:void 0;default:0}}(t,o);if(i){i=n.props=ta({},i);var a=n.attrs=n.attrs||{};for(var r in i)e.props&&r in e.props||(a[r]=i[r],delete i[r])}}function xa(e,n,t){var o=e.charAt(0);if("/"===o)return e;if("?"===o||"#"===o)return n+e;var i=n.split("/");t&&i[i.length-1]||i.pop();for(var a=e.replace(/^\//,"").split("/"),r=0;r<a.length;r++){var s=a[r];".."===s?i.pop():"."!==s&&i.push(s)}return""!==i[0]&&i.unshift(""),i.join("/")}function Sa(e){return e.replace(/\/(?:\s*\/)+/g,"/")}var Ca=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)},Aa=Na,Pa=Da,Ia=function(e,n){return _a(Da(e,n),n)},Ta=_a,Oa=Ra,Ma=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function Da(e,n){for(var t,o=[],i=0,a=0,r="",s=n&&n.delimiter||"/";null!=(t=Ma.exec(e));){var l=t[0],c=t[1],u=t.index;if(r+=e.slice(a,u),a=u+l.length,c)r+=c[1];else{var d=e[a],p=t[2],h=t[3],m=t[4],f=t[5],y=t[6],g=t[7];r&&(o.push(r),r="");var b=null!=p&&null!=d&&d!==p,w="+"===y||"*"===y,v="?"===y||"*"===y,k=t[2]||s,x=m||f;o.push({name:h||i++,prefix:p||"",delimiter:k,optional:v,repeat:w,partial:b,asterisk:!!g,pattern:x?Ua(x):g?".*":"[^"+Ea(k)+"]+?"})}}return a<e.length&&(r+=e.substr(a)),r&&o.push(r),o}function Ba(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function _a(e,n){for(var t=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(t[o]=new RegExp("^(?:"+e[o].pattern+")$",La(n)));return function(n,o){for(var i="",a=n||{},r=(o||{}).pretty?Ba:encodeURIComponent,s=0;s<e.length;s++){var l=e[s];if("string"!=typeof l){var c,u=a[l.name];if(null==u){if(l.optional){l.partial&&(i+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(Ca(u)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(u)+"`");if(0===u.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var d=0;d<u.length;d++){if(c=r(u[d]),!t[s].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");i+=(0===d?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(u).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):r(u),!t[s].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');i+=l.prefix+c}}else i+=l}return i}}function Ea(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function Ua(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function Fa(e,n){return e.keys=n,e}function La(e){return e&&e.sensitive?"":"i"}function Ra(e,n,t){Ca(n)||(t=n||t,n=[]);for(var o=(t=t||{}).strict,i=!1!==t.end,a="",r=0;r<e.length;r++){var s=e[r];if("string"==typeof s)a+=Ea(s);else{var l=Ea(s.prefix),c="(?:"+s.pattern+")";n.push(s),s.repeat&&(c+="(?:"+l+c+")*"),a+=c=s.optional?s.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")"}}var u=Ea(t.delimiter||"/"),d=a.slice(-u.length)===u;return o||(a=(d?a.slice(0,-u.length):a)+"(?:"+u+"(?=$))?"),a+=i?"$":o&&d?"":"(?="+u+"|$)",Fa(new RegExp("^"+a,La(t)),n)}function Na(e,n,t){return Ca(n)||(t=n||t,n=[]),t=t||{},e instanceof RegExp?function(e,n){var t=e.source.match(/\((?!\?)/g);if(t)for(var o=0;o<t.length;o++)n.push({name:o,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return Fa(e,n)}(e,n):Ca(e)?function(e,n,t){for(var o=[],i=0;i<e.length;i++)o.push(Na(e[i],n,t).source);return Fa(new RegExp("(?:"+o.join("|")+")",La(t)),n)}(e,n,t):function(e,n,t){return Ra(Da(e,t),n,t)}(e,n,t)}Aa.parse=Pa,Aa.compile=Ia,Aa.tokensToFunction=Ta,Aa.tokensToRegExp=Oa;var ja=Object.create(null);function za(e,n,t){n=n||{};try{var o=ja[e]||(ja[e]=Aa.compile(e));return"string"==typeof n.pathMatch&&(n[0]=n.pathMatch),o(n,{pretty:!0})}catch(e){return""}finally{delete n[0]}}function Ga(e,n,t,o){var i="string"==typeof e?{path:e}:e;if(i._normalized)return i;if(i.name){var a=(i=ta({},e)).params;return a&&"object"==typeof a&&(i.params=ta({},a)),i}if(!i.path&&i.params&&n){(i=ta({},i))._normalized=!0;var r=ta(ta({},n.params),i.params);if(n.name)i.name=n.name,i.params=r;else if(n.matched.length){var s=n.matched[n.matched.length-1].path;i.path=za(s,r,n.path)}else 0;return i}var l=function(e){var n="",t="",o=e.indexOf("#");o>=0&&(n=e.slice(o),e=e.slice(0,o));var i=e.indexOf("?");return i>=0&&(t=e.slice(i+1),e=e.slice(0,i)),{path:e,query:t,hash:n}}(i.path||""),c=n&&n.path||"/",u=l.path?xa(l.path,c,t||i.append):c,d=function(e,n,t){void 0===n&&(n={});var o,i=t||ca;try{o=i(e||"")}catch(e){o={}}for(var a in n){var r=n[a];o[a]=Array.isArray(r)?r.map(la):la(r)}return o}(l.query,i.query,o&&o.options.parseQuery),p=i.hash||l.hash;return p&&"#"!==p.charAt(0)&&(p="#"+p),{_normalized:!0,path:u,query:d,hash:p}}var Va,Ha=function(){},Wa={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(e){var n=this,t=this.$router,o=this.$route,i=t.resolve(this.to,o,this.append),a=i.location,r=i.route,s=i.href,l={},c=t.options.linkActiveClass,u=t.options.linkExactActiveClass,d=null==c?"router-link-active":c,p=null==u?"router-link-exact-active":u,h=null==this.activeClass?d:this.activeClass,m=null==this.exactActiveClass?p:this.exactActiveClass,f=r.redirectedFrom?pa(null,Ga(r.redirectedFrom),null,t):r;l[m]=ga(o,f,this.exactPath),l[h]=this.exact||this.exactPath?l[m]:function(e,n){return 0===e.path.replace(da,"/").indexOf(n.path.replace(da,"/"))&&(!n.hash||e.hash===n.hash)&&function(e,n){for(var t in n)if(!(t in e))return!1;return!0}(e.query,n.query)}(o,f);var y=l[m]?this.ariaCurrentValue:null,g=function(e){$a(e)&&(n.replace?t.replace(a,Ha):t.push(a,Ha))},b={click:$a};Array.isArray(this.event)?this.event.forEach((function(e){b[e]=g})):b[this.event]=g;var w={class:l},v=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:r,navigate:g,isActive:l[h],isExactActive:l[m]});if(v){if(1===v.length)return v[0];if(v.length>1||!v.length)return 0===v.length?e():e("span",{},v)}if("a"===this.tag)w.on=b,w.attrs={href:s,"aria-current":y};else{var k=function e(n){var t;if(n)for(var o=0;o<n.length;o++){if("a"===(t=n[o]).tag)return t;if(t.children&&(t=e(t.children)))return t}}(this.$slots.default);if(k){k.isStatic=!1;var x=k.data=ta({},k.data);for(var S in x.on=x.on||{},x.on){var C=x.on[S];S in b&&(x.on[S]=Array.isArray(C)?C:[C])}for(var A in b)A in x.on?x.on[A].push(b[A]):x.on[A]=g;var P=k.data.attrs=ta({},k.data.attrs);P.href=s,P["aria-current"]=y}else w.on=b}return e(this.tag,w,this.$slots.default)}};function $a(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){var n=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(n))return}return e.preventDefault&&e.preventDefault(),!0}}var qa="undefined"!=typeof window;function Xa(e,n,t,o,i){var a=n||[],r=t||Object.create(null),s=o||Object.create(null);e.forEach((function(e){!function e(n,t,o,i,a,r){var s=i.path,l=i.name;0;var c=i.pathToRegexpOptions||{},u=function(e,n,t){t||(e=e.replace(/\/$/,""));if("/"===e[0])return e;if(null==n)return e;return Sa(n.path+"/"+e)}(s,a,c.strict);"boolean"==typeof i.caseSensitive&&(c.sensitive=i.caseSensitive);var d={path:u,regex:Ya(u,c),components:i.components||{default:i.component},alias:i.alias?"string"==typeof i.alias?[i.alias]:i.alias:[],instances:{},enteredCbs:{},name:l,parent:a,matchAs:r,redirect:i.redirect,beforeEnter:i.beforeEnter,meta:i.meta||{},props:null==i.props?{}:i.components?i.props:{default:i.props}};i.children&&i.children.forEach((function(i){var a=r?Sa(r+"/"+i.path):void 0;e(n,t,o,i,d,a)}));t[d.path]||(n.push(d.path),t[d.path]=d);if(void 0!==i.alias)for(var p=Array.isArray(i.alias)?i.alias:[i.alias],h=0;h<p.length;++h){0;var m={path:p[h],children:i.children};e(n,t,o,m,a,d.path||"/")}l&&(o[l]||(o[l]=d))}(a,r,s,e,i)}));for(var l=0,c=a.length;l<c;l++)"*"===a[l]&&(a.push(a.splice(l,1)[0]),c--,l--);return{pathList:a,pathMap:r,nameMap:s}}function Ya(e,n){return Aa(e,[],n)}function Ka(e,n){var t=Xa(e),o=t.pathList,i=t.pathMap,a=t.nameMap;function r(e,t,r){var s=Ga(e,t,!1,n),c=s.name;if(c){var u=a[c];if(!u)return l(null,s);var d=u.regex.keys.filter((function(e){return!e.optional})).map((function(e){return e.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var p in t.params)!(p in s.params)&&d.indexOf(p)>-1&&(s.params[p]=t.params[p]);return s.path=za(u.path,s.params),l(u,s,r)}if(s.path){s.params={};for(var h=0;h<o.length;h++){var m=o[h],f=i[m];if(Qa(f.regex,s.path,s.params))return l(f,s,r)}}return l(null,s)}function s(e,t){var o=e.redirect,i="function"==typeof o?o(pa(e,t,null,n)):o;if("string"==typeof i&&(i={path:i}),!i||"object"!=typeof i)return l(null,t);var s=i,c=s.name,u=s.path,d=t.query,p=t.hash,h=t.params;if(d=s.hasOwnProperty("query")?s.query:d,p=s.hasOwnProperty("hash")?s.hash:p,h=s.hasOwnProperty("params")?s.params:h,c){a[c];return r({_normalized:!0,name:c,query:d,hash:p,params:h},void 0,t)}if(u){var m=function(e,n){return xa(e,n.parent?n.parent.path:"/",!0)}(u,e);return r({_normalized:!0,path:za(m,h),query:d,hash:p},void 0,t)}return l(null,t)}function l(e,t,o){return e&&e.redirect?s(e,o||t):e&&e.matchAs?function(e,n,t){var o=r({_normalized:!0,path:za(t,n.params)});if(o){var i=o.matched,a=i[i.length-1];return n.params=o.params,l(a,n)}return l(null,n)}(0,t,e.matchAs):pa(e,t,o,n)}return{match:r,addRoute:function(e,n){var t="object"!=typeof e?a[e]:void 0;Xa([n||e],o,i,a,t),t&&t.alias.length&&Xa(t.alias.map((function(e){return{path:e,children:[n]}})),o,i,a,t)},getRoutes:function(){return o.map((function(e){return i[e]}))},addRoutes:function(e){Xa(e,o,i,a)}}}function Qa(e,n,t){var o=n.match(e);if(!o)return!1;if(!t)return!0;for(var i=1,a=o.length;i<a;++i){var r=e.keys[i-1];r&&(t[r.name||"pathMatch"]="string"==typeof o[i]?sa(o[i]):o[i])}return!0}var Za=qa&&window.performance&&window.performance.now?window.performance:Date;function Ja(){return Za.now().toFixed(3)}var er=Ja();function nr(){return er}function tr(e){return er=e}var or=Object.create(null);function ir(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var e=window.location.protocol+"//"+window.location.host,n=window.location.href.replace(e,""),t=ta({},window.history.state);return t.key=nr(),window.history.replaceState(t,"",n),window.addEventListener("popstate",sr),function(){window.removeEventListener("popstate",sr)}}function ar(e,n,t,o){if(e.app){var i=e.options.scrollBehavior;i&&e.app.$nextTick((function(){var a=function(){var e=nr();if(e)return or[e]}(),r=i.call(e,n,t,o?a:null);r&&("function"==typeof r.then?r.then((function(e){pr(e,a)})).catch((function(e){0})):pr(r,a))}))}}function rr(){var e=nr();e&&(or[e]={x:window.pageXOffset,y:window.pageYOffset})}function sr(e){rr(),e.state&&e.state.key&&tr(e.state.key)}function lr(e){return ur(e.x)||ur(e.y)}function cr(e){return{x:ur(e.x)?e.x:window.pageXOffset,y:ur(e.y)?e.y:window.pageYOffset}}function ur(e){return"number"==typeof e}var dr=/^#\d/;function pr(e,n){var t,o="object"==typeof e;if(o&&"string"==typeof e.selector){var i=dr.test(e.selector)?document.getElementById(e.selector.slice(1)):document.querySelector(e.selector);if(i){var a=e.offset&&"object"==typeof e.offset?e.offset:{};n=function(e,n){var t=document.documentElement.getBoundingClientRect(),o=e.getBoundingClientRect();return{x:o.left-t.left-n.x,y:o.top-t.top-n.y}}(i,a={x:ur((t=a).x)?t.x:0,y:ur(t.y)?t.y:0})}else lr(e)&&(n=cr(e))}else o&&lr(e)&&(n=cr(e));n&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:n.x,top:n.y,behavior:e.behavior}):window.scrollTo(n.x,n.y))}var hr,mr=qa&&((-1===(hr=window.navigator.userAgent).indexOf("Android 2.")&&-1===hr.indexOf("Android 4.0")||-1===hr.indexOf("Mobile Safari")||-1!==hr.indexOf("Chrome")||-1!==hr.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function fr(e,n){rr();var t=window.history;try{if(n){var o=ta({},t.state);o.key=nr(),t.replaceState(o,"",e)}else t.pushState({key:tr(Ja())},"",e)}catch(t){window.location[n?"replace":"assign"](e)}}function yr(e){fr(e,!0)}var gr={redirected:2,aborted:4,cancelled:8,duplicated:16};function br(e,n){return vr(e,n,gr.redirected,'Redirected when going from "'+e.fullPath+'" to "'+function(e){if("string"==typeof e)return e;if("path"in e)return e.path;var n={};return kr.forEach((function(t){t in e&&(n[t]=e[t])})),JSON.stringify(n,null,2)}(n)+'" via a navigation guard.')}function wr(e,n){return vr(e,n,gr.cancelled,'Navigation cancelled from "'+e.fullPath+'" to "'+n.fullPath+'" with a new navigation.')}function vr(e,n,t,o){var i=new Error(o);return i._isRouter=!0,i.from=e,i.to=n,i.type=t,i}var kr=["params","query","hash"];function xr(e){return Object.prototype.toString.call(e).indexOf("Error")>-1}function Sr(e,n){return xr(e)&&e._isRouter&&(null==n||e.type===n)}function Cr(e,n,t){var o=function(i){i>=e.length?t():e[i]?n(e[i],(function(){o(i+1)})):o(i+1)};o(0)}function Ar(e){return function(n,t,o){var i=!1,a=0,r=null;Pr(e,(function(e,n,t,s){if("function"==typeof e&&void 0===e.cid){i=!0,a++;var l,c=Or((function(n){var i;((i=n).__esModule||Tr&&"Module"===i[Symbol.toStringTag])&&(n=n.default),e.resolved="function"==typeof n?n:Va.extend(n),t.components[s]=n,--a<=0&&o()})),u=Or((function(e){var n="Failed to resolve async component "+s+": "+e;r||(r=xr(e)?e:new Error(n),o(r))}));try{l=e(c,u)}catch(e){u(e)}if(l)if("function"==typeof l.then)l.then(c,u);else{var d=l.component;d&&"function"==typeof d.then&&d.then(c,u)}}})),i||o()}}function Pr(e,n){return Ir(e.map((function(e){return Object.keys(e.components).map((function(t){return n(e.components[t],e.instances[t],e,t)}))})))}function Ir(e){return Array.prototype.concat.apply([],e)}var Tr="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function Or(e){var n=!1;return function(){for(var t=[],o=arguments.length;o--;)t[o]=arguments[o];if(!n)return n=!0,e.apply(this,t)}}var Mr=function(e,n){this.router=e,this.base=function(e){if(!e)if(qa){var n=document.querySelector("base");e=(e=n&&n.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else e="/";"/"!==e.charAt(0)&&(e="/"+e);return e.replace(/\/$/,"")}(n),this.current=ma,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Dr(e,n,t,o){var i=Pr(e,(function(e,o,i,a){var r=function(e,n){"function"!=typeof e&&(e=Va.extend(e));return e.options[n]}(e,n);if(r)return Array.isArray(r)?r.map((function(e){return t(e,o,i,a)})):t(r,o,i,a)}));return Ir(o?i.reverse():i)}function Br(e,n){if(n)return function(){return e.apply(n,arguments)}}Mr.prototype.listen=function(e){this.cb=e},Mr.prototype.onReady=function(e,n){this.ready?e():(this.readyCbs.push(e),n&&this.readyErrorCbs.push(n))},Mr.prototype.onError=function(e){this.errorCbs.push(e)},Mr.prototype.transitionTo=function(e,n,t){var o,i=this;try{o=this.router.match(e,this.current)}catch(e){throw this.errorCbs.forEach((function(n){n(e)})),e}var a=this.current;this.confirmTransition(o,(function(){i.updateRoute(o),n&&n(o),i.ensureURL(),i.router.afterHooks.forEach((function(e){e&&e(o,a)})),i.ready||(i.ready=!0,i.readyCbs.forEach((function(e){e(o)})))}),(function(e){t&&t(e),e&&!i.ready&&(Sr(e,gr.redirected)&&a===ma||(i.ready=!0,i.readyErrorCbs.forEach((function(n){n(e)}))))}))},Mr.prototype.confirmTransition=function(e,n,t){var o=this,i=this.current;this.pending=e;var a,r,s=function(e){!Sr(e)&&xr(e)&&(o.errorCbs.length?o.errorCbs.forEach((function(n){n(e)})):console.error(e)),t&&t(e)},l=e.matched.length-1,c=i.matched.length-1;if(ga(e,i)&&l===c&&e.matched[l]===i.matched[c])return this.ensureURL(),e.hash&&ar(this.router,i,e,!1),s(((r=vr(a=i,e,gr.duplicated,'Avoided redundant navigation to current location: "'+a.fullPath+'".')).name="NavigationDuplicated",r));var u=function(e,n){var t,o=Math.max(e.length,n.length);for(t=0;t<o&&e[t]===n[t];t++);return{updated:n.slice(0,t),activated:n.slice(t),deactivated:e.slice(t)}}(this.current.matched,e.matched),d=u.updated,p=u.deactivated,h=u.activated,m=[].concat(function(e){return Dr(e,"beforeRouteLeave",Br,!0)}(p),this.router.beforeHooks,function(e){return Dr(e,"beforeRouteUpdate",Br)}(d),h.map((function(e){return e.beforeEnter})),Ar(h)),f=function(n,t){if(o.pending!==e)return s(wr(i,e));try{n(e,i,(function(n){!1===n?(o.ensureURL(!0),s(function(e,n){return vr(e,n,gr.aborted,'Navigation aborted from "'+e.fullPath+'" to "'+n.fullPath+'" via a navigation guard.')}(i,e))):xr(n)?(o.ensureURL(!0),s(n)):"string"==typeof n||"object"==typeof n&&("string"==typeof n.path||"string"==typeof n.name)?(s(br(i,e)),"object"==typeof n&&n.replace?o.replace(n):o.push(n)):t(n)}))}catch(e){s(e)}};Cr(m,f,(function(){Cr(function(e){return Dr(e,"beforeRouteEnter",(function(e,n,t,o){return function(e,n,t){return function(o,i,a){return e(o,i,(function(e){"function"==typeof e&&(n.enteredCbs[t]||(n.enteredCbs[t]=[]),n.enteredCbs[t].push(e)),a(e)}))}}(e,t,o)}))}(h).concat(o.router.resolveHooks),f,(function(){if(o.pending!==e)return s(wr(i,e));o.pending=null,n(e),o.router.app&&o.router.app.$nextTick((function(){wa(e)}))}))}))},Mr.prototype.updateRoute=function(e){this.current=e,this.cb&&this.cb(e)},Mr.prototype.setupListeners=function(){},Mr.prototype.teardown=function(){this.listeners.forEach((function(e){e()})),this.listeners=[],this.current=ma,this.pending=null};var _r=function(e){function n(n,t){e.call(this,n,t),this._startLocation=Er(this.base)}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var n=this.router,t=n.options.scrollBehavior,o=mr&&t;o&&this.listeners.push(ir());var i=function(){var t=e.current,i=Er(e.base);e.current===ma&&i===e._startLocation||e.transitionTo(i,(function(e){o&&ar(n,e,t,!0)}))};window.addEventListener("popstate",i),this.listeners.push((function(){window.removeEventListener("popstate",i)}))}},n.prototype.go=function(e){window.history.go(e)},n.prototype.push=function(e,n,t){var o=this,i=this.current;this.transitionTo(e,(function(e){fr(Sa(o.base+e.fullPath)),ar(o.router,e,i,!1),n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var o=this,i=this.current;this.transitionTo(e,(function(e){yr(Sa(o.base+e.fullPath)),ar(o.router,e,i,!1),n&&n(e)}),t)},n.prototype.ensureURL=function(e){if(Er(this.base)!==this.current.fullPath){var n=Sa(this.base+this.current.fullPath);e?fr(n):yr(n)}},n.prototype.getCurrentLocation=function(){return Er(this.base)},n}(Mr);function Er(e){var n=window.location.pathname,t=n.toLowerCase(),o=e.toLowerCase();return!e||t!==o&&0!==t.indexOf(Sa(o+"/"))||(n=n.slice(e.length)),(n||"/")+window.location.search+window.location.hash}var Ur=function(e){function n(n,t,o){e.call(this,n,t),o&&function(e){var n=Er(e);if(!/^\/#/.test(n))return window.location.replace(Sa(e+"/#"+n)),!0}(this.base)||Fr()}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var n=this.router.options.scrollBehavior,t=mr&&n;t&&this.listeners.push(ir());var o=function(){var n=e.current;Fr()&&e.transitionTo(Lr(),(function(o){t&&ar(e.router,o,n,!0),mr||jr(o.fullPath)}))},i=mr?"popstate":"hashchange";window.addEventListener(i,o),this.listeners.push((function(){window.removeEventListener(i,o)}))}},n.prototype.push=function(e,n,t){var o=this,i=this.current;this.transitionTo(e,(function(e){Nr(e.fullPath),ar(o.router,e,i,!1),n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var o=this,i=this.current;this.transitionTo(e,(function(e){jr(e.fullPath),ar(o.router,e,i,!1),n&&n(e)}),t)},n.prototype.go=function(e){window.history.go(e)},n.prototype.ensureURL=function(e){var n=this.current.fullPath;Lr()!==n&&(e?Nr(n):jr(n))},n.prototype.getCurrentLocation=function(){return Lr()},n}(Mr);function Fr(){var e=Lr();return"/"===e.charAt(0)||(jr("/"+e),!1)}function Lr(){var e=window.location.href,n=e.indexOf("#");return n<0?"":e=e.slice(n+1)}function Rr(e){var n=window.location.href,t=n.indexOf("#");return(t>=0?n.slice(0,t):n)+"#"+e}function Nr(e){mr?fr(Rr(e)):window.location.hash=e}function jr(e){mr?yr(Rr(e)):window.location.replace(Rr(e))}var zr=function(e){function n(n,t){e.call(this,n,t),this.stack=[],this.index=-1}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.push=function(e,n,t){var o=this;this.transitionTo(e,(function(e){o.stack=o.stack.slice(0,o.index+1).concat(e),o.index++,n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var o=this;this.transitionTo(e,(function(e){o.stack=o.stack.slice(0,o.index).concat(e),n&&n(e)}),t)},n.prototype.go=function(e){var n=this,t=this.index+e;if(!(t<0||t>=this.stack.length)){var o=this.stack[t];this.confirmTransition(o,(function(){var e=n.current;n.index=t,n.updateRoute(o),n.router.afterHooks.forEach((function(n){n&&n(o,e)}))}),(function(e){Sr(e,gr.duplicated)&&(n.index=t)}))}},n.prototype.getCurrentLocation=function(){var e=this.stack[this.stack.length-1];return e?e.fullPath:"/"},n.prototype.ensureURL=function(){},n}(Mr),Gr=function(e){void 0===e&&(e={}),this.app=null,this.apps=[],this.options=e,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Ka(e.routes||[],this);var n=e.mode||"hash";switch(this.fallback="history"===n&&!mr&&!1!==e.fallback,this.fallback&&(n="hash"),qa||(n="abstract"),this.mode=n,n){case"history":this.history=new _r(this,e.base);break;case"hash":this.history=new Ur(this,e.base,this.fallback);break;case"abstract":this.history=new zr(this,e.base);break;default:0}},Vr={currentRoute:{configurable:!0}};Gr.prototype.match=function(e,n,t){return this.matcher.match(e,n,t)},Vr.currentRoute.get=function(){return this.history&&this.history.current},Gr.prototype.init=function(e){var n=this;if(this.apps.push(e),e.$once("hook:destroyed",(function(){var t=n.apps.indexOf(e);t>-1&&n.apps.splice(t,1),n.app===e&&(n.app=n.apps[0]||null),n.app||n.history.teardown()})),!this.app){this.app=e;var t=this.history;if(t instanceof _r||t instanceof Ur){var o=function(e){t.setupListeners(),function(e){var o=t.current,i=n.options.scrollBehavior;mr&&i&&"fullPath"in e&&ar(n,e,o,!1)}(e)};t.transitionTo(t.getCurrentLocation(),o,o)}t.listen((function(e){n.apps.forEach((function(n){n._route=e}))}))}},Gr.prototype.beforeEach=function(e){return Wr(this.beforeHooks,e)},Gr.prototype.beforeResolve=function(e){return Wr(this.resolveHooks,e)},Gr.prototype.afterEach=function(e){return Wr(this.afterHooks,e)},Gr.prototype.onReady=function(e,n){this.history.onReady(e,n)},Gr.prototype.onError=function(e){this.history.onError(e)},Gr.prototype.push=function(e,n,t){var o=this;if(!n&&!t&&"undefined"!=typeof Promise)return new Promise((function(n,t){o.history.push(e,n,t)}));this.history.push(e,n,t)},Gr.prototype.replace=function(e,n,t){var o=this;if(!n&&!t&&"undefined"!=typeof Promise)return new Promise((function(n,t){o.history.replace(e,n,t)}));this.history.replace(e,n,t)},Gr.prototype.go=function(e){this.history.go(e)},Gr.prototype.back=function(){this.go(-1)},Gr.prototype.forward=function(){this.go(1)},Gr.prototype.getMatchedComponents=function(e){var n=e?e.matched?e:this.resolve(e).route:this.currentRoute;return n?[].concat.apply([],n.matched.map((function(e){return Object.keys(e.components).map((function(n){return e.components[n]}))}))):[]},Gr.prototype.resolve=function(e,n,t){var o=Ga(e,n=n||this.history.current,t,this),i=this.match(o,n),a=i.redirectedFrom||i.fullPath;return{location:o,route:i,href:function(e,n,t){var o="hash"===t?"#"+n:n;return e?Sa(e+"/"+o):o}(this.history.base,a,this.mode),normalizedTo:o,resolved:i}},Gr.prototype.getRoutes=function(){return this.matcher.getRoutes()},Gr.prototype.addRoute=function(e,n){this.matcher.addRoute(e,n),this.history.current!==ma&&this.history.transitionTo(this.history.getCurrentLocation())},Gr.prototype.addRoutes=function(e){this.matcher.addRoutes(e),this.history.current!==ma&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Gr.prototype,Vr);var Hr=Gr;function Wr(e,n){return e.push(n),function(){var t=e.indexOf(n);t>-1&&e.splice(t,1)}}Gr.install=function e(n){if(!e.installed||Va!==n){e.installed=!0,Va=n;var t=function(e){return void 0!==e},o=function(e,n){var o=e.$options._parentVnode;t(o)&&t(o=o.data)&&t(o=o.registerRouteInstance)&&o(e,n)};n.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),n.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,o(this,this)},destroyed:function(){o(this)}}),Object.defineProperty(n.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(n.prototype,"$route",{get:function(){return this._routerRoot._route}}),n.component("RouterView",va),n.component("RouterLink",Wa);var i=n.config.optionMergeStrategies;i.beforeRouteEnter=i.beforeRouteLeave=i.beforeRouteUpdate=i.created}},Gr.version="3.6.5",Gr.isNavigationFailure=Sr,Gr.NavigationFailureType=gr,Gr.START_LOCATION=ma,qa&&window.Vue&&window.Vue.use(Gr);t(104);t(93),t(129);var $r={"components/AlgoliaSearchBox":()=>Promise.all([t.e(0),t.e(19)]).then(t.bind(null,461)),"components/DropdownLink":()=>Promise.all([t.e(0),t.e(20)]).then(t.bind(null,260)),"components/DropdownTransition":()=>Promise.all([t.e(0),t.e(38)]).then(t.bind(null,248)),"components/Home":()=>Promise.all([t.e(0),t.e(28)]).then(t.bind(null,292)),"components/NavLink":()=>t.e(46).then(t.bind(null,247)),"components/NavLinks":()=>Promise.all([t.e(0),t.e(14)]).then(t.bind(null,273)),"components/Navbar":()=>Promise.all([t.e(0),t.e(1)]).then(t.bind(null,458)),"components/Page":()=>Promise.all([t.e(0),t.e(15)]).then(t.bind(null,293)),"components/PageEdit":()=>Promise.all([t.e(0),t.e(29)]).then(t.bind(null,275)),"components/PageNav":()=>Promise.all([t.e(0),t.e(24)]).then(t.bind(null,276)),"components/Sidebar":()=>Promise.all([t.e(0),t.e(12)]).then(t.bind(null,294)),"components/SidebarButton":()=>Promise.all([t.e(0),t.e(39)]).then(t.bind(null,295)),"components/SidebarGroup":()=>Promise.all([t.e(0),t.e(3)]).then(t.bind(null,274)),"components/SidebarLink":()=>Promise.all([t.e(0),t.e(32)]).then(t.bind(null,262)),"components/SidebarLinks":()=>Promise.all([t.e(0),t.e(3)]).then(t.bind(null,259)),"global-components/Badge":()=>Promise.all([t.e(0),t.e(6)]).then(t.bind(null,467)),"global-components/CodeBlock":()=>Promise.all([t.e(0),t.e(4)]).then(t.bind(null,462)),"global-components/CodeGroup":()=>Promise.all([t.e(0),t.e(5)]).then(t.bind(null,463)),"layouts/404":()=>t.e(8).then(t.bind(null,464)),"layouts/Layout":()=>Promise.all([t.e(0),t.e(1),t.e(2)]).then(t.bind(null,465)),NotFound:()=>t.e(8).then(t.bind(null,464)),Layout:()=>Promise.all([t.e(0),t.e(1),t.e(2)]).then(t.bind(null,465)),"components/ThemeSwitcher":()=>t.e(52).then(t.bind(null,261)),"global-components/ThemeManager":()=>t.e(7).then(t.bind(null,466))},qr={"v-cbef71f6":()=>t.e(53).then(t.bind(null,468)),"v-63813a28":()=>t.e(25).then(t.bind(null,469)),"v-c86827c4":()=>t.e(54).then(t.bind(null,470)),"v-f700a256":()=>t.e(55).then(t.bind(null,471)),"v-42ad0ad9":()=>t.e(40).then(t.bind(null,472)),"v-a6e8bdd4":()=>t.e(47).then(t.bind(null,473)),"v-19adff54":()=>t.e(33).then(t.bind(null,474)),"v-28419f04":()=>t.e(48).then(t.bind(null,475)),"v-31cb4457":()=>t.e(56).then(t.bind(null,476)),"v-2004cd75":()=>t.e(22).then(t.bind(null,477)),"v-7abde996":()=>t.e(57).then(t.bind(null,478)),"v-cb784854":()=>t.e(34).then(t.bind(null,479)),"v-7d3e463c":()=>t.e(58).then(t.bind(null,480)),"v-457e0a26":()=>t.e(41).then(t.bind(null,481)),"v-184e7518":()=>t.e(23).then(t.bind(null,482)),"v-aed32214":()=>t.e(49).then(t.bind(null,483)),"v-0f9cc8f6":()=>t.e(21).then(t.bind(null,484)),"v-6496ca56":()=>t.e(42).then(t.bind(null,485)),"v-d257c2d4":()=>t.e(43).then(t.bind(null,486)),"v-af8079d4":()=>t.e(16).then(t.bind(null,487)),"v-0e04bd50":()=>t.e(18).then(t.bind(null,488)),"v-1a241af4":()=>t.e(35).then(t.bind(null,489)),"v-5d47e1e0":()=>t.e(17).then(t.bind(null,490)),"v-b8f6e5cc":()=>t.e(59).then(t.bind(null,491)),"v-4cf0bc9c":()=>t.e(50).then(t.bind(null,492)),"v-da38efe8":()=>t.e(60).then(t.bind(null,493)),"v-65af7c76":()=>t.e(30).then(t.bind(null,494)),"v-aaa59714":()=>t.e(61).then(t.bind(null,495)),"v-4583f094":()=>t.e(44).then(t.bind(null,496)),"v-7a8662d4":()=>t.e(31).then(t.bind(null,497)),"v-414bd070":()=>t.e(26).then(t.bind(null,498)),"v-5cef85ca":()=>t.e(51).then(t.bind(null,499)),"v-56866196":()=>t.e(13).then(t.bind(null,500)),"v-5cae2b96":()=>t.e(27).then(t.bind(null,501)),"v-7d29fd94":()=>t.e(11).then(t.bind(null,502)),"v-5aa07f55":()=>t.e(62).then(t.bind(null,503)),"v-07f5c6b6":()=>t.e(63).then(t.bind(null,504)),"v-94f37b54":()=>t.e(36).then(t.bind(null,505)),"v-22f6d288":()=>t.e(64).then(t.bind(null,506)),"v-698f32f6":()=>t.e(65).then(t.bind(null,507)),"v-c74d2d4c":()=>t.e(45).then(t.bind(null,508))};function Xr(e){const n=Object.create(null);return function(t){return n[t]||(n[t]=e(t))}}const Yr=/-(\w)/g,Kr=Xr(e=>e.replace(Yr,(e,n)=>n?n.toUpperCase():"")),Qr=/\B([A-Z])/g,Zr=Xr(e=>e.replace(Qr,"-$1").toLowerCase()),Jr=Xr(e=>e.charAt(0).toUpperCase()+e.slice(1));function es(e,n){if(!n)return;if(e(n))return e(n);return n.includes("-")?e(Jr(Kr(n))):e(Jr(n))||e(Zr(n))}const ns=Object.assign({},$r,qr),ts=e=>ns[e],os=e=>qr[e],is=e=>$r[e],as=e=>$t.component(e);function rs(e){return es(os,e)}function ss(e){return es(is,e)}function ls(e){return es(ts,e)}function cs(e){return es(as,e)}function us(...e){return Promise.all(e.filter(e=>e).map(async e=>{if(!cs(e)&&ls(e)){const n=await ls(e)();$t.component(e,n.default)}}))}function ds(e,n){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[e]=n)}var ps=t(90),hs=t.n(ps),ms=t(91),fs=t.n(ms),ys={created(){if(this.siteMeta=this.$site.headTags.filter(([e])=>"meta"===e).map(([e,n])=>n),this.$ssrContext){const n=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(e=n)?e.map(e=>{let n="<meta";return Object.keys(e).forEach(t=>{n+=` ${t}="${fs()(e[t])}"`}),n+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=bs(this.$canonicalUrl)}var e},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const e=this.getMergedMetaTags();this.currentMetaTags=ws(e,this.currentMetaTags)},getMergedMetaTags(){const e=this.$page.frontmatter.meta||[];return hs()([{name:"description",content:this.$description}],e,this.siteMeta,vs)},updateCanonicalLink(){gs(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",bs(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){ws(null,this.currentMetaTags),gs()}};function gs(){const e=document.querySelector("link[rel='canonical']");e&&e.remove()}function bs(e=""){return e?`<link href="${e}" rel="canonical" />`:""}function ws(e,n){if(n&&[...n].filter(e=>e.parentNode===document.head).forEach(e=>document.head.removeChild(e)),e)return e.map(e=>{const n=document.createElement("meta");return Object.keys(e).forEach(t=>{n.setAttribute(t,e[t])}),document.head.appendChild(n),n})}function vs(e){for(const n of["name","property","itemprop"])if(e.hasOwnProperty(n))return e[n]+n;return JSON.stringify(e)}var ks=t(22),xs=t.n(ks),Ss={mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:xs()((function(){this.setActiveHash()}),300),setActiveHash(){const e=[].slice.call(document.querySelectorAll(".sidebar-link")),n=[].slice.call(document.querySelectorAll(".header-anchor")).filter(n=>e.some(e=>e.hash===n.hash)),t=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),o=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),i=window.innerHeight+t;for(let e=0;e<n.length;e++){const a=n[e],r=n[e+1],s=0===e&&0===t||t>=a.parentElement.offsetTop+10&&(!r||t<r.parentElement.offsetTop-10),l=decodeURIComponent(this.$route.hash);if(s&&l!==decodeURIComponent(a.hash)){const t=a;if(i===o)for(let t=e+1;t<n.length;t++)if(l===decodeURIComponent(n[t].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(t.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}},Cs=t(23),As=t.n(Cs),Ps={mounted(){As.a.configure({showSpinner:!1}),this.$router.beforeEach((e,n,t)=>{e.path===n.path||$t.component(e.name)||As.a.start(),t()}),this.$router.afterEach(()=>{As.a.done(),this.isSidebarOpen=!1})}},Is=t(92),Ts=t.n(Is),Os={mounted(){Ts.a.polyfill()}},Ms=(t(237),Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}),Ds=function(e){return"IMG"===e.tagName},Bs=function(e){return e&&1===e.nodeType},_s=function(e){return".svg"===(e.currentSrc||e.src).substr(-4).toLowerCase()},Es=function(e){try{return Array.isArray(e)?e.filter(Ds):function(e){return NodeList.prototype.isPrototypeOf(e)}(e)?[].slice.call(e).filter(Ds):Bs(e)?[e].filter(Ds):"string"==typeof e?[].slice.call(document.querySelectorAll(e)).filter(Ds):[]}catch(e){throw new TypeError("The provided selector is invalid.\nExpects a CSS selector, a Node element, a NodeList or an array.\nSee: https://github.com/francoischalifour/medium-zoom")}},Us=function(e){var n=document.createElement("div");return n.classList.add("medium-zoom-overlay"),n.style.background=e,n},Fs=function(e){var n=e.getBoundingClientRect(),t=n.top,o=n.left,i=n.width,a=n.height,r=e.cloneNode(),s=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,l=window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0;return r.removeAttribute("id"),r.style.position="absolute",r.style.top=t+s+"px",r.style.left=o+l+"px",r.style.width=i+"px",r.style.height=a+"px",r.style.transform="",r},Ls=function(e,n){var t=Ms({bubbles:!1,cancelable:!1,detail:void 0},n);if("function"==typeof window.CustomEvent)return new CustomEvent(e,t);var o=document.createEvent("CustomEvent");return o.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),o};!function(e,n){void 0===n&&(n={});var t=n.insertAt;if(e&&"undefined"!=typeof document){var o=document.head||document.getElementsByTagName("head")[0],i=document.createElement("style");i.type="text/css","top"===t&&o.firstChild?o.insertBefore(i,o.firstChild):o.appendChild(i),i.styleSheet?i.styleSheet.cssText=e:i.appendChild(document.createTextNode(e))}}(".medium-zoom-overlay{position:fixed;top:0;right:0;bottom:0;left:0;opacity:0;transition:opacity .3s;will-change:opacity}.medium-zoom--opened .medium-zoom-overlay{cursor:pointer;cursor:zoom-out;opacity:1}.medium-zoom-image{cursor:pointer;cursor:zoom-in;transition:transform .3s cubic-bezier(.2,0,.2,1)!important}.medium-zoom-image--hidden{visibility:hidden}.medium-zoom-image--opened{position:relative;cursor:pointer;cursor:zoom-out;will-change:transform}");var Rs=function e(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=window.Promise||function(e){function n(){}e(n,n)},i=function(e){var n=e.target;n!==A?-1!==w.indexOf(n)&&f({target:n}):m()},a=function(){if(!k&&C.original){var e=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0;Math.abs(x-e)>S.scrollOffset&&setTimeout(m,150)}},r=function(e){var n=e.key||e.keyCode;"Escape"!==n&&"Esc"!==n&&27!==n||m()},s=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e;if(e.background&&(A.style.background=e.background),e.container&&e.container instanceof Object&&(n.container=Ms({},S.container,e.container)),e.template){var t=Bs(e.template)?e.template:document.querySelector(e.template);n.template=t}return S=Ms({},S,n),w.forEach((function(e){e.dispatchEvent(Ls("medium-zoom:update",{detail:{zoom:P}}))})),P},l=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return e(Ms({},S,n))},c=function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];var o=n.reduce((function(e,n){return[].concat(e,Es(n))}),[]);return o.filter((function(e){return-1===w.indexOf(e)})).forEach((function(e){w.push(e),e.classList.add("medium-zoom-image")})),v.forEach((function(e){var n=e.type,t=e.listener,i=e.options;o.forEach((function(e){e.addEventListener(n,t,i)}))})),P},u=function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];C.zoomed&&m();var o=n.length>0?n.reduce((function(e,n){return[].concat(e,Es(n))}),[]):w;return o.forEach((function(e){e.classList.remove("medium-zoom-image"),e.dispatchEvent(Ls("medium-zoom:detach",{detail:{zoom:P}}))})),w=w.filter((function(e){return-1===o.indexOf(e)})),P},d=function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return w.forEach((function(o){o.addEventListener("medium-zoom:"+e,n,t)})),v.push({type:"medium-zoom:"+e,listener:n,options:t}),P},p=function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return w.forEach((function(o){o.removeEventListener("medium-zoom:"+e,n,t)})),v=v.filter((function(t){return!(t.type==="medium-zoom:"+e&&t.listener.toString()===n.toString())})),P},h=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.target,t=function(){var e={width:document.documentElement.clientWidth,height:document.documentElement.clientHeight,left:0,top:0,right:0,bottom:0},n=void 0,t=void 0;if(S.container)if(S.container instanceof Object)n=(e=Ms({},e,S.container)).width-e.left-e.right-2*S.margin,t=e.height-e.top-e.bottom-2*S.margin;else{var o=(Bs(S.container)?S.container:document.querySelector(S.container)).getBoundingClientRect(),i=o.width,a=o.height,r=o.left,s=o.top;e=Ms({},e,{width:i,height:a,left:r,top:s})}n=n||e.width-2*S.margin,t=t||e.height-2*S.margin;var l=C.zoomedHd||C.original,c=_s(l)?n:l.naturalWidth||n,u=_s(l)?t:l.naturalHeight||t,d=l.getBoundingClientRect(),p=d.top,h=d.left,m=d.width,f=d.height,y=Math.min(c,n)/m,g=Math.min(u,t)/f,b=Math.min(y,g),w="scale("+b+") translate3d("+((n-m)/2-h+S.margin+e.left)/b+"px, "+((t-f)/2-p+S.margin+e.top)/b+"px, 0)";C.zoomed.style.transform=w,C.zoomedHd&&(C.zoomedHd.style.transform=w)};return new o((function(e){if(n&&-1===w.indexOf(n))e(P);else{if(C.zoomed)e(P);else{if(n)C.original=n;else{if(!(w.length>0))return void e(P);var o=w;C.original=o[0]}if(C.original.dispatchEvent(Ls("medium-zoom:open",{detail:{zoom:P}})),x=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,k=!0,C.zoomed=Fs(C.original),document.body.appendChild(A),S.template){var i=Bs(S.template)?S.template:document.querySelector(S.template);C.template=document.createElement("div"),C.template.appendChild(i.content.cloneNode(!0)),document.body.appendChild(C.template)}if(document.body.appendChild(C.zoomed),window.requestAnimationFrame((function(){document.body.classList.add("medium-zoom--opened")})),C.original.classList.add("medium-zoom-image--hidden"),C.zoomed.classList.add("medium-zoom-image--opened"),C.zoomed.addEventListener("click",m),C.zoomed.addEventListener("transitionend",(function n(){k=!1,C.zoomed.removeEventListener("transitionend",n),C.original.dispatchEvent(Ls("medium-zoom:opened",{detail:{zoom:P}})),e(P)})),C.original.getAttribute("data-zoom-src")){C.zoomedHd=C.zoomed.cloneNode(),C.zoomedHd.removeAttribute("srcset"),C.zoomedHd.removeAttribute("sizes"),C.zoomedHd.src=C.zoomed.getAttribute("data-zoom-src"),C.zoomedHd.onerror=function(){clearInterval(a),console.warn("Unable to reach the zoom image target "+C.zoomedHd.src),C.zoomedHd=null,t()};var a=setInterval((function(){C.zoomedHd.complete&&(clearInterval(a),C.zoomedHd.classList.add("medium-zoom-image--opened"),C.zoomedHd.addEventListener("click",m),document.body.appendChild(C.zoomedHd),t())}),10)}else if(C.original.hasAttribute("srcset")){C.zoomedHd=C.zoomed.cloneNode(),C.zoomedHd.removeAttribute("sizes"),C.zoomedHd.removeAttribute("loading");var r=C.zoomedHd.addEventListener("load",(function(){C.zoomedHd.removeEventListener("load",r),C.zoomedHd.classList.add("medium-zoom-image--opened"),C.zoomedHd.addEventListener("click",m),document.body.appendChild(C.zoomedHd),t()}))}else t()}}}))},m=function(){return new o((function(e){if(!k&&C.original){k=!0,document.body.classList.remove("medium-zoom--opened"),C.zoomed.style.transform="",C.zoomedHd&&(C.zoomedHd.style.transform=""),C.template&&(C.template.style.transition="opacity 150ms",C.template.style.opacity=0),C.original.dispatchEvent(Ls("medium-zoom:close",{detail:{zoom:P}})),C.zoomed.addEventListener("transitionend",(function n(){C.original.classList.remove("medium-zoom-image--hidden"),document.body.removeChild(C.zoomed),C.zoomedHd&&document.body.removeChild(C.zoomedHd),document.body.removeChild(A),C.zoomed.classList.remove("medium-zoom-image--opened"),C.template&&document.body.removeChild(C.template),k=!1,C.zoomed.removeEventListener("transitionend",n),C.original.dispatchEvent(Ls("medium-zoom:closed",{detail:{zoom:P}})),C.original=null,C.zoomed=null,C.zoomedHd=null,C.template=null,e(P)}))}else e(P)}))},f=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.target;return C.original?m():h({target:n})},y=function(){return S},g=function(){return w},b=function(){return C.original},w=[],v=[],k=!1,x=0,S=t,C={original:null,zoomed:null,zoomedHd:null,template:null};"[object Object]"===Object.prototype.toString.call(n)?S=n:(n||"string"==typeof n)&&c(n),S=Ms({margin:0,background:"#fff",scrollOffset:40,container:null,template:null},S);var A=Us(S.background);document.addEventListener("click",i),document.addEventListener("keyup",r),document.addEventListener("scroll",a),window.addEventListener("resize",m);var P={open:h,close:m,toggle:f,update:s,clone:l,attach:c,detach:u,on:d,off:p,getOptions:y,getImages:g,getZoomedImage:b};return P},Ns=[ys,Ss,Ps,Os,{data:()=>({zoom:null}),mounted(){this.updateZoom()},updated(){this.updateZoom()},methods:{updateZoom(){setTimeout(()=>{this.zoom&&this.zoom.detach(),this.zoom=Rs(".theme-succinct-content :not(a) > img",{background:"var(--bodyBgColor)"})},1e3)}}}],js={name:"GlobalLayout",computed:{layout(){const e=this.getLayout();return ds("layout",e),$t.component(e)}},methods:{getLayout(){if(this.$page.path){const e=this.$page.frontmatter.layout;return e&&(this.$vuepress.getLayoutAsyncComponent(e)||this.$vuepress.getVueComponent(e))?e:"Layout"}return"NotFound"}}},zs=t(10),Gs=Object(zs.a)(js,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(e,n,t){switch(n){case"components":e[n]||(e[n]={}),Object.assign(e[n],t);break;case"mixins":e[n]||(e[n]=[]),e[n].push(...t);break;default:throw new Error("Unknown option name.")}}(Gs,"mixins",Ns);const Vs=[{name:"v-cbef71f6",path:"/",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-cbef71f6").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-63813a28",path:"/cosmetic/gui.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-63813a28").then(t)}},{name:"v-c86827c4",path:"/cosmetic/verbose.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-c86827c4").then(t)}},{name:"v-f700a256",path:"/gpu-patching/",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-f700a256").then(t)}},{path:"/gpu-patching/index.html",redirect:"/gpu-patching/"},{name:"v-42ad0ad9",path:"/gpu-patching/intel-patching/",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-42ad0ad9").then(t)}},{path:"/gpu-patching/intel-patching/index.html",redirect:"/gpu-patching/intel-patching/"},{name:"v-a6e8bdd4",path:"/gpu-patching/intel-patching/busid.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-a6e8bdd4").then(t)}},{name:"v-19adff54",path:"/gpu-patching/intel-patching/connector.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-19adff54").then(t)}},{name:"v-28419f04",path:"/gpu-patching/intel-patching/vram.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-28419f04").then(t)}},{name:"v-31cb4457",path:"/gpu-patching/legacy-intel/",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-31cb4457").then(t)}},{path:"/gpu-patching/legacy-intel/index.html",redirect:"/gpu-patching/legacy-intel/"},{name:"v-2004cd75",path:"/gpu-patching/nvidia-patching/",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-2004cd75").then(t)}},{path:"/gpu-patching/nvidia-patching/index.html",redirect:"/gpu-patching/nvidia-patching/"},{name:"v-7abde996",path:"/laptop-specific/battery.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-7abde996").then(t)}},{name:"v-cb784854",path:"/misc/msr-lock.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-cb784854").then(t)}},{name:"v-7d3e463c",path:"/misc/nvram.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-7d3e463c").then(t)}},{name:"v-457e0a26",path:"/misc/rtc.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-457e0a26").then(t)}},{name:"v-184e7518",path:"/multiboot/bootcamp.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-184e7518").then(t)}},{name:"v-aed32214",path:"/multiboot/bootstrap.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-aed32214").then(t)}},{name:"v-0f9cc8f6",path:"/universal/audio.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-0f9cc8f6").then(t)}},{name:"v-6496ca56",path:"/universal/drm.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-6496ca56").then(t)}},{name:"v-d257c2d4",path:"/universal/gpu-patches.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-d257c2d4").then(t)}},{name:"v-af8079d4",path:"/universal/iservices.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-af8079d4").then(t)}},{name:"v-0e04bd50",path:"/universal/memory.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-0e04bd50").then(t)}},{name:"v-1a241af4",path:"/universal/oc2hdd.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-1a241af4").then(t)}},{name:"v-5d47e1e0",path:"/universal/pm.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-5d47e1e0").then(t)}},{name:"v-b8f6e5cc",path:"/universal/security.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-b8f6e5cc").then(t)}},{name:"v-4cf0bc9c",path:"/universal/security/applesecureboot.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-4cf0bc9c").then(t)}},{name:"v-da38efe8",path:"/universal/security/filevault.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-da38efe8").then(t)}},{name:"v-65af7c76",path:"/universal/security/password.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-65af7c76").then(t)}},{name:"v-aaa59714",path:"/universal/security/scanpolicy.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-aaa59714").then(t)}},{name:"v-4583f094",path:"/universal/security/vault.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-4583f094").then(t)}},{name:"v-7a8662d4",path:"/universal/sleep.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-7a8662d4").then(t)}},{name:"v-414bd070",path:"/universal/update.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-414bd070").then(t)}},{name:"v-5cef85ca",path:"/usb/",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-5cef85ca").then(t)}},{path:"/usb/index.html",redirect:"/usb/"},{name:"v-56866196",path:"/usb/amd-mapping/amd.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-56866196").then(t)}},{name:"v-5cae2b96",path:"/usb/intel-mapping/intel.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-5cae2b96").then(t)}},{name:"v-7d29fd94",path:"/usb/manual/manual.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-7d29fd94").then(t)}},{name:"v-5aa07f55",path:"/usb/misc/",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-5aa07f55").then(t)}},{path:"/usb/misc/index.html",redirect:"/usb/misc/"},{name:"v-07f5c6b6",path:"/usb/misc/instant-wake.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-07f5c6b6").then(t)}},{name:"v-94f37b54",path:"/usb/misc/keyboard.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-94f37b54").then(t)}},{name:"v-22f6d288",path:"/usb/misc/power.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-22f6d288").then(t)}},{name:"v-698f32f6",path:"/usb/misc/shutdown.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-698f32f6").then(t)}},{name:"v-c74d2d4c",path:"/usb/system-preparation.html",component:Gs,beforeEnter:(e,n,t)=>{us("Layout","v-c74d2d4c").then(t)}},{path:"*",component:Gs}],Hs={title:"OpenCore安装后",description:"",base:"/OpenCore-Post-Install/",headTags:[["meta",{name:"theme-color",content:"#3eaf7c"}],["meta",{name:"apple-mobile-web-app-capable",content:"yes"}],["meta",{name:"apple-mobile-web-app-status-bar-style",content:"black"}],["link",{rel:"'stylesheet",href:"/OpenCore-Post-Install/styles/website.css"}],["link",{rel:"shortcut icon",type:"image/x-icon",href:"/OpenCore-Post-Install/favicon.ico"}]],pages:[{title:"OpenCore安装后",frontmatter:{lang:"zh-CN"},regularPath:"/",relativePath:"README.md",key:"v-cbef71f6",path:"/",headers:[{level:2,title:"如何遵循本指南",slug:"如何遵循本指南",normalizedTitle:"如何遵循本指南",charIndex:159},{level:3,title:"通用",slug:"通用",normalizedTitle:"通用",charIndex:231},{level:3,title:"修复USB",slug:"修复usb",normalizedTitle:"修复usb",charIndex:251},{level:3,title:"安全性",slug:"安全性",normalizedTitle:"安全性",charIndex:276},{level:3,title:"笔记本的特殊性",slug:"笔记本的特殊性",normalizedTitle:"笔记本的特殊性",charIndex:300},{level:3,title:"美化",slug:"美化",normalizedTitle:"美化",charIndex:338},{level:3,title:"多重引导",slug:"多重引导",normalizedTitle:"多重引导",charIndex:367},{level:3,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:391},{level:3,title:"图形卡补丁",slug:"图形卡补丁",normalizedTitle:"图形卡补丁",charIndex:423}],lastUpdated:"2023/9/2 10:47:37",lastUpdatedTimestamp:1693651657e3,headersStr:"如何遵循本指南 通用 修复USB 安全性 笔记本的特殊性 美化 多重引导 其他 图形卡补丁",content:"# OpenCore安装后\n\n欢迎来到OpenCore安装后的教程！请注意：如果你还没有安装macOS，我们建议你跟随以下指南：\n\n * OpenCore安装教程\n\n虽然这里的信息可以应用于OpenCore和Clover，但我们主要关注OpenCore的安装。因此，如果你遇到任何问题，你需要进行更多的研究。\n\n\n# 如何遵循本指南\n\n首先，并非本指南中的每一节都必须完整。取决于每个用户是否觉得自己想做最后的润色或解决某些问题.\n本指南分为8个部分：\n\n * 通用\n   * 建议所有用户遵守\n * 修复USB\n   * 建议所有用户最好遵守\n * 安全性\n   * 对于关心安全和隐私的人\n * 笔记本的特殊性\n   * 笔记本电脑用户除以上内容外，还建议遵循此项\n * 美化\n   * 如加入GUI和关闭啰嗦模式（-v）\n * 多重引导\n   * 针对多引导用户的建议\n * 其他\n   * 其他错误修复，并非所有用户都需要这些修复\n * 图形卡补丁\n   * 一个更深入的研究支持各种GPU硬件的变化的macOS补丁\n\n\n# 通用\n\n * 修复声音\n   * 对于需要解决音频问题。\n * 不用USB引导\n   * 允许您在没有安装USB的情况下启动OpenCore。\n * 升级OpenCore，内核扩展和macOS\n   * 如何安全地更新您的内核扩展，OpenCore甚至macOS。\n * 修复DRM\n   * 对于那些有DRM问题的人，比如Netflix播放。\n * 修复i服务\n   * 帮助修复像iMessage这样的i服务问题。\n * 修复电源管理\n   * 修复并帮助改善硬件空闲和增强状态。\n * 修复睡眠\n   * 在修复睡眠时，需要检查很多地方。\n\n\n# 修复USB\n\n * USB映射：介绍\n   * 解决USB接口丢失并帮助睡眠等问题的起点。\n\n\n# 安全性\n\n * 安全性和FileVault\n   * 在这里，我们将设置OpenCore的一些很好的安全功能。\n\n\n# 笔记本的特殊性\n\n * 修复电池读数\n   * 如果你的电池不支持直接使用SMCBatteryManager。\n\n\n# 美化\n\n * 添加GUI和引导铃声\n   * 添加一个花哨的GUI到OpenCore，甚至一个启动铃声!\n * 修复分辨率和啰嗦模式\n   * 帮助修复OpenCore的分辨率，并允许您在启动时获得正常的苹果徽标!\n * 修复在MacPro7,1上发生的内存问题\n   * 修复了MacPro7.1启动时的内存错误。\n\n\n# 多重引导\n\n * OpenCore多重引导\n   * 专用OpenCore多重引导指南\n * 设置启动器选项\n   * 确保Windows不会从我们的系统中删除OpenCore。\n * 安装BootCamp\n   * 允许我们安装Bootcamp，方便启动切换。\n\n\n# 其他\n\n * 修复RTC\n   * 帮助解决RTC/CMOS/安全模式重启问题。\n * 修复CFG锁\n   * 允许删除一些内核补丁以获得更好的稳定性\n * 模拟NVRAM\n   * 对于已经损坏NVRAM或需要测试它的用户。\n\n\n# 图形卡补丁\n\n * 深度的图形卡补丁",normalizedContent:"# opencore安装后\n\n欢迎来到opencore安装后的教程！请注意：如果你还没有安装macos，我们建议你跟随以下指南：\n\n * opencore安装教程\n\n虽然这里的信息可以应用于opencore和clover，但我们主要关注opencore的安装。因此，如果你遇到任何问题，你需要进行更多的研究。\n\n\n# 如何遵循本指南\n\n首先，并非本指南中的每一节都必须完整。取决于每个用户是否觉得自己想做最后的润色或解决某些问题.\n本指南分为8个部分：\n\n * 通用\n   * 建议所有用户遵守\n * 修复usb\n   * 建议所有用户最好遵守\n * 安全性\n   * 对于关心安全和隐私的人\n * 笔记本的特殊性\n   * 笔记本电脑用户除以上内容外，还建议遵循此项\n * 美化\n   * 如加入gui和关闭啰嗦模式（-v）\n * 多重引导\n   * 针对多引导用户的建议\n * 其他\n   * 其他错误修复，并非所有用户都需要这些修复\n * 图形卡补丁\n   * 一个更深入的研究支持各种gpu硬件的变化的macos补丁\n\n\n# 通用\n\n * 修复声音\n   * 对于需要解决音频问题。\n * 不用usb引导\n   * 允许您在没有安装usb的情况下启动opencore。\n * 升级opencore，内核扩展和macos\n   * 如何安全地更新您的内核扩展，opencore甚至macos。\n * 修复drm\n   * 对于那些有drm问题的人，比如netflix播放。\n * 修复i服务\n   * 帮助修复像imessage这样的i服务问题。\n * 修复电源管理\n   * 修复并帮助改善硬件空闲和增强状态。\n * 修复睡眠\n   * 在修复睡眠时，需要检查很多地方。\n\n\n# 修复usb\n\n * usb映射：介绍\n   * 解决usb接口丢失并帮助睡眠等问题的起点。\n\n\n# 安全性\n\n * 安全性和filevault\n   * 在这里，我们将设置opencore的一些很好的安全功能。\n\n\n# 笔记本的特殊性\n\n * 修复电池读数\n   * 如果你的电池不支持直接使用smcbatterymanager。\n\n\n# 美化\n\n * 添加gui和引导铃声\n   * 添加一个花哨的gui到opencore，甚至一个启动铃声!\n * 修复分辨率和啰嗦模式\n   * 帮助修复opencore的分辨率，并允许您在启动时获得正常的苹果徽标!\n * 修复在macpro7,1上发生的内存问题\n   * 修复了macpro7.1启动时的内存错误。\n\n\n# 多重引导\n\n * opencore多重引导\n   * 专用opencore多重引导指南\n * 设置启动器选项\n   * 确保windows不会从我们的系统中删除opencore。\n * 安装bootcamp\n   * 允许我们安装bootcamp，方便启动切换。\n\n\n# 其他\n\n * 修复rtc\n   * 帮助解决rtc/cmos/安全模式重启问题。\n * 修复cfg锁\n   * 允许删除一些内核补丁以获得更好的稳定性\n * 模拟nvram\n   * 对于已经损坏nvram或需要测试它的用户。\n\n\n# 图形卡补丁\n\n * 深度的图形卡补丁",charsets:{cjk:!0}},{title:"OpenCore beauty treatment",frontmatter:{},regularPath:"/cosmetic/gui.html",relativePath:"cosmetic/gui.md",key:"v-63813a28",path:"/cosmetic/gui.html",headers:[{level:2,title:"Setting up OpenCore's GUI",slug:"setting-up-opencore-s-gui",normalizedTitle:"setting up opencore's gui",charIndex:69},{level:2,title:"Setting up Boot-chime with AudioDxe",slug:"setting-up-boot-chime-with-audiodxe",normalizedTitle:"setting up boot-chime with audiodxe",charIndex:1618}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"Setting up OpenCore's GUI Setting up Boot-chime with AudioDxe",content:"# OpenCore beauty treatment\n\nMain thing this guide will go over:\n\n * Setting up OpenCore's GUI\n * Setting up a boot-chime\n\n\n# Setting up OpenCore's GUI\n\nSo to get started, we're gonna need 0.5.7 or newer as these builds have the GUI included with the rest of the files. If you're on an older version, I recommend updating: Updating OpenCore\n\nOnce that's done, we'll need a couple things:\n\n * Binary Resources\n * OpenCanopy.efi\n   * Note: OpenCanopy.efi must be from the same build as your OpenCore files, as mismatched files can cause boot issues\n\nOnce you have both of these, we'll next want to add it to our EFI partition:\n\n * Add the Resources folder to EFI/OC\n * Add OpenCanopy.efi to EFI/OC/Drivers\n\n\n\nNow in our config.plist, we have 4 things we need to fix:\n\n * Misc -> Boot -> PickerMode: External\n * Misc -> Boot -> PickerAttributes: 17\n   * This enables mouse/trackpad support as well as .VolumeIcon.icns reading from the drive, allows for macOS installer icons to appear in the picker\n     * Other settings for PickerAttributes can be found in the Configuration.pdf\n * Misc -> Boot -> PickerVariant: Acidanthera\\GoldenGate\n   * Applicable variables:\n     * Auto — Automatically select one set of icons based on DefaultBackground colour.\n     * Acidanthera\\Syrah — Normal icon set.\n     * Acidanthera\\GoldenGate — Nouveau icon set.\n     * Acidanthera\\Chardonnay — Vintage icon set.\n * UEFI -> Drivers and add OpenCanopy.efi\n\nOnce all this is saved, you can reboot and be greeted with a true Mac-like GUI:\n\nDEFAULT (SYRAH)   MODERN (GOLDENGATE)   OLD (CHARDONNAY)\n                                        \n\n\n# Setting up Boot-chime with AudioDxe\n\nSo to start, we'll need a couple of things:\n\n * Onboard audio output\n   * USB DACs will not work\n   * GPU audio out is a hit or miss\n * AudioDxe in both EFI/OC/Drivers and UEFI -> Drivers\n * Binary Resources\n   * Add the Resources folder to EFI/OC, just like we did with the OpenCore GUI section\n   * For those running out of space, OCEFIAudio_VoiceOver_Boot.mp3 is all that's required for the Boot-Chime\n * Debug version of OpenCore with logging enabled\n   * See OpenCore Debugging for more info\n   * Note: after you're done setting up, you can revert to the RELEASE builds\n\nSetting up NVRAM:\n\n * NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82:\n   * SystemAudioVolume | Data | 0x46\n   * This is the boot-chime and screen reader volume, note it's in hexadecimal so would become 70 in decimal; 0x80 is mute\n\nOptional NVRAM entries\n * NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82:\n   * StartupMute | Data | 0x00\n   * Mute startup chime sound in firmware audio support; 0x00 is unmuted, missing variable or any other value means muted\n\nSetting up UEFI -> Audio:\n\n * AudioCodec: (Number)\n   \n   * Codec address of Audio controller. This typically contains the first audio codec address on the builtin analog audio controller (HDEF). Failsafe value is 0.\n   * To find yours:\n     \n     * Check IORegistryExplorer -> HDEF -> AppleHDAController -> IOHDACodecDevice and see the IOHDACodecAddress property (ex: 0x0)\n     \n     * Can also check via terminal (Note if multiple show up, use the vendor ID to find the right device):\n       \n       ioreg -rxn IOHDACodecDevice | grep VendorID   # List all possible devices\n       sh ioreg -rxn IOHDACodecDevice | grep IOHDACodecAddress # Grab the codec address\n       \n\n * AudioDevice: (String)\n   \n   * Device path (PciRoot) of audio controller\n   * Run gfxutil to find the path:\n     * /path/to/gfxutil -f HDEF\n     * ex: PciRoot(0x0)/Pci(0x1f,0x3)\n\n * AudioOutMask: (Number)\n   \n   * Play sound in UEFI to more than one channel (e.g. main speaker plus bass speaker). Failsafe value is -1 (output to all).\n   \n   * Output channels are internally numbered as bit 0 (value 1), bit 1 (value 2) and so on. A value of 1 refers to the first audio output (not necessarily main speaker). A value of -1 is used to play to all channels simultaneously.\n   \n   * When AudioSupport is enabled, AudioDevice must be either empty or a valid path and AudioOutMask must be non-zero\n   \n   * Easiest way to find the right one is to go through each one (from 2^0 to 2^(N - 1), where N is the number of outputs listed in your log); ex: 5 outputs would translate to 1/2/4/8/16 (or a combination of these) as possible values\n   \n   * You can find all the ones for your codec in the OpenCore debug logs:\n     \n     06:065 00:004 OCAU: Matching PciRoot(0x0)/Pci(0x1F,0x3)/VenMsg(A9003FEB-D806-41DB-A491-5405FEEF46C3,00000000)...\n     06:070 00:005 OCAU: 1/2 PciRoot(0x0)/Pci(0x1F,0x3)/VenMsg(A9003FEB-D806-41DB-A491-5405FEEF46C3,00000000) (5 outputs) - Success\n     \n\n * AudioSupport: (Boolean)\n   \n   * Set this to True\n   * Enabling this setting routes audio playback from builtin protocols to specified dedicated audio ports (AudioOutMask) of the specified codec (AudioCodec), located on the specified audio controller (AudioDevice)\n\n * DisconnectHDA: (Boolean)\n   \n   * Set this to False\n\n * MaximumGain: (Number)\n   \n   * Maximum gain to use for UEFI audio, specified in decibels (dB) with respect to amplifier reference level of 0 dB\n   * Set this to -15\n\n * MinimumAssistGain: (Number)\n   \n   * Minimum gain in decibels (dB) to use for picker audio assist. The screen reader will use this amplifier gain if the system amplifier gain read from the SystemAudioVolumeDB NVRAM variable is lower than this\n   * Set this to -30\n\n * MinimumAudibleGain: (Number)\n   \n   * Minimum gain in decibels (dB) at which to attempt to play any sound\n   * Set this to -55\n\n * PlayChime: (String)\n   \n   * Set this to Enabled\n   * Supported values are:\n     * Auto — Enables chime when StartupMute NVRAM variable is not present or set to 00\n     * Enabled — Enables chime unconditionally\n     * Disabled — Disables chime unconditionally\n\n * ResetTrafficClass: (Boolean)\n   \n   * Set this to False\n\n * SetupDelay: (Number)\n   \n   * By default, leave this at 0\n   * Some codecs many need extra time for setup, we recommend setting to 500 milliseconds (0.5 seconds) if you have issues\n\nOnce done, you should get something like this:\n\n\n\nTIP\n\nThere are codecs like Realtek ALC295 (HP and others) whose default audio sampling rate is 48 kHz. In this case, even if 44.1 kHz is supported by the codec, sound output fails. The only way at the moment to fix this is to change the sample rate of the OCEFIAudio_VoiceOver_Boot.mp3 file with an audio editor to raise it from 44.1 kHz to 48 kHz. This has to be done manually as OpenCore does not have an automated mechanism for it.\n\nTIP\n\nNote for visually impaired:\n\n * OpenCore hasn't forgotten about you! With the AudioDxe setup, you can enable both picker audio and FileVault VoiceOver with these 2 settings:\n   * Misc -> Boot -> PickerAudioAssist -> True to enable picker audio\n   * UEFI -> ProtocolOverrides -> AppleAudio -> True to enable FileVault voice over\n * See Security and FileVault on how to setup the rest for proper FileVault support.",normalizedContent:"# opencore beauty treatment\n\nmain thing this guide will go over:\n\n * setting up opencore's gui\n * setting up a boot-chime\n\n\n# setting up opencore's gui\n\nso to get started, we're gonna need 0.5.7 or newer as these builds have the gui included with the rest of the files. if you're on an older version, i recommend updating: updating opencore\n\nonce that's done, we'll need a couple things:\n\n * binary resources\n * opencanopy.efi\n   * note: opencanopy.efi must be from the same build as your opencore files, as mismatched files can cause boot issues\n\nonce you have both of these, we'll next want to add it to our efi partition:\n\n * add the resources folder to efi/oc\n * add opencanopy.efi to efi/oc/drivers\n\n\n\nnow in our config.plist, we have 4 things we need to fix:\n\n * misc -> boot -> pickermode: external\n * misc -> boot -> pickerattributes: 17\n   * this enables mouse/trackpad support as well as .volumeicon.icns reading from the drive, allows for macos installer icons to appear in the picker\n     * other settings for pickerattributes can be found in the configuration.pdf\n * misc -> boot -> pickervariant: acidanthera\\goldengate\n   * applicable variables:\n     * auto — automatically select one set of icons based on defaultbackground colour.\n     * acidanthera\\syrah — normal icon set.\n     * acidanthera\\goldengate — nouveau icon set.\n     * acidanthera\\chardonnay — vintage icon set.\n * uefi -> drivers and add opencanopy.efi\n\nonce all this is saved, you can reboot and be greeted with a true mac-like gui:\n\ndefault (syrah)   modern (goldengate)   old (chardonnay)\n                                        \n\n\n# setting up boot-chime with audiodxe\n\nso to start, we'll need a couple of things:\n\n * onboard audio output\n   * usb dacs will not work\n   * gpu audio out is a hit or miss\n * audiodxe in both efi/oc/drivers and uefi -> drivers\n * binary resources\n   * add the resources folder to efi/oc, just like we did with the opencore gui section\n   * for those running out of space, ocefiaudio_voiceover_boot.mp3 is all that's required for the boot-chime\n * debug version of opencore with logging enabled\n   * see opencore debugging for more info\n   * note: after you're done setting up, you can revert to the release builds\n\nsetting up nvram:\n\n * nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82:\n   * systemaudiovolume | data | 0x46\n   * this is the boot-chime and screen reader volume, note it's in hexadecimal so would become 70 in decimal; 0x80 is mute\n\noptional nvram entries\n * nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82:\n   * startupmute | data | 0x00\n   * mute startup chime sound in firmware audio support; 0x00 is unmuted, missing variable or any other value means muted\n\nsetting up uefi -> audio:\n\n * audiocodec: (number)\n   \n   * codec address of audio controller. this typically contains the first audio codec address on the builtin analog audio controller (hdef). failsafe value is 0.\n   * to find yours:\n     \n     * check ioregistryexplorer -> hdef -> applehdacontroller -> iohdacodecdevice and see the iohdacodecaddress property (ex: 0x0)\n     \n     * can also check via terminal (note if multiple show up, use the vendor id to find the right device):\n       \n       ioreg -rxn iohdacodecdevice | grep vendorid   # list all possible devices\n       sh ioreg -rxn iohdacodecdevice | grep iohdacodecaddress # grab the codec address\n       \n\n * audiodevice: (string)\n   \n   * device path (pciroot) of audio controller\n   * run gfxutil to find the path:\n     * /path/to/gfxutil -f hdef\n     * ex: pciroot(0x0)/pci(0x1f,0x3)\n\n * audiooutmask: (number)\n   \n   * play sound in uefi to more than one channel (e.g. main speaker plus bass speaker). failsafe value is -1 (output to all).\n   \n   * output channels are internally numbered as bit 0 (value 1), bit 1 (value 2) and so on. a value of 1 refers to the first audio output (not necessarily main speaker). a value of -1 is used to play to all channels simultaneously.\n   \n   * when audiosupport is enabled, audiodevice must be either empty or a valid path and audiooutmask must be non-zero\n   \n   * easiest way to find the right one is to go through each one (from 2^0 to 2^(n - 1), where n is the number of outputs listed in your log); ex: 5 outputs would translate to 1/2/4/8/16 (or a combination of these) as possible values\n   \n   * you can find all the ones for your codec in the opencore debug logs:\n     \n     06:065 00:004 ocau: matching pciroot(0x0)/pci(0x1f,0x3)/venmsg(a9003feb-d806-41db-a491-5405feef46c3,00000000)...\n     06:070 00:005 ocau: 1/2 pciroot(0x0)/pci(0x1f,0x3)/venmsg(a9003feb-d806-41db-a491-5405feef46c3,00000000) (5 outputs) - success\n     \n\n * audiosupport: (boolean)\n   \n   * set this to true\n   * enabling this setting routes audio playback from builtin protocols to specified dedicated audio ports (audiooutmask) of the specified codec (audiocodec), located on the specified audio controller (audiodevice)\n\n * disconnecthda: (boolean)\n   \n   * set this to false\n\n * maximumgain: (number)\n   \n   * maximum gain to use for uefi audio, specified in decibels (db) with respect to amplifier reference level of 0 db\n   * set this to -15\n\n * minimumassistgain: (number)\n   \n   * minimum gain in decibels (db) to use for picker audio assist. the screen reader will use this amplifier gain if the system amplifier gain read from the systemaudiovolumedb nvram variable is lower than this\n   * set this to -30\n\n * minimumaudiblegain: (number)\n   \n   * minimum gain in decibels (db) at which to attempt to play any sound\n   * set this to -55\n\n * playchime: (string)\n   \n   * set this to enabled\n   * supported values are:\n     * auto — enables chime when startupmute nvram variable is not present or set to 00\n     * enabled — enables chime unconditionally\n     * disabled — disables chime unconditionally\n\n * resettrafficclass: (boolean)\n   \n   * set this to false\n\n * setupdelay: (number)\n   \n   * by default, leave this at 0\n   * some codecs many need extra time for setup, we recommend setting to 500 milliseconds (0.5 seconds) if you have issues\n\nonce done, you should get something like this:\n\n\n\ntip\n\nthere are codecs like realtek alc295 (hp and others) whose default audio sampling rate is 48 khz. in this case, even if 44.1 khz is supported by the codec, sound output fails. the only way at the moment to fix this is to change the sample rate of the ocefiaudio_voiceover_boot.mp3 file with an audio editor to raise it from 44.1 khz to 48 khz. this has to be done manually as opencore does not have an automated mechanism for it.\n\ntip\n\nnote for visually impaired:\n\n * opencore hasn't forgotten about you! with the audiodxe setup, you can enable both picker audio and filevault voiceover with these 2 settings:\n   * misc -> boot -> pickeraudioassist -> true to enable picker audio\n   * uefi -> protocoloverrides -> appleaudio -> true to enable filevault voice over\n * see security and filevault on how to setup the rest for proper filevault support.",charsets:{cjk:!0}},{title:"Fixing Resolution and Verbose",frontmatter:{},regularPath:"/cosmetic/verbose.html",relativePath:"cosmetic/verbose.md",key:"v-c86827c4",path:"/cosmetic/verbose.html",headers:[{level:2,title:"macOS Decluttering",slug:"macos-decluttering",normalizedTitle:"macos decluttering",charIndex:164},{level:2,title:"OpenCore Decluttering",slug:"opencore-decluttering",normalizedTitle:"opencore decluttering",charIndex:888}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"macOS Decluttering OpenCore Decluttering",content:"# Fixing Resolution and Verbose\n\nWanting a more clean booting experience with macOS without all that verbose text while booting? Well you need a couple things:\n\n\n# macOS Decluttering\n\nMisc -> Debug\n\n * Set AppleDebug to False, this will remove boot.efi debugging right at the start of booting.\n\nNVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82:\n\n * Remove -v from boot-args in your config.plist\n\nNVRAM -> Add -> 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:\n\n * UIScale\n   * 01: Standard resolution\n   * 02: HiDPI (generally required for FileVault to function correctly on smaller displays)\n\nUEFI -> Output:\n\n * TextRenderer set toBuiltinGraphics\n * Resolution: set to Max for best results\n   * Optionally can specify resolution: WxH@Bpp (e.g. 1920x1080@32) or WxH (e.g. 1920x1080)\n * ProvideConsoleGop set to True\n\nIf still having issues, see Configuration.pdf for all possible options.\n\n\n# OpenCore Decluttering\n\nSo if you followed closely to this guide during install, you'll likely be running the debug version of OpenCore and a .txt file would be created on each boot. For those who want to remove OpenCore's extra debugging messages and that .txt file generation, see below:\n\nInside your config.plist:\n\n * Misc -> Debug -> Target: 3\n   * Target is what determines both what is logged and how, see OpenCore Debugging for more values\n\nInside your EFI:\n\n * Replace the following files with the release versions(if previously using DEBUG versions):\n   * EFI/BOOT/\n     * BOOTx64.efi\n   * EFI/OC/Drivers/\n     * OpenRuntime.efi\n   * EFI/OC/\n     * OpenCore.efi",normalizedContent:"# fixing resolution and verbose\n\nwanting a more clean booting experience with macos without all that verbose text while booting? well you need a couple things:\n\n\n# macos decluttering\n\nmisc -> debug\n\n * set appledebug to false, this will remove boot.efi debugging right at the start of booting.\n\nnvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82:\n\n * remove -v from boot-args in your config.plist\n\nnvram -> add -> 4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14:\n\n * uiscale\n   * 01: standard resolution\n   * 02: hidpi (generally required for filevault to function correctly on smaller displays)\n\nuefi -> output:\n\n * textrenderer set tobuiltingraphics\n * resolution: set to max for best results\n   * optionally can specify resolution: wxh@bpp (e.g. 1920x1080@32) or wxh (e.g. 1920x1080)\n * provideconsolegop set to true\n\nif still having issues, see configuration.pdf for all possible options.\n\n\n# opencore decluttering\n\nso if you followed closely to this guide during install, you'll likely be running the debug version of opencore and a .txt file would be created on each boot. for those who want to remove opencore's extra debugging messages and that .txt file generation, see below:\n\ninside your config.plist:\n\n * misc -> debug -> target: 3\n   * target is what determines both what is logged and how, see opencore debugging for more values\n\ninside your efi:\n\n * replace the following files with the release versions(if previously using debug versions):\n   * efi/boot/\n     * bootx64.efi\n   * efi/oc/drivers/\n     * openruntime.efi\n   * efi/oc/\n     * opencore.efi",charsets:{}},{title:"GPU Patching in macOS",frontmatter:{},regularPath:"/gpu-patching/",relativePath:"gpu-patching/README.md",key:"v-f700a256",path:"/gpu-patching/",headers:[{level:2,title:"Intel iGPU Patching",slug:"intel-igpu-patching",normalizedTitle:"intel igpu patching",charIndex:108},{level:2,title:"Nvidia Patching",slug:"nvidia-patching",normalizedTitle:"nvidia patching",charIndex:244}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"Intel iGPU Patching Nvidia Patching",content:"# GPU Patching in macOS\n\nThis section is dedicated to GPU patching, currently we support the following:\n\n\n# Intel iGPU Patching\n\n * Modern iGPU patching\n   * Sandy and newer is supported\n * Legacy iGPU patching\n   * GMA series is supported\n\n\n# Nvidia Patching\n\n * Legacy Nvidia Patching\n   * Tesla through Fermi series are supported",normalizedContent:"# gpu patching in macos\n\nthis section is dedicated to gpu patching, currently we support the following:\n\n\n# intel igpu patching\n\n * modern igpu patching\n   * sandy and newer is supported\n * legacy igpu patching\n   * gma series is supported\n\n\n# nvidia patching\n\n * legacy nvidia patching\n   * tesla through fermi series are supported",charsets:{}},{title:"Intel iGPU Patching",frontmatter:{},regularPath:"/gpu-patching/intel-patching/",relativePath:"gpu-patching/intel-patching/README.md",key:"v-42ad0ad9",path:"/gpu-patching/intel-patching/",headers:[{level:2,title:"Terminology",slug:"terminology",normalizedTitle:"terminology",charIndex:441},{level:2,title:"Getting started",slug:"getting-started",normalizedTitle:"getting started",charIndex:1078},{level:3,title:"AAPL,ig-platform-id explainer",slug:"aapl-ig-platform-id-explainer",normalizedTitle:"aapl,ig-platform-id explainer",charIndex:1230},{level:3,title:"device-id explainer",slug:"device-id-explainer",normalizedTitle:"device-id explainer",charIndex:1263},{level:2,title:"Learning to patch with WhateverGreen",slug:"learning-to-patch-with-whatevergreen",normalizedTitle:"learning to patch with whatevergreen",charIndex:5803}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"Terminology Getting started AAPL,ig-platform-id explainer device-id explainer Learning to patch with WhateverGreen",content:"# Intel iGPU Patching\n\nThis guide will be a more in-depth look into patching macOS to support more hardware variations of Intel's iGPUs including proper display out, fixing color tint issues, HiDPI issues and etc. Note this guide is not a beginners tutorial, we recommend you follow the recommend iGPU properties listed in the config.plist section of the guide to start off.\n\nThis guide supports:\n\n * Sandy Bridge through Ice Lake iGPUs\n\n\n# Terminology\n\nTERM                   DESCRIPTION\nFramebuffer            Refers to the kext used in macOS to drive a GPU\nFramebuffer Profile    Profile in a framebuffer which determines how the iGPU will\n                       act\nWhateverGreen          Kext used to patch GPU drivers to better support PC hardware\nAAPL,ig-platform-id    Property used by macOS to determine the framebuffer profile\n                       with Ivy Bridge and newer\nAAPL,snb-platform-id   Property used by macOS to determine the framebuffer profile\n                       with Sandy Bridge\ndevice-id              Used by IOKit to match hardware to kexts\n\n\n# Getting started\n\nBefore we jump too deep into this rabbit hole, we should first explain what we're doing and why we need to do this.\n\nBasic topics:\n\n * AAPL,ig-platform-id explainer\n * device-id explainer\n\n\n# AAPL,ig-platform-id explainer\n\nBy default in Macs with iGPUs, there are a few configurations:\n\n * iGPU is the sole display output\n   * Commonly seen on Mac Minis, MacBook Airs, 13\" MacBook Pros and iMacs without a dGPU\n * iGPU is only used for internal displays, and dGPUs are handling external displays\n   * Commonly seen with 15\" MacBook Pros\n * iGPU is solely used for internal compute, and dGPU handles all display outputs\n   * Commonly seen with iMacs that include dGPUs\n\nThe reason why this is important is due to the amount of iGPU configurations Apple supports in the iGPU kexts, specifically known as framebuffer personalities. These personalities determine many things including number of displays, types of displays allowed, location of these displays, minimum VRAM required, etc, and so we need to either hope one of these profiles matches our hardware or try to patch it.\n\nTo specify a framebuffer personality in macOS, we use the DeviceProperties section in OpenCore to add an entry called AAPL,ig-platform-id\n\n * Note: on Sandy Bridge, we use AAPL,snb-platform-id instead\n\nThe format of this entry is hexadecimal, and is byte swapped from the actual value. A full list of these values can be found in WhateverGreen's manual: FAQ.IntelHD.en.md\n\nFor this example, lets try to find a framebuffer compatible for a desktop HD 4600 iGPU. We'll first want to scroll down the manual until we hit the Intel HD Graphics 4200-5200 (Haswell processors) entry. Here we're given a list of all supported framebuffers in macOS, including the hardware type(ie. Mobile vs desktop), VRAM requirements, etc. If you scroll to the bottom of this list, you're also given some recommended options:\n\nDesktop :\n 0x0D220003 (default)\nLaptop :\n 0x0A160000 (default)\n 0x0A260005 (recommended)\n 0x0A260006 (recommended)\nEmpty Framebuffer :\n 0x04120004 (default)\n\n\nThe first 2 entries are pretty obvious, however the last one(Empty Framebuffer) refers to systems where they have a dGPU already setup but still have an iGPU enabled in the background to handle tasks such as hardware accelerated decoding in tasks it excels at.\n\nNow since we're using the desktop HD 4600, we'll grab the corresponding framebuffer profile: 0x0D220003\n\nNow by itself, we cannot use this in our config.plist. The reasoning being is that it's in Big Endian while macOS's IOService tree expects it to be in Little Endian. To convert it however is quite simple:\n\n# To start, remove the 0x and then space them out in pairs\n0x0D220003 -> 0D 22 00 03\n\n# Next, reverse the order but keep the pairs together\n0D 22 00 03 -> 03 00 22 0D\n\n# And now you have your final framebuffer profile\n0300220D = AAPL,ig-platform-id\n\n\nFrom here, lets open up our config.plist and head to DeviceProperties -> Add. Now we'll want to add a new Entry called PciRoot(0x0)/Pci(0x2,0x0). This is the location of Intel's iGPUs relative to the IOService path, and has been consistent as far back as Yonah series CPUs(2007+):\n\nKEY                   TYPE   VALUE\nAAPL,ig-platform-id   Data   0300220D\n\n\n\n\n# device-id explainer\n\ndevice-id is what macOS, or more specifically IOKit, uses to determine which devices are allowed to connect to which drivers. Why this is important for us is that Apple's iGPU drivers have a limited amount of IDs even though the kext itself can support much more.\n\nTo determine whether you need a new device-id injected, you'll want to compare WhateverGreen's list of supported IDs to what you have.\n\nFor this example, lets take a look at the i3-4150 with an HD 4400 iGPU. Using Intel's ARK page, we can see the following:\n\nDevice ID = 0x41E\n\n\nNow that we have our actual Device ID, lets compare it to WhateverGreen's list:\n\nNative supported DevIDs:\n\n 0x0d26\n 0x0a26\n 0x0a2e\n 0x0d22\n 0x0412\n\n\nUnfortunately the ID is not present in macOS, so we'll need to find a similar iGPU to ours and use their Device ID. The HD 4600 found in the i3-4330 is a very close match, so we'll use its Device ID:\n\nDevice ID = 0x412\n\n\nHowever, by default this cannot be injected. We'll need to first pad it to 8 bits and hex swap:\n\n# First, remove 0x and pad it to 8 bits by using 0's in front of it\n0x412 -> 00 00 04 12\n\n# Next reverse it, but keep the pairs in tact\n00 00 04 12 -> 12 04 00 00\n\n# And voila, you have your device-id\n12040000 = device-id\n\n\nNow that we have our device-id, we'll do the same thing as before with ig-platform-id. Open your config.plist and add this new entry under PciRoot(0x0)/Pci(0x2,0x0):\n\nKEY         TYPE   VALUE\ndevice-id   Data   12040000\n\n\n\n\n# Learning to patch with WhateverGreen\n\nNow that we've gone over the basics of setting up an iGPU, let's get into some deeper topics. We'll need to go over some prerequisites first:\n\n * Lilu and WhateverGreen are present under EFI/OC/Kexts and in your config.plist\n   * To verify if they loaded correctly in macOS, run the below command(if nothing is outputted, the kexts are not loading)\n   * kextstat | grep -E \"Lilu|WhateverGreen\"\n * DeviceProperties -> Add -> PciRoot(0x0)/Pci(0x2,0x0) has been correctly setup\n   * Refer to your specific generation in the config.plist section\n\nNow head forth into your framebuffer patching journey!:\n\n * Patching the VRAM requirement of macOS\n   * Relevant for systems with locked BIOS and cannot increase the VRAM\n * Patching the display type\n   * Relevant for systems where you may get distorted colors on certain monitors\n * Patching the display connections\n   * Relevant for systems where certain display outputs do not work",normalizedContent:"# intel igpu patching\n\nthis guide will be a more in-depth look into patching macos to support more hardware variations of intel's igpus including proper display out, fixing color tint issues, hidpi issues and etc. note this guide is not a beginners tutorial, we recommend you follow the recommend igpu properties listed in the config.plist section of the guide to start off.\n\nthis guide supports:\n\n * sandy bridge through ice lake igpus\n\n\n# terminology\n\nterm                   description\nframebuffer            refers to the kext used in macos to drive a gpu\nframebuffer profile    profile in a framebuffer which determines how the igpu will\n                       act\nwhatevergreen          kext used to patch gpu drivers to better support pc hardware\naapl,ig-platform-id    property used by macos to determine the framebuffer profile\n                       with ivy bridge and newer\naapl,snb-platform-id   property used by macos to determine the framebuffer profile\n                       with sandy bridge\ndevice-id              used by iokit to match hardware to kexts\n\n\n# getting started\n\nbefore we jump too deep into this rabbit hole, we should first explain what we're doing and why we need to do this.\n\nbasic topics:\n\n * aapl,ig-platform-id explainer\n * device-id explainer\n\n\n# aapl,ig-platform-id explainer\n\nby default in macs with igpus, there are a few configurations:\n\n * igpu is the sole display output\n   * commonly seen on mac minis, macbook airs, 13\" macbook pros and imacs without a dgpu\n * igpu is only used for internal displays, and dgpus are handling external displays\n   * commonly seen with 15\" macbook pros\n * igpu is solely used for internal compute, and dgpu handles all display outputs\n   * commonly seen with imacs that include dgpus\n\nthe reason why this is important is due to the amount of igpu configurations apple supports in the igpu kexts, specifically known as framebuffer personalities. these personalities determine many things including number of displays, types of displays allowed, location of these displays, minimum vram required, etc, and so we need to either hope one of these profiles matches our hardware or try to patch it.\n\nto specify a framebuffer personality in macos, we use the deviceproperties section in opencore to add an entry called aapl,ig-platform-id\n\n * note: on sandy bridge, we use aapl,snb-platform-id instead\n\nthe format of this entry is hexadecimal, and is byte swapped from the actual value. a full list of these values can be found in whatevergreen's manual: faq.intelhd.en.md\n\nfor this example, lets try to find a framebuffer compatible for a desktop hd 4600 igpu. we'll first want to scroll down the manual until we hit the intel hd graphics 4200-5200 (haswell processors) entry. here we're given a list of all supported framebuffers in macos, including the hardware type(ie. mobile vs desktop), vram requirements, etc. if you scroll to the bottom of this list, you're also given some recommended options:\n\ndesktop :\n 0x0d220003 (default)\nlaptop :\n 0x0a160000 (default)\n 0x0a260005 (recommended)\n 0x0a260006 (recommended)\nempty framebuffer :\n 0x04120004 (default)\n\n\nthe first 2 entries are pretty obvious, however the last one(empty framebuffer) refers to systems where they have a dgpu already setup but still have an igpu enabled in the background to handle tasks such as hardware accelerated decoding in tasks it excels at.\n\nnow since we're using the desktop hd 4600, we'll grab the corresponding framebuffer profile: 0x0d220003\n\nnow by itself, we cannot use this in our config.plist. the reasoning being is that it's in big endian while macos's ioservice tree expects it to be in little endian. to convert it however is quite simple:\n\n# to start, remove the 0x and then space them out in pairs\n0x0d220003 -> 0d 22 00 03\n\n# next, reverse the order but keep the pairs together\n0d 22 00 03 -> 03 00 22 0d\n\n# and now you have your final framebuffer profile\n0300220d = aapl,ig-platform-id\n\n\nfrom here, lets open up our config.plist and head to deviceproperties -> add. now we'll want to add a new entry called pciroot(0x0)/pci(0x2,0x0). this is the location of intel's igpus relative to the ioservice path, and has been consistent as far back as yonah series cpus(2007+):\n\nkey                   type   value\naapl,ig-platform-id   data   0300220d\n\n\n\n\n# device-id explainer\n\ndevice-id is what macos, or more specifically iokit, uses to determine which devices are allowed to connect to which drivers. why this is important for us is that apple's igpu drivers have a limited amount of ids even though the kext itself can support much more.\n\nto determine whether you need a new device-id injected, you'll want to compare whatevergreen's list of supported ids to what you have.\n\nfor this example, lets take a look at the i3-4150 with an hd 4400 igpu. using intel's ark page, we can see the following:\n\ndevice id = 0x41e\n\n\nnow that we have our actual device id, lets compare it to whatevergreen's list:\n\nnative supported devids:\n\n 0x0d26\n 0x0a26\n 0x0a2e\n 0x0d22\n 0x0412\n\n\nunfortunately the id is not present in macos, so we'll need to find a similar igpu to ours and use their device id. the hd 4600 found in the i3-4330 is a very close match, so we'll use its device id:\n\ndevice id = 0x412\n\n\nhowever, by default this cannot be injected. we'll need to first pad it to 8 bits and hex swap:\n\n# first, remove 0x and pad it to 8 bits by using 0's in front of it\n0x412 -> 00 00 04 12\n\n# next reverse it, but keep the pairs in tact\n00 00 04 12 -> 12 04 00 00\n\n# and voila, you have your device-id\n12040000 = device-id\n\n\nnow that we have our device-id, we'll do the same thing as before with ig-platform-id. open your config.plist and add this new entry under pciroot(0x0)/pci(0x2,0x0):\n\nkey         type   value\ndevice-id   data   12040000\n\n\n\n\n# learning to patch with whatevergreen\n\nnow that we've gone over the basics of setting up an igpu, let's get into some deeper topics. we'll need to go over some prerequisites first:\n\n * lilu and whatevergreen are present under efi/oc/kexts and in your config.plist\n   * to verify if they loaded correctly in macos, run the below command(if nothing is outputted, the kexts are not loading)\n   * kextstat | grep -e \"lilu|whatevergreen\"\n * deviceproperties -> add -> pciroot(0x0)/pci(0x2,0x0) has been correctly setup\n   * refer to your specific generation in the config.plist section\n\nnow head forth into your framebuffer patching journey!:\n\n * patching the vram requirement of macos\n   * relevant for systems with locked bios and cannot increase the vram\n * patching the display type\n   * relevant for systems where you may get distorted colors on certain monitors\n * patching the display connections\n   * relevant for systems where certain display outputs do not work",charsets:{cjk:!0}},{title:"Patching Bus IDs",frontmatter:{},regularPath:"/gpu-patching/intel-patching/busid.html",relativePath:"gpu-patching/intel-patching/busid.md",key:"v-a6e8bdd4",path:"/gpu-patching/intel-patching/busid.html",headers:[{level:2,title:"Parsing the framebuffer",slug:"parsing-the-framebuffer",normalizedTitle:"parsing the framebuffer",charIndex:532},{level:2,title:"Mapping the video ports",slug:"mapping-the-video-ports",normalizedTitle:"mapping the video ports",charIndex:2436},{level:3,title:"Mapping within macOS",slug:"mapping-within-macos",normalizedTitle:"mapping within macos",charIndex:2490},{level:3,title:"Mapping without macOS",slug:"mapping-without-macos",normalizedTitle:"mapping without macos",charIndex:2565}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"Parsing the framebuffer Mapping the video ports Mapping within macOS Mapping without macOS",content:"# Patching Bus IDs\n\nThis section is mainly relevant for those who cannot use certain display outputs regardless of the connector-type or SMBIOS patch, as Apple has hardcoded the output BusIDs in a way that doesn't match your hardware. To resolve, we'll be manually patching these bus IDs into supporting our hardware.\n\nThis page will be a bit more technical as we've assumed you've read through the previous pages and have a decent grasp of WhateverGreen.\n\n * Patching the display type\n * Patching the VRAM requirement of macOS\n\n\n# Parsing the framebuffer\n\nTo start, let's assume we're using a Z390 board with a UHD 630. This system is iGPU-only in macOS and has issues with using certain display-outs, and is using the 0x3E9B0007 framebuffer.\n\nWhen we look at this framebuffer from WhateverGreen's manual, we see the following:\n\nID: 3E9B0007, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00801302\nTOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)\nGPU Name: Intel UHD Graphics 630\nModel Name(s):\nCamelia: Disabled\nMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3\n[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - DP\n[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - DP\n[3] busId: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003C7 - DP\n01050900 00040000 C7030000\n02040A00 00040000 C7030000\n03060800 00040000 C7030000\n\n\nNow let's parse it down to the BusID information, as this is what we will be patching:\n\n[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - DP\n[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - DP\n[3] busId: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003C7 - DP\n01050900 00040000 C7030000\n02040A00 00040000 C7030000\n03060800 00040000 C7030000\n\n\nHere we see that this framebuffer personality has 3 Bus IDs listed, let's try to break them down to be a bit more understandable. Let's take entry 1:\n\n[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - DP\n01050900 00040000 C7030000\n\n\nBIT        NAME             VALUE\nBit 1      Port             01\nBit 2      Bus ID           05\nBit 3-4    Pipe Number      0900\nBit 5-8    Connector Type   00040000\nBit 9-12   Flags            C7030000\n\nThings to keep in mind:\n\n * BusID is a unique value and cannot be used by multiple entries\n * Connector-type values are the same as discussed in the Connector-type patching page\n\n\n# Mapping the video ports\n\nHere we have 2 sections:\n\n * Mapping within macOS\n   * You can boot macOS and use at least 1 display\n * Mapping without macOS\n   * Blackscreen on all displays\n\n\n# Mapping within macOS\n\nMapping videos in macOS is fairly easy, as we can assume that one of our ports is mapped correctly in the framebuffer.\n\nFor this example, we'll explain the common HDMI-hotplug fix for Kaby lake users. To start, lets look at the 0x591B0000 framebuffer:\n\nID: 591B0000, STOLEN: 38 MB, FBMEM: 21 MB, VRAM: 1536 MB, Flags: 0x0000130B\nTOTAL STOLEN: 39 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 136 MB, MAX OVERALL: 137 MB (144191488 bytes)\nModel name: Intel HD Graphics KBL CRB\nCamellia: CamelliaDisabled (0), Freq: 1388 Hz, FreqMax: 1388 Hz\nMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3\n[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - ConnectorLVDS\n[2] busId: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - ConnectorHDMI\n[3] busId: 0x06, pipe: 10, type: 0x00000400, flags: 0x00000187 - ConnectorDP\n00000800 02000000 98000000\n02040A00 00080000 87010000\n03060A00 00040000 87010000\n\n\nHere we see that entry 2 is the HDMI port however on a real Kaby lake laptop it's very common for hot plug to kernel panic the machine. This is due to the bus ID and port not aligning perfectly with the hardware.\n\nTo resolve, we'll want to patch it to something more appropriate(ie. 0204 to 0105, these have been tested to work properly)\n\nThere are 2 ways to patch:\n\n * Replace the entire entry\n * Replace sections of the entry\n\n# Replace the entire entry\n\nTo replace the entire entry, we'll first want to locate our entry and ensure it's enumerated correctly. This is because Apple's has entries starting at 0 and progresses through that:\n\n * con0\n * con1\n * con2\n\nSo since entry 2 is the second in the list, we'll want to use con1:\n\n * framebuffer-con2-enable\n\nNext lets make the patch, we know that port needs to be patched to 01 and BusID changed to 05:\n\n * 01050A00 00080000 87010000\n\nAnd finally, we're given the following patches:\n\nframebuffer-patch-enable | Data | `01000000`\nframebuffer-con2-enable  | Data | `01000000`\nframebuffer-con2-alldata | Data | `01050A00 00080000 87010000`\n\n\n# Replace sections of the entry\n\nTo replace sections of the entry, we'll first want to locate our entry and ensure it's enumerated correctly. This is because Apple's has entries starting at 0 and progresses through that:\n\n * con0\n * con1\n * con2\n\nSo since entry 2 is the second in the list, we'll want to use con1:\n\n * framebuffer-con1-enable\n\nNext lets make the patch, we know that port needs to be patched to 01 and BusID changed to 05:\n\n * framebuffer-con2-index = 01\n * framebuffer-con2-busid = 05\n\nAnd finally, we get these patches:\n\nframebuffer-patch-enable | Data | `01000000`\nframebuffer-con2-enable  | Data | `01000000`\nframebuffer-con2-index   | Data | `01`\nframebuffer-con2-busid   | Data | `05`\n\n\n\n# Mapping without macOS\n\nMapping your display outs is fairly simple, however is quite time consuming as you need to try every BusID value until you get an output.\n\nFor this example, we'll use the 0x3E9B0007 framebuffer again.\n\n[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - DP\n[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - DP\n[3] busId: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003C7 - DP\n01050900 00040000 C7030000\n02040A00 00040000 C7030000\n03060800 00040000 C7030000\n\n\nTo start, we'll be trying to go through entry 1's BusIDs in hope we find working value.\n\n# 1. Here plug in your HDMI display\n\n# 2. Set Port 1 to the HDMI connector type\n\n * 01xx0900 00080000 C7030000\n\nSupported Connector Types\n\nCommon connector types supported in macOS\n\n<02 00 00 00>        LVDS and eDP      - Laptop displays\n<10 00 00 00>        VGA               - Unsupported in 10.8 and newer\n<00 04 00 00>        DisplayPort       - USB-C display-out are DP internally\n<01 00 00 00>        DUMMY             - Used when there is no physical port\n<00 08 00 00>        HDMI\n<80 00 00 00>        S-Video\n<04 00 00 00>        DVI (Dual Link)\n<00 02 00 00>        DVI (Single Link)\n\n\nReminder that VGA on Skylake and newer are actually DisplayPort internally, so use that connector type instead.\n\n# 3. Disable ports 2 and 3 with busid=00\n\n * 02000A00 00040000 C7030000\n * 03000800 00040000 C7030000\n\n# 4. Walk through busids for Port 1 if the previous didn't work. The maximum busid on most platforms generally 0x06\n\n * 01010900 00080000 C7030000\n * 01020900 00080000 C7030000\n * 01030900 00080000 C7030000\n * etc\n\nIf you still get no output, set port 1's busid to 00 and start going through busids for port 2 and so on\n\n * port 1 = 01000900 00040000 C7030000\n * port 2 = 02xx0A00 00080000 C7030000\n * port 3 = 03000800 00040000 C7030000\n\n# Adding to your config.plist\n\nYou'll now want to add the following patches to DeviceProperteies -> Add -> PciRoot(0x0)/Pci(0x2,0x0):\n\nframebuffer-patch-enable | Data | `01000000`\nframebuffer-con0-enable  | Data | `01000000`\nframebuffer-con1-enable  | Data | `01000000`\nframebuffer-con2-enable  | Data | `01000000`\nframebuffer-con0-alldata | Data | port 1 (ie. `01010900 00080000 C7030000`)\nframebuffer-con1-alldata | Data | port 2 (ie. `02000A00 00040000 C7030000`)\nframebuffer-con2-alldata | Data | port 3 (ie. `03000800 00040000 C7030000`)\n\n\nNote that:\n\n * port 1 would be labeled as con0\n * port 1's BusID is set to 01\n * port 2 and 3's BusID are set to 00, disabling them\n\nWhen done, you should get something similar:\n\n\n\nAnd as mentioned before, if this combo doesn't work, increment port 1's BusID and if that doesn't work disable port 1's busID and try port 2 and so forth.",normalizedContent:"# patching bus ids\n\nthis section is mainly relevant for those who cannot use certain display outputs regardless of the connector-type or smbios patch, as apple has hardcoded the output busids in a way that doesn't match your hardware. to resolve, we'll be manually patching these bus ids into supporting our hardware.\n\nthis page will be a bit more technical as we've assumed you've read through the previous pages and have a decent grasp of whatevergreen.\n\n * patching the display type\n * patching the vram requirement of macos\n\n\n# parsing the framebuffer\n\nto start, let's assume we're using a z390 board with a uhd 630. this system is igpu-only in macos and has issues with using certain display-outs, and is using the 0x3e9b0007 framebuffer.\n\nwhen we look at this framebuffer from whatevergreen's manual, we see the following:\n\nid: 3e9b0007, stolen: 57 mb, fbmem: 0 bytes, vram: 1536 mb, flags: 0x00801302\ntotal stolen: 58 mb, total cursor: 1 mb (1572864 bytes), max stolen: 172 mb, max overall: 173 mb (181940224 bytes)\ngpu name: intel uhd graphics 630\nmodel name(s):\ncamelia: disabled\nmobile: 0, pipecount: 3, portcount: 3, fbmemorycount: 3\n[1] busid: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003c7 - dp\n[2] busid: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003c7 - dp\n[3] busid: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003c7 - dp\n01050900 00040000 c7030000\n02040a00 00040000 c7030000\n03060800 00040000 c7030000\n\n\nnow let's parse it down to the busid information, as this is what we will be patching:\n\n[1] busid: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003c7 - dp\n[2] busid: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003c7 - dp\n[3] busid: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003c7 - dp\n01050900 00040000 c7030000\n02040a00 00040000 c7030000\n03060800 00040000 c7030000\n\n\nhere we see that this framebuffer personality has 3 bus ids listed, let's try to break them down to be a bit more understandable. let's take entry 1:\n\n[1] busid: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003c7 - dp\n01050900 00040000 c7030000\n\n\nbit        name             value\nbit 1      port             01\nbit 2      bus id           05\nbit 3-4    pipe number      0900\nbit 5-8    connector type   00040000\nbit 9-12   flags            c7030000\n\nthings to keep in mind:\n\n * busid is a unique value and cannot be used by multiple entries\n * connector-type values are the same as discussed in the connector-type patching page\n\n\n# mapping the video ports\n\nhere we have 2 sections:\n\n * mapping within macos\n   * you can boot macos and use at least 1 display\n * mapping without macos\n   * blackscreen on all displays\n\n\n# mapping within macos\n\nmapping videos in macos is fairly easy, as we can assume that one of our ports is mapped correctly in the framebuffer.\n\nfor this example, we'll explain the common hdmi-hotplug fix for kaby lake users. to start, lets look at the 0x591b0000 framebuffer:\n\nid: 591b0000, stolen: 38 mb, fbmem: 21 mb, vram: 1536 mb, flags: 0x0000130b\ntotal stolen: 39 mb, total cursor: 1 mb (1572864 bytes), max stolen: 136 mb, max overall: 137 mb (144191488 bytes)\nmodel name: intel hd graphics kbl crb\ncamellia: camelliadisabled (0), freq: 1388 hz, freqmax: 1388 hz\nmobile: 1, pipecount: 3, portcount: 3, fbmemorycount: 3\n[0] busid: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - connectorlvds\n[2] busid: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - connectorhdmi\n[3] busid: 0x06, pipe: 10, type: 0x00000400, flags: 0x00000187 - connectordp\n00000800 02000000 98000000\n02040a00 00080000 87010000\n03060a00 00040000 87010000\n\n\nhere we see that entry 2 is the hdmi port however on a real kaby lake laptop it's very common for hot plug to kernel panic the machine. this is due to the bus id and port not aligning perfectly with the hardware.\n\nto resolve, we'll want to patch it to something more appropriate(ie. 0204 to 0105, these have been tested to work properly)\n\nthere are 2 ways to patch:\n\n * replace the entire entry\n * replace sections of the entry\n\n# replace the entire entry\n\nto replace the entire entry, we'll first want to locate our entry and ensure it's enumerated correctly. this is because apple's has entries starting at 0 and progresses through that:\n\n * con0\n * con1\n * con2\n\nso since entry 2 is the second in the list, we'll want to use con1:\n\n * framebuffer-con2-enable\n\nnext lets make the patch, we know that port needs to be patched to 01 and busid changed to 05:\n\n * 01050a00 00080000 87010000\n\nand finally, we're given the following patches:\n\nframebuffer-patch-enable | data | `01000000`\nframebuffer-con2-enable  | data | `01000000`\nframebuffer-con2-alldata | data | `01050a00 00080000 87010000`\n\n\n# replace sections of the entry\n\nto replace sections of the entry, we'll first want to locate our entry and ensure it's enumerated correctly. this is because apple's has entries starting at 0 and progresses through that:\n\n * con0\n * con1\n * con2\n\nso since entry 2 is the second in the list, we'll want to use con1:\n\n * framebuffer-con1-enable\n\nnext lets make the patch, we know that port needs to be patched to 01 and busid changed to 05:\n\n * framebuffer-con2-index = 01\n * framebuffer-con2-busid = 05\n\nand finally, we get these patches:\n\nframebuffer-patch-enable | data | `01000000`\nframebuffer-con2-enable  | data | `01000000`\nframebuffer-con2-index   | data | `01`\nframebuffer-con2-busid   | data | `05`\n\n\n\n# mapping without macos\n\nmapping your display outs is fairly simple, however is quite time consuming as you need to try every busid value until you get an output.\n\nfor this example, we'll use the 0x3e9b0007 framebuffer again.\n\n[1] busid: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003c7 - dp\n[2] busid: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003c7 - dp\n[3] busid: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003c7 - dp\n01050900 00040000 c7030000\n02040a00 00040000 c7030000\n03060800 00040000 c7030000\n\n\nto start, we'll be trying to go through entry 1's busids in hope we find working value.\n\n# 1. here plug in your hdmi display\n\n# 2. set port 1 to the hdmi connector type\n\n * 01xx0900 00080000 c7030000\n\nsupported connector types\n\ncommon connector types supported in macos\n\n<02 00 00 00>        lvds and edp      - laptop displays\n<10 00 00 00>        vga               - unsupported in 10.8 and newer\n<00 04 00 00>        displayport       - usb-c display-out are dp internally\n<01 00 00 00>        dummy             - used when there is no physical port\n<00 08 00 00>        hdmi\n<80 00 00 00>        s-video\n<04 00 00 00>        dvi (dual link)\n<00 02 00 00>        dvi (single link)\n\n\nreminder that vga on skylake and newer are actually displayport internally, so use that connector type instead.\n\n# 3. disable ports 2 and 3 with busid=00\n\n * 02000a00 00040000 c7030000\n * 03000800 00040000 c7030000\n\n# 4. walk through busids for port 1 if the previous didn't work. the maximum busid on most platforms generally 0x06\n\n * 01010900 00080000 c7030000\n * 01020900 00080000 c7030000\n * 01030900 00080000 c7030000\n * etc\n\nif you still get no output, set port 1's busid to 00 and start going through busids for port 2 and so on\n\n * port 1 = 01000900 00040000 c7030000\n * port 2 = 02xx0a00 00080000 c7030000\n * port 3 = 03000800 00040000 c7030000\n\n# adding to your config.plist\n\nyou'll now want to add the following patches to deviceproperteies -> add -> pciroot(0x0)/pci(0x2,0x0):\n\nframebuffer-patch-enable | data | `01000000`\nframebuffer-con0-enable  | data | `01000000`\nframebuffer-con1-enable  | data | `01000000`\nframebuffer-con2-enable  | data | `01000000`\nframebuffer-con0-alldata | data | port 1 (ie. `01010900 00080000 c7030000`)\nframebuffer-con1-alldata | data | port 2 (ie. `02000a00 00040000 c7030000`)\nframebuffer-con2-alldata | data | port 3 (ie. `03000800 00040000 c7030000`)\n\n\nnote that:\n\n * port 1 would be labeled as con0\n * port 1's busid is set to 01\n * port 2 and 3's busid are set to 00, disabling them\n\nwhen done, you should get something similar:\n\n\n\nand as mentioned before, if this combo doesn't work, increment port 1's busid and if that doesn't work disable port 1's busid and try port 2 and so forth.",charsets:{cjk:!0}},{title:"Patching Connector Types",frontmatter:{},regularPath:"/gpu-patching/intel-patching/connector.html",relativePath:"gpu-patching/intel-patching/connector.md",key:"v-19adff54",path:"/gpu-patching/intel-patching/connector.html",lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:null,content:"# Patching Connector Types\n\n * Images and info based off CorpNewt's Vanilla Guide\n\nThis section is mainly relevant for users who either get black screen or incorrect color output on their displays(usually HDMI ports). This is due to Apple forcing display types onto your hardware,. To work around it, we'll patch Apple's connector types to properly respect our hardware.\n\nFor this example, let's take a UHD 630 system with an HDMI display attached. The machine has already been correctly setup however there's a Pink/Purple tint on the HDMI display.\n\nGrab a copy of IOReg and search for the iGPU entry:\n\n\n\nNext, clear out the entry so we can see the children of the iGPU device:\n\n\n\nAs we can see in the above screenshot, we have a few framebuffer entries listed. These are all display personalities present in the framebuffer personality, and all have their own settings.\n\nFor us, we care about the entries that have a display0 child, as this is what's driving a physical display. In this example, we can see it's AppleIntelFramebuffer@1. When we select it, you'll see in the left pane it has the property connector-type with the value <00 04 00 00>. And when we look to the below list:\n\n<02 00 00 00>        LVDS and eDP      - Laptop displays\n<10 00 00 00>        VGA               - Unsupported in 10.8 and newer\n<00 04 00 00>        DisplayPort       - USB-C display-out are DP internally\n<01 00 00 00>        DUMMY             - Used when there is no physical port\n<00 08 00 00>        HDMI\n<80 00 00 00>        S-Video\n<04 00 00 00>        DVI (Dual Link)\n<00 02 00 00>        DVI (Single Link)\n\n\n * Note: VGA on Skylake and newer are DisplayPorts internally and so are supported by macOS. Please use the DisplayPort connector for these systems.\n\nLooking closer, we see that the HDMI port was actually listed as a DisplayPort. This is where WhateverGreen's patching mechanisms come into play.\n\nSince the incorrect port was located at AppleIntelFramebuffer@1, this is port 1. Next we'll to enable WhateverGreen's patching mechanism for con1, and then set the connector type to HDMI. To do this, we set the following Properties under DeviceProperties -> Add -> PciRoot(0x0)/Pci(0x2,0x0):\n\n * framebuffer-patch-enable = 01000000\n   * Enables WhateverGreen's patching mechanism\n * framebuffer-conX-enable = 01000000\n   * Enables WhateverGreen's patching on conX\n * framebuffer-conX-type = 00080000\n   * Sets the port to HDMI(<00 08 00 00>)\n\nNote: Remember to replace the conX in both patches with con1 to reflect the port that we want fixed, then set the values as listed above.\n\n",normalizedContent:"# patching connector types\n\n * images and info based off corpnewt's vanilla guide\n\nthis section is mainly relevant for users who either get black screen or incorrect color output on their displays(usually hdmi ports). this is due to apple forcing display types onto your hardware,. to work around it, we'll patch apple's connector types to properly respect our hardware.\n\nfor this example, let's take a uhd 630 system with an hdmi display attached. the machine has already been correctly setup however there's a pink/purple tint on the hdmi display.\n\ngrab a copy of ioreg and search for the igpu entry:\n\n\n\nnext, clear out the entry so we can see the children of the igpu device:\n\n\n\nas we can see in the above screenshot, we have a few framebuffer entries listed. these are all display personalities present in the framebuffer personality, and all have their own settings.\n\nfor us, we care about the entries that have a display0 child, as this is what's driving a physical display. in this example, we can see it's appleintelframebuffer@1. when we select it, you'll see in the left pane it has the property connector-type with the value <00 04 00 00>. and when we look to the below list:\n\n<02 00 00 00>        lvds and edp      - laptop displays\n<10 00 00 00>        vga               - unsupported in 10.8 and newer\n<00 04 00 00>        displayport       - usb-c display-out are dp internally\n<01 00 00 00>        dummy             - used when there is no physical port\n<00 08 00 00>        hdmi\n<80 00 00 00>        s-video\n<04 00 00 00>        dvi (dual link)\n<00 02 00 00>        dvi (single link)\n\n\n * note: vga on skylake and newer are displayports internally and so are supported by macos. please use the displayport connector for these systems.\n\nlooking closer, we see that the hdmi port was actually listed as a displayport. this is where whatevergreen's patching mechanisms come into play.\n\nsince the incorrect port was located at appleintelframebuffer@1, this is port 1. next we'll to enable whatevergreen's patching mechanism for con1, and then set the connector type to hdmi. to do this, we set the following properties under deviceproperties -> add -> pciroot(0x0)/pci(0x2,0x0):\n\n * framebuffer-patch-enable = 01000000\n   * enables whatevergreen's patching mechanism\n * framebuffer-conx-enable = 01000000\n   * enables whatevergreen's patching on conx\n * framebuffer-conx-type = 00080000\n   * sets the port to hdmi(<00 08 00 00>)\n\nnote: remember to replace the conx in both patches with con1 to reflect the port that we want fixed, then set the values as listed above.\n\n",charsets:{}},{title:"Patching VRAM",frontmatter:{},regularPath:"/gpu-patching/intel-patching/vram.html",relativePath:"gpu-patching/intel-patching/vram.md",key:"v-28419f04",path:"/gpu-patching/intel-patching/vram.html",headers:[{level:2,title:"Creating our patch",slug:"creating-our-patch",normalizedTitle:"creating our patch",charIndex:2394},{level:2,title:"Applying our patch",slug:"applying-our-patch",normalizedTitle:"applying our patch",charIndex:3296}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"Creating our patch Applying our patch",content:"# Patching VRAM\n\nThis section is mainly relevant for users who cannot unlock their BIOS to increase the allocated VRAM for their iGPU which results in a kernel panic in macOS. To work around this, we'll first want to identify the minimum amount of VRAM required for the framebuffer and then patch it to require less.\n\nFor this example, let's take a Haswell Lake Framebuffer that's commonly used on desktop Haswell iGPUs: 0x0D220003(0300220D when hex swapped)\n\nNow let's take a look at the corresponding information in WhateverGreen's manual(note you'll need to click \"Spoiler: Azul connectors\")\n\nID: 0D220003, STOLEN: 32 MB, FBMEM: 19 MB, VRAM: 1536 MB, Flags: 0x00000402\nTOTAL STOLEN: 52 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 116 MB, MAX OVERALL: 117 MB (123219968 bytes)\nCamellia: CamelliaDisabled (0), Freq: 5273 Hz, FreqMax: 5273 Hz\nMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3\n[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000087 - ConnectorDP\n[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000087 - ConnectorDP\n[3] busId: 0x06, pipe: 8, type: 0x00000400, flags: 0x00000011 - ConnectorDP\n01050900 00040000 87000000\n02040A00 00040000 87000000\n03060800 00040000 11000000\n\n\nHere what matters is the first 2 lines:\n\nID: 0D220003, STOLEN: 32 MB, FBMEM: 19 MB, VRAM: 1536 MB, Flags: 0x00000402\nTOTAL STOLEN: 52 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 116 MB, MAX OVERALL: 117 MB (123219968 bytes)\n\n\nHere the main entries we care about:\n\nENTRY          VALUE   COMMENT\nSTOLEN         32MB    Memory reserved for the iGPU\nFBMEM          19MB    Memory reserved for the framebuffer\nTOTAL CURSOR   1 MB    Memory reserved for cursor\nTOTAL STOLEN   52 MB   Combination of the above\n\nNow let's say for example your motherboard only allocates 32MB for the iGPU, this will be too little for what the framebuffer expects and so will most likely kernel panic when it tries to write into an area of memory that does not exist.\n\nThat's where WhateverGreen's patching capabilities come in, here we're able to set the exact amount of iGPU memory the framebuffer expects with the following properties:\n\nVALUE                      COMMENT\nframebuffer-patch-enable   This enables WhateverGreen's patching capabilities\nframebuffer-stolenmem      This sets the value used by STOLEN entry\nframebuffer-fbmem          This sets the value used by FBMEM entry\n\n\n# Creating our patch\n\nSo to lower this VRAM requirement, we'll want to set STOLEN to 19MB and FBMEM to 9MB. This will get us underneath the 32MB limit.\n\nTo do this, we run the following commands to covert 9MB:\n\n# Convert 9MB Megabytes to Bytes\necho '9 * 1024 * 1024' | bc\n 9437184\n\n# Convert from decimal to hexadecimal\necho 'obase=16; ibase=10; 9437184' | bc\n 900000\n\n# Hexswap so it can be injected correctly\n# ie. swap in pairs\n900000 -> 90 00 00 -> 00 00 90\n\n# Pad the value to 4 bytes with 00 at the end\n00 00 90 00\n\n\nAnd when we do this for both value, we get:\n\n * 19MB = 00 00 30 01\n * 9MB = 00 00 90 00\n\nAnd when we punch it into our WhateverGreen properties:\n\nKEY                        TYPE   VALUE\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\nframebuffer-fbmem          Data   00009000\n\n * For patch-enable, 01000000 simply refers to being enabled\n\n\n# Applying our patch\n\nNow with our patch made, head into your config.plist then under DeviceProperties -> Add -> PciRoot(0x0)/Pci(0x2,0x0) and add the properties:\n\n",normalizedContent:"# patching vram\n\nthis section is mainly relevant for users who cannot unlock their bios to increase the allocated vram for their igpu which results in a kernel panic in macos. to work around this, we'll first want to identify the minimum amount of vram required for the framebuffer and then patch it to require less.\n\nfor this example, let's take a haswell lake framebuffer that's commonly used on desktop haswell igpus: 0x0d220003(0300220d when hex swapped)\n\nnow let's take a look at the corresponding information in whatevergreen's manual(note you'll need to click \"spoiler: azul connectors\")\n\nid: 0d220003, stolen: 32 mb, fbmem: 19 mb, vram: 1536 mb, flags: 0x00000402\ntotal stolen: 52 mb, total cursor: 1 mb (1572864 bytes), max stolen: 116 mb, max overall: 117 mb (123219968 bytes)\ncamellia: camelliadisabled (0), freq: 5273 hz, freqmax: 5273 hz\nmobile: 0, pipecount: 3, portcount: 3, fbmemorycount: 3\n[1] busid: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000087 - connectordp\n[2] busid: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000087 - connectordp\n[3] busid: 0x06, pipe: 8, type: 0x00000400, flags: 0x00000011 - connectordp\n01050900 00040000 87000000\n02040a00 00040000 87000000\n03060800 00040000 11000000\n\n\nhere what matters is the first 2 lines:\n\nid: 0d220003, stolen: 32 mb, fbmem: 19 mb, vram: 1536 mb, flags: 0x00000402\ntotal stolen: 52 mb, total cursor: 1 mb (1572864 bytes), max stolen: 116 mb, max overall: 117 mb (123219968 bytes)\n\n\nhere the main entries we care about:\n\nentry          value   comment\nstolen         32mb    memory reserved for the igpu\nfbmem          19mb    memory reserved for the framebuffer\ntotal cursor   1 mb    memory reserved for cursor\ntotal stolen   52 mb   combination of the above\n\nnow let's say for example your motherboard only allocates 32mb for the igpu, this will be too little for what the framebuffer expects and so will most likely kernel panic when it tries to write into an area of memory that does not exist.\n\nthat's where whatevergreen's patching capabilities come in, here we're able to set the exact amount of igpu memory the framebuffer expects with the following properties:\n\nvalue                      comment\nframebuffer-patch-enable   this enables whatevergreen's patching capabilities\nframebuffer-stolenmem      this sets the value used by stolen entry\nframebuffer-fbmem          this sets the value used by fbmem entry\n\n\n# creating our patch\n\nso to lower this vram requirement, we'll want to set stolen to 19mb and fbmem to 9mb. this will get us underneath the 32mb limit.\n\nto do this, we run the following commands to covert 9mb:\n\n# convert 9mb megabytes to bytes\necho '9 * 1024 * 1024' | bc\n 9437184\n\n# convert from decimal to hexadecimal\necho 'obase=16; ibase=10; 9437184' | bc\n 900000\n\n# hexswap so it can be injected correctly\n# ie. swap in pairs\n900000 -> 90 00 00 -> 00 00 90\n\n# pad the value to 4 bytes with 00 at the end\n00 00 90 00\n\n\nand when we do this for both value, we get:\n\n * 19mb = 00 00 30 01\n * 9mb = 00 00 90 00\n\nand when we punch it into our whatevergreen properties:\n\nkey                        type   value\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\nframebuffer-fbmem          data   00009000\n\n * for patch-enable, 01000000 simply refers to being enabled\n\n\n# applying our patch\n\nnow with our patch made, head into your config.plist then under deviceproperties -> add -> pciroot(0x0)/pci(0x2,0x0) and add the properties:\n\n",charsets:{cjk:!0}},{title:"Legacy Intel Setup",frontmatter:{},regularPath:"/gpu-patching/legacy-intel/",relativePath:"gpu-patching/legacy-intel/README.md",key:"v-31cb4457",path:"/gpu-patching/legacy-intel/",headers:[{level:2,title:"Prerequisites",slug:"prerequisites",normalizedTitle:"prerequisites",charIndex:562},{level:2,title:"GMA 950 setup",slug:"gma-950-setup",normalizedTitle:"gma 950 setup",charIndex:1243},{level:3,title:"Property injection",slug:"property-injection",normalizedTitle:"property injection",charIndex:2519},{level:2,title:"GMA X3100 Setup",slug:"gma-x3100-setup",normalizedTitle:"gma x3100 setup",charIndex:1115},{level:3,title:"Property injection",slug:"property-injection-2",normalizedTitle:"property injection",charIndex:2519},{level:2,title:"Troubleshooting",slug:"troubleshooting",normalizedTitle:"troubleshooting",charIndex:1170},{level:3,title:"Dell laptops",slug:"dell-laptops",normalizedTitle:"dell laptops",charIndex:8119},{level:3,title:"Kernel Panic after 30 seconds",slug:"kernel-panic-after-30-seconds",normalizedTitle:"kernel panic after 30 seconds",charIndex:1209}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"Prerequisites GMA 950 setup Property injection GMA X3100 Setup Property injection Troubleshooting Dell laptops Kernel Panic after 30 seconds",content:"# Legacy Intel Setup\n\nCovers support for the following GPU models:\n\n * GMA 900 (10.4 and 10.5)\n   * Partial support in 10.6 and 10.7, however acceleration issues are common\n * GMA 950(10.4-10.7)\n   * GMA 3150's can be spoofed for support, however proper acceleration is missing\n * GMA X3100(10.5-10.7)\n   * Note only mobile models(ie. 965 Express Chipset Family)\n\nPlease note this page is more of an info dump, we won't be going to too great of detail on setup though we plan to expand this page more for it. Information is based off of Clover's InjectIntel\n\n\n# Prerequisites\n\nUnfortunately GMA support is a bit more complicated with PCs, and because of this we need to force a 32-Bit kernelspace as the 64-Bit GMA drivers are known for weird GPU corruption and sleep issues. To do this:\n\n * Ensure all your kexts are either 32-Bit or FAT\n   * Run lipo -archs on the kext's binary to verify\n   * Common kexts are hosted here: Legacy-Kexts\n * Ensure you're booting a 32-Bit kernel\n   * Set Kernel -> Scheme -> KernelArch to i386\n\nNow we can proceed to setup:\n\n * GMA 950 Setup\n   * Supports GMA 900, 950 and 3150\n * GMA X3100 Setup\n   * Only supports mobile GMA X3100\n * Troubleshooting\n   * Dell Laptops\n   * Kernel Panic after 30 seconds\n\n\n# GMA 950 setup\n\n * Supported OSes: 10.4-10.7\n\nThis section is mainly relevant for GMA 900 and 950 users, and partial support for the GMA 3150 series. Note that GMA 900 are only properly supported in 10.4 and 10.5\n\nWithin AppleIntelGMA950.kext's Info.plist, the following Device IDs are supported:\n\n# Values pulled from OS X 10.7.0\n0x2582 - GMA 900 - Grantsdale - 945GM/GMS/940GML\n0x2592 - GMA 900 - Alviso     - 945G\n0x2772 - GMA 950 - Lakeport   - 915GM/GMS/910GML\n0x27A2 - GMA 950 - Calistoga  - 82915G/GV/910GL\n\n\nIf your iGPU is from one of the above families, but the device ID is not present you can easily add a fake device-id:\n\n# GMA 950(Calistoga) Fake ID\nconfig.plist:\n|-DeviceProperties\n |- Add\n  |- PciRoot(0x0)/Pci(0x2,0x0)\n   |- device-id | Data | A2270000\n\n\nFor a full list of supported GPU families, see below:\n\nGMA Device families\n\nFollowing pulled from Clover's GMA.c:\n\n# Grantsdale\n0x2582 - GMA 900 - 945GM/GMS/940GML\n0x258A - GMA 900 - E7221\n0x2782 - GMA 900 - 82915G\n\n# Alviso\n0x2592 - GMA 900 - 915GM/GMS/910GML\n0x2792 - GMA 900 - 915GM/GMS/910GML\n\n# Lakeport\n0x2772 - GMA 950 - 915GM/GMS/910GML\n0x2776 - GMA 950 - 915GM/GMS/910GML\n\n# Calistoga\n0x27A2 - GMA 950 - 82915G/GV/910GL\n0x27A6 - GMA 950 - 945GM/GMS/GME, 943/940GML\n0x27AE - GMA 950 - 945GSE\n\n\n\n# Property injection\n\nTo ensure proper acceleration with OpenCore, head to your config.plist then DeviceProperties -> Add. Create a new child called PciRoot(0x0)/Pci(0x2,0x0) and we'll be adding our needed properties:\n\nDesktops need very little properties, and most of the time can boot without any:\n\n * Desktop:\n\n| model         | String | GMA 950  | // Mainly cosmetic\n| AAPL,HasPanel | Data   | 00000000 |\n\n\n * Laptop:\n\n| model                     | String | GMA 950  | // Mainly cosmetic\n| AAPL,HasPanel             |  Data  | 01000000 |\n| AAPL01,BacklightIntensity |  Data  | 3F000008 |\n| AAPL01,BootDisplay        |  Data  | 01000000 |\n| AAPL01,DataJustify        |  Data  | 01000000 |\n| AAPL01,DualLink           |  Data  | 00       |\n\n* Set AAPL01,DualLink to 01 if your internal display is higher than 1366x768\n\n\nFor a full list of what Clover injects, see below:\n\nClover's InjectIntel Properties\n\nThe below properties is what Clover will inject for GMA 900/950 series iGPUs:\n\n| built-in                  | Data | 01       |\n| AAPL,HasPanel             | Data | 01000000 |\n| AAPL01,BacklightIntensity | Data | 3F000008 |\n| AAPL01,BootDisplay        | Data | 01000000 |\n| AAPL01,DataJustify        | Data | 01000000 |\n| AAPL01,Dither             | Data | 00000000 |\n| AAPL01,Interlace          | Data | 00000000 |\n| AAPL01,Inverter           | Data | 00000000 |\n| AAPL01,InverterCurrent    | Data | 00000000 |\n| AAPL01,LinkFormat         | Data | 00000000 |\n| AAPL01,LinkType           | Data | 00000000 |\n| AAPL01,Pipe               | Data | 01000000 |\n| AAPL01,Refresh            | Data | 3B000000 |\n| AAPL01,Stretch            | Data | 00000000 |\n| AAPL01,T1                 | Data | 00000000 |\n| AAPL01,T2                 | Data | 01000000 |\n| AAPL01,T3                 | Data | C8000000 |\n| AAPL01,T4                 | Data | C8010000 |\n| AAPL01,T5                 | Data | 01000000 |\n| AAPL01,T6                 | Data | 00000000 |\n| AAPL01,T7                 | Data | 90100000 |\n\n\nFor GMA 3150 users, you'll also want to add this patch:\n\nGMA 3150 Patch\n\nUnder Kernel -> Patch, add the following:\n\nComment    = GMA 3150 Cursor corruption fix\nEnabled    = True\nIdentifier = com.apple.driver.AppleIntelIntegratedFramebuffer\nFind       = 8b550883bab0000000017e36890424e832bbffff\nReplace    = b800000002909090909090909090eb0400000000\nMaxKernel  = 11.99.99\nMinKernel  = 8.00.00\n\n\nSource: GMA.c\n\n\n# GMA X3100 Setup\n\n * Supported OSes: 10.5-10.7\n\nWithin AppleIntelGMAX3100.kext's Info.plist, the following Device IDs are supported:\n\n# Values pulled from OS X 10.7.0\n0x2a02 - GMA X3100 - Crestline - GM965/GL960\n\n\nIf your iGPU is from the Crestline family, however the device ID is not present you can easily add a fake device-id:\n\n# GMA X3100(Crestline) Fake ID\nconfig.plist:\n|-DeviceProperties\n |- Add\n  |- PciRoot(0x0)/Pci(0x2,0x0)\n   |- device-id | Data | 022A0000\n\n\nFor a full list of supported GPU families, see below:\n\nGMA Device families\n\nFollowing pulled from Clover's GMA.c:\n\n# Calistoga\n0x2A02 - GMA X3100 - GM965/GL960\n0x2A03 - GMA X3100 - GM965/GL960\n0x2A12 - GMA X3100 - GME965/GLE960\n0x2A13 - GMA X3100 - GME965/GLE960\n\n\n\n# Property injection\n\nTo ensure proper acceleration with OpenCore, head to your config.plist then DeviceProperties -> Add. Create a new child called PciRoot(0x0)/Pci(0x2,0x0) and we'll be adding our needed properties:\n\nX3100 need very little properties, and most of the time can boot without any:\n\n| model                     | String | GMA X3100 | // Mainly cosmetic\n| AAPL,HasPanel             |  Data  | 01000000  |\n| AAPL,SelfRefreshSupported |  Data  | 01000000  | // Optional\n| AAPL,aux-power-connected  |  Data  | 01000000  | // Optional\n| AAPL,backlight-control    |  Data  | 01000008  | // Optional\n| AAPL01,BacklightIntensity |  Data  | 38000008  |\n| AAPL01,BootDisplay        |  Data  | 01000000  |\n| AAPL01,DataJustify        |  Data  | 01000000  |\n| AAPL01,DualLink           |  Data  | 00        |\n\n* Set AAPL01,DualLink to 01 if your internal display is higher than 1366x768\n\n\nFor a full list of what Clover injects, see below:\n\nClover's InjectIntel Properties\n\nThe below properties is what Clover will inject for GMA 900/950 series iGPUs:\n\n| built-in                       | Data | 01       |\n| AAPL,HasPanel                  | Data | 01000000 |\n| AAPL,SelfRefreshSupported      | Data | 01000000 |\n| AAPL,aux-power-connected       | Data | 01000000 |\n| AAPL,backlight-control         | Data | 01000008 |\n| AAPL00,blackscreen-preferences | Data | 00000008 |\n| AAPL01,BootDisplay             | Data | 01000000 |\n| AAPL01,BacklightIntensity      | Data | 38000008 |\n| AAPL01,blackscreen-preferences | Data | 00000000 |\n| AAPL01,DataJustify             | Data | 01000000 |\n| AAPL01,Dither                  | Data | 00000000 |\n| AAPL01,Interlace               | Data | 00000000 |\n| AAPL01,Inverter                | Data | 00000000 |\n| AAPL01,InverterCurrent         | Data | 08520000 |\n| AAPL01,LinkFormat              | Data | 00000000 |\n| AAPL01,LinkType                | Data | 00000000 |\n| AAPL01,Pipe                    | Data | 01000000 |\n| AAPL01,Refresh                 | Data | 3D000000 |\n| AAPL01,Stretch                 | Data | 00000000 |\n| AAPL01,T1                      | Data | 00000000 |\n| AAPL01,T2                      | Data | 01000000 |\n| AAPL01,T3                      | Data | C8000000 |\n| AAPL01,T4                      | Data | C8010000 |\n| AAPL01,T5                      | Data | 01000000 |\n| AAPL01,T6                      | Data | 00000000 |\n| AAPL01,T7                      | Data | 90100000 |\n\n\n\n# Troubleshooting\n\n\n# Dell laptops\n\nAn annoying issues with Dell laptops using GMA iGPUs is that they commonly get blackscreen during boot. This is due to the DVI device in ACPI, so we'll need to patch it to play nicely in macOS.\n\nExample SSDT:\n\nDefinitionBlock (\"\", \"SSDT\", 2, \"DRTNIA\", \"SsdtDvi\", 0x00001000)\n{\n    External (_SB_.PCI0.SBRG.GFX0.DVI_, DeviceObj)\n\n    Scope (\\_SB.PCI0.SBRG.GFX0.DVI)\n    {\n        Method (_STA, 0, NotSerialized)  // _STA: Status\n        {\n            If (_OSI (\"Darwin\"))\n            {\n                Return (0)\n            }\n            Else\n            {\n                Return (0x0F)\n            }\n        }\n    }\n\n\n\n# Kernel Panic after 30 seconds\n\nAnother odd issues with 10.6 and older is that the PciRoot's _UID value must be Zero else the kernel panic will happen. Example of bad UID entry:\n\nDevice (PCI0)  {\n Name (_HID, EisaId (\"PNP0A08\")) // Use PNP0A08 to find your PciRoot\n Name (_CID, EisaId (\"PNP0A03\"))\n Name (_ADR, One)\n Name (_UID, Zero)               // Needs to be patched to Zero\n",normalizedContent:"# legacy intel setup\n\ncovers support for the following gpu models:\n\n * gma 900 (10.4 and 10.5)\n   * partial support in 10.6 and 10.7, however acceleration issues are common\n * gma 950(10.4-10.7)\n   * gma 3150's can be spoofed for support, however proper acceleration is missing\n * gma x3100(10.5-10.7)\n   * note only mobile models(ie. 965 express chipset family)\n\nplease note this page is more of an info dump, we won't be going to too great of detail on setup though we plan to expand this page more for it. information is based off of clover's injectintel\n\n\n# prerequisites\n\nunfortunately gma support is a bit more complicated with pcs, and because of this we need to force a 32-bit kernelspace as the 64-bit gma drivers are known for weird gpu corruption and sleep issues. to do this:\n\n * ensure all your kexts are either 32-bit or fat\n   * run lipo -archs on the kext's binary to verify\n   * common kexts are hosted here: legacy-kexts\n * ensure you're booting a 32-bit kernel\n   * set kernel -> scheme -> kernelarch to i386\n\nnow we can proceed to setup:\n\n * gma 950 setup\n   * supports gma 900, 950 and 3150\n * gma x3100 setup\n   * only supports mobile gma x3100\n * troubleshooting\n   * dell laptops\n   * kernel panic after 30 seconds\n\n\n# gma 950 setup\n\n * supported oses: 10.4-10.7\n\nthis section is mainly relevant for gma 900 and 950 users, and partial support for the gma 3150 series. note that gma 900 are only properly supported in 10.4 and 10.5\n\nwithin appleintelgma950.kext's info.plist, the following device ids are supported:\n\n# values pulled from os x 10.7.0\n0x2582 - gma 900 - grantsdale - 945gm/gms/940gml\n0x2592 - gma 900 - alviso     - 945g\n0x2772 - gma 950 - lakeport   - 915gm/gms/910gml\n0x27a2 - gma 950 - calistoga  - 82915g/gv/910gl\n\n\nif your igpu is from one of the above families, but the device id is not present you can easily add a fake device-id:\n\n# gma 950(calistoga) fake id\nconfig.plist:\n|-deviceproperties\n |- add\n  |- pciroot(0x0)/pci(0x2,0x0)\n   |- device-id | data | a2270000\n\n\nfor a full list of supported gpu families, see below:\n\ngma device families\n\nfollowing pulled from clover's gma.c:\n\n# grantsdale\n0x2582 - gma 900 - 945gm/gms/940gml\n0x258a - gma 900 - e7221\n0x2782 - gma 900 - 82915g\n\n# alviso\n0x2592 - gma 900 - 915gm/gms/910gml\n0x2792 - gma 900 - 915gm/gms/910gml\n\n# lakeport\n0x2772 - gma 950 - 915gm/gms/910gml\n0x2776 - gma 950 - 915gm/gms/910gml\n\n# calistoga\n0x27a2 - gma 950 - 82915g/gv/910gl\n0x27a6 - gma 950 - 945gm/gms/gme, 943/940gml\n0x27ae - gma 950 - 945gse\n\n\n\n# property injection\n\nto ensure proper acceleration with opencore, head to your config.plist then deviceproperties -> add. create a new child called pciroot(0x0)/pci(0x2,0x0) and we'll be adding our needed properties:\n\ndesktops need very little properties, and most of the time can boot without any:\n\n * desktop:\n\n| model         | string | gma 950  | // mainly cosmetic\n| aapl,haspanel | data   | 00000000 |\n\n\n * laptop:\n\n| model                     | string | gma 950  | // mainly cosmetic\n| aapl,haspanel             |  data  | 01000000 |\n| aapl01,backlightintensity |  data  | 3f000008 |\n| aapl01,bootdisplay        |  data  | 01000000 |\n| aapl01,datajustify        |  data  | 01000000 |\n| aapl01,duallink           |  data  | 00       |\n\n* set aapl01,duallink to 01 if your internal display is higher than 1366x768\n\n\nfor a full list of what clover injects, see below:\n\nclover's injectintel properties\n\nthe below properties is what clover will inject for gma 900/950 series igpus:\n\n| built-in                  | data | 01       |\n| aapl,haspanel             | data | 01000000 |\n| aapl01,backlightintensity | data | 3f000008 |\n| aapl01,bootdisplay        | data | 01000000 |\n| aapl01,datajustify        | data | 01000000 |\n| aapl01,dither             | data | 00000000 |\n| aapl01,interlace          | data | 00000000 |\n| aapl01,inverter           | data | 00000000 |\n| aapl01,invertercurrent    | data | 00000000 |\n| aapl01,linkformat         | data | 00000000 |\n| aapl01,linktype           | data | 00000000 |\n| aapl01,pipe               | data | 01000000 |\n| aapl01,refresh            | data | 3b000000 |\n| aapl01,stretch            | data | 00000000 |\n| aapl01,t1                 | data | 00000000 |\n| aapl01,t2                 | data | 01000000 |\n| aapl01,t3                 | data | c8000000 |\n| aapl01,t4                 | data | c8010000 |\n| aapl01,t5                 | data | 01000000 |\n| aapl01,t6                 | data | 00000000 |\n| aapl01,t7                 | data | 90100000 |\n\n\nfor gma 3150 users, you'll also want to add this patch:\n\ngma 3150 patch\n\nunder kernel -> patch, add the following:\n\ncomment    = gma 3150 cursor corruption fix\nenabled    = true\nidentifier = com.apple.driver.appleintelintegratedframebuffer\nfind       = 8b550883bab0000000017e36890424e832bbffff\nreplace    = b800000002909090909090909090eb0400000000\nmaxkernel  = 11.99.99\nminkernel  = 8.00.00\n\n\nsource: gma.c\n\n\n# gma x3100 setup\n\n * supported oses: 10.5-10.7\n\nwithin appleintelgmax3100.kext's info.plist, the following device ids are supported:\n\n# values pulled from os x 10.7.0\n0x2a02 - gma x3100 - crestline - gm965/gl960\n\n\nif your igpu is from the crestline family, however the device id is not present you can easily add a fake device-id:\n\n# gma x3100(crestline) fake id\nconfig.plist:\n|-deviceproperties\n |- add\n  |- pciroot(0x0)/pci(0x2,0x0)\n   |- device-id | data | 022a0000\n\n\nfor a full list of supported gpu families, see below:\n\ngma device families\n\nfollowing pulled from clover's gma.c:\n\n# calistoga\n0x2a02 - gma x3100 - gm965/gl960\n0x2a03 - gma x3100 - gm965/gl960\n0x2a12 - gma x3100 - gme965/gle960\n0x2a13 - gma x3100 - gme965/gle960\n\n\n\n# property injection\n\nto ensure proper acceleration with opencore, head to your config.plist then deviceproperties -> add. create a new child called pciroot(0x0)/pci(0x2,0x0) and we'll be adding our needed properties:\n\nx3100 need very little properties, and most of the time can boot without any:\n\n| model                     | string | gma x3100 | // mainly cosmetic\n| aapl,haspanel             |  data  | 01000000  |\n| aapl,selfrefreshsupported |  data  | 01000000  | // optional\n| aapl,aux-power-connected  |  data  | 01000000  | // optional\n| aapl,backlight-control    |  data  | 01000008  | // optional\n| aapl01,backlightintensity |  data  | 38000008  |\n| aapl01,bootdisplay        |  data  | 01000000  |\n| aapl01,datajustify        |  data  | 01000000  |\n| aapl01,duallink           |  data  | 00        |\n\n* set aapl01,duallink to 01 if your internal display is higher than 1366x768\n\n\nfor a full list of what clover injects, see below:\n\nclover's injectintel properties\n\nthe below properties is what clover will inject for gma 900/950 series igpus:\n\n| built-in                       | data | 01       |\n| aapl,haspanel                  | data | 01000000 |\n| aapl,selfrefreshsupported      | data | 01000000 |\n| aapl,aux-power-connected       | data | 01000000 |\n| aapl,backlight-control         | data | 01000008 |\n| aapl00,blackscreen-preferences | data | 00000008 |\n| aapl01,bootdisplay             | data | 01000000 |\n| aapl01,backlightintensity      | data | 38000008 |\n| aapl01,blackscreen-preferences | data | 00000000 |\n| aapl01,datajustify             | data | 01000000 |\n| aapl01,dither                  | data | 00000000 |\n| aapl01,interlace               | data | 00000000 |\n| aapl01,inverter                | data | 00000000 |\n| aapl01,invertercurrent         | data | 08520000 |\n| aapl01,linkformat              | data | 00000000 |\n| aapl01,linktype                | data | 00000000 |\n| aapl01,pipe                    | data | 01000000 |\n| aapl01,refresh                 | data | 3d000000 |\n| aapl01,stretch                 | data | 00000000 |\n| aapl01,t1                      | data | 00000000 |\n| aapl01,t2                      | data | 01000000 |\n| aapl01,t3                      | data | c8000000 |\n| aapl01,t4                      | data | c8010000 |\n| aapl01,t5                      | data | 01000000 |\n| aapl01,t6                      | data | 00000000 |\n| aapl01,t7                      | data | 90100000 |\n\n\n\n# troubleshooting\n\n\n# dell laptops\n\nan annoying issues with dell laptops using gma igpus is that they commonly get blackscreen during boot. this is due to the dvi device in acpi, so we'll need to patch it to play nicely in macos.\n\nexample ssdt:\n\ndefinitionblock (\"\", \"ssdt\", 2, \"drtnia\", \"ssdtdvi\", 0x00001000)\n{\n    external (_sb_.pci0.sbrg.gfx0.dvi_, deviceobj)\n\n    scope (\\_sb.pci0.sbrg.gfx0.dvi)\n    {\n        method (_sta, 0, notserialized)  // _sta: status\n        {\n            if (_osi (\"darwin\"))\n            {\n                return (0)\n            }\n            else\n            {\n                return (0x0f)\n            }\n        }\n    }\n\n\n\n# kernel panic after 30 seconds\n\nanother odd issues with 10.6 and older is that the pciroot's _uid value must be zero else the kernel panic will happen. example of bad uid entry:\n\ndevice (pci0)  {\n name (_hid, eisaid (\"pnp0a08\")) // use pnp0a08 to find your pciroot\n name (_cid, eisaid (\"pnp0a03\"))\n name (_adr, one)\n name (_uid, zero)               // needs to be patched to zero\n",charsets:{cjk:!0}},{title:"Legacy Nvidia Patching",frontmatter:{},regularPath:"/gpu-patching/nvidia-patching/",relativePath:"gpu-patching/nvidia-patching/README.md",key:"v-2004cd75",path:"/gpu-patching/nvidia-patching/",headers:[{level:3,title:"Finding the GPU pathing",slug:"finding-the-gpu-pathing",normalizedTitle:"finding the gpu pathing",charIndex:728},{level:3,title:"Building our DeviceProperties",slug:"building-our-deviceproperties",normalizedTitle:"building our deviceproperties",charIndex:1135},{level:3,title:"model",slug:"model",normalizedTitle:"model",charIndex:1372},{level:3,title:"VRAM,totalsize",slug:"vram-totalsize",normalizedTitle:"vram,totalsize",charIndex:1551},{level:3,title:"rom-revision",slug:"rom-revision",normalizedTitle:"rom-revision",charIndex:1630},{level:3,title:"NVCAP",slug:"nvcap",normalizedTitle:"nvcap",charIndex:1749},{level:3,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:6885}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"Finding the GPU pathing Building our DeviceProperties model VRAM,totalsize rom-revision NVCAP Cleaning up",content:"# Legacy Nvidia Patching\n\n * Please note this page is more of an info dump, we won't be going to too great of detail on setup though we plan to expand this page more for it.\n\nWith legacy Nvidia GPUs, macOS has difficulties enabling acceleration due to many missing properties. To work around this, we can inject properties into IOService for macOS to easily interpret.\n\nTo start off, we'll be assuming the following:\n\n * macOS has already been installed in some way\n   * We need macOS installed to determine certain properties\n * Your GPU is either Fermi or older\n   * Kepler and newer do not need Device Property injection\n * Lilu and WhateverGreen are loaded\n   * verify by running kextstat | grep -E \"Lilu|WhateverGreen\"\n\n\n# Finding the GPU pathing\n\nFirst lets grab gfxutil and run the following:\n\npath/to/gfxutil -f display\n\n\nThis should spit out something like the following:\n\n67:00.0 10DE:0A20 /PC02@0/BR2A@0/GFX0@0/ = PciRoot(0x2)/Pci(0x0,0x0)/Pci(0x0,0x0)\n\n\nWhat we care about is the PciRoot section, as this is where our GPU is located and where we'll be injecting our properties:\n\nPciRoot(0x2)/Pci(0x0,0x0)/Pci(0x0,0x0)\n\n\n\n# Building our DeviceProperties\n\nWith Nvidia GPUs, there's actually not too many properties required for setup. The main ones that are recommended are the following:\n\nPROPERTY         VALUE                                          COMMENT\nmodel            ex. GeForce GT 220                             GPU model name, cosmetic\ndevice_type      NVDA,Parent                                    Always set as NVDA,Parent\nVRAM,totalsize   ex. 0000004000000000                           Sets VRAM size\nrom-revision     Dortania                                       Property must exist, however the value can be anything\nNVCAP            ex. 0500000000000F00000000000000000F00000000   sets display properties used by macOS, more info below\n@0,compatible    NVDA,NVMac                                     Always set as NVDA,NVMac\n@0,device_type   display                                        Always set as display\n@0,name          NVDA,Display-A                                 Always set as NVDA,Display-A\n@1,compatible    NVDA,NVMac                                     Always set as NVDA,NVMac\n@1,device_type   display                                        Always set as display\n@1,name          NVDA,Display-B                                 Always set as NVDA,Display-B\n\nAnd to calculate the properties few properties:\n\n * model\n * VRAM,totalsize\n * rom-revision\n * NVCAP\n\n\n# model\n\nTechnically cosmetic, however macOS expects this entry so we'll provide it. The format is as follows:\n\nGeForce [Device Name]\n# Example\nGeForce GT 220\n\n\n\n# VRAM,totalsize\n\nAmount of VRAM present on your card, in hexadecimal.\n\nFor this example, lets convert 1024MB to hexadecimal:\n\n# Convert 1024MB Megabytes to Bytes\necho '1024 * 1024 * 1024' | bc\n 1073741824\n\n# Convert from decimal to hexadecimal\necho 'obase=16; ibase=10; 1073741824' | bc\n 40000000\n\n# Hexswap so it can be injected correctly\n# ie. swap in pairs\n40000000 -> 40 00 00 00 -> 00 00 00 40\n\n# Pad the value to 8 bytes with 00 at the end\n00 00 00 40 00 00 00 00\n\n# And you're done\nVRAM,totalsize = 0000004000000000\n\n\n\n# rom-revision\n\nSimply can be any value, however the property must exist as some GPUs fail to initialize without it(ex. GT 220's)\n\nrom-revision = Dortania\n\n\n\n# NVCAP\n\nThis is where the fun comes it, as we'll now need to calculate the NVCAP value. Thankfully for us, 1Revenger1 has created a tool to automate the process: NVCAP Calculator\n\nTo use this program, simply grab your VBIOS(TechPowerUp hosts most VBIOS) and run NVCAP-Calculator within your terminal.\n\nOnce its running, you should see the following:\n\n\n\nGive it your VBIOS and then press enter. Once it takes you to the main menu, select option 2 to take you to the NVCAP calculation page.\n\n\n\nHere you can see the connectors that NVCAP-Calculator was able to find. Each Display may represent multiple DCB Entries, such as DVI (normally represented as two entries) or duplicate DCB entries. The goal here is to assign each display to a head. Each head can only output to one display at a time. For example, if your using 2 DVI ports, each should be on their own head to have proper dual monitor support.\n\nNote that some displays may be assigned automatically. An LVDS display will be put on it's own head automatically, and TV displays will be put on the TV head automatically.\n\nTo start assigning displays, press 1. To assign a display to a head, you type the number of the display then the number of the head. For example, typing in 1 1 results in:\n\n\n\nYou can type in 1 1 again to remove the display from the head. Once you are done assigning displays, it should look something like this:\n\n\n\nOnce you are done setting up the displays, press q to return to the other NVCAP settings. You should set the rest of the NVCAP settings as follows:\n\nNVCAP VALUE                    DETAILS                                                EXAMPLE COMMAND\nVersion                        04 for 7 series and older, 05 for 8 series and newer   3 then 4\nComposite                      01 for S-Video, 00 otherwise                           4 to toggle\nScript based Power/Backlight   00 ony useful for genuine MacBook Pros                 3 to toggle\nField F (Unknown)              0F for 300 series and newer, otherwise 07              6 then 0x0f\n\nOnce done, enter in c to calculate the NVCAP value\n\n\n\nYou now have your NVCAP value!\n\nNVCAP: \n05000000 00000300 0c000000 0000000f 00000000\n\n\nFor those who are wanting a break down on how to calculate the NVCAP value:\n\nNVCAP Table\n\nInfo based off of WhateverGreen's NVCAP.bt file\n\nNVCAP BIT     NAME                           COMMENT\nByte 1        NVCAP Version                  04 for 7 series and older, 05 for 8 series and newer\nByte 2        Laptop with Lid                01 for true, 00 otherwise\nByte 3        Composite                      01 for S-Video, 00 otherwise\nByte 4        Backlight                      01 for Tesla V1 with Backlight, otherwise 00 for newer GPUs\n                                             regardless of screen type\nBytes 5+6     TVDCBMask                      00 00, relates to DCB entry 5\nBytes 7+8     Head0DCBMask                   00 00, see below\nBytes 9+10    Head1DCBMask                   00 00, see below\nBytes 11+12   Head2DCBMask                   00 00, non-applicable for Fermi and older\nBytes 13+14   Head3DCBMask                   00 00, non-applicable for Fermi and older\nByte 15       ScriptBasedPowerAndBacklight   00, only relevant for genuine MacBook Pros\nByte 16       Unknown                        0F for 300 series and newer, otherwise 07\nByte 17       EDID                           00\nByte 18       Reserved                       00\nByte 19       Reserved                       00\nByte 20       Reserved                       00\n\n\n# Cleaning up\n\nNow that we've gotten all our properties, we can now add em up and place them in our config.plist:\n\nPciRoot(0x2)/Pci(0x0,0x0)/Pci(0x0,0x0)\n\nmodel          | String | GeForce GT 220\ndevice_type    | String | NVDA,Parent\nVRAM,totalsize |  Data  | 0000004000000000\nrom-revision   | String | Dortania\nNVCAP          |  Data  | 05000000 00000300 0c000000 0000000f 00000000\n@0,compatible  | String | NVDA,NVMac\n@0,device_type | String | display\n@0,name        | String | NVDA,Display-A\n@1,compatible  | String | NVDA,NVMac\n@1,device_type | String | display\n@1,name        | String | NVDA,Display-B\n\n\nOpen your config.plist and head to DeviceProperties -> Add, next create a new child with the name of your GPU's path(ie the one with gfxutil). Then, finally add the properties as children to the PciRoot. You should end up with something similar:\n\n",normalizedContent:"# legacy nvidia patching\n\n * please note this page is more of an info dump, we won't be going to too great of detail on setup though we plan to expand this page more for it.\n\nwith legacy nvidia gpus, macos has difficulties enabling acceleration due to many missing properties. to work around this, we can inject properties into ioservice for macos to easily interpret.\n\nto start off, we'll be assuming the following:\n\n * macos has already been installed in some way\n   * we need macos installed to determine certain properties\n * your gpu is either fermi or older\n   * kepler and newer do not need device property injection\n * lilu and whatevergreen are loaded\n   * verify by running kextstat | grep -e \"lilu|whatevergreen\"\n\n\n# finding the gpu pathing\n\nfirst lets grab gfxutil and run the following:\n\npath/to/gfxutil -f display\n\n\nthis should spit out something like the following:\n\n67:00.0 10de:0a20 /pc02@0/br2a@0/gfx0@0/ = pciroot(0x2)/pci(0x0,0x0)/pci(0x0,0x0)\n\n\nwhat we care about is the pciroot section, as this is where our gpu is located and where we'll be injecting our properties:\n\npciroot(0x2)/pci(0x0,0x0)/pci(0x0,0x0)\n\n\n\n# building our deviceproperties\n\nwith nvidia gpus, there's actually not too many properties required for setup. the main ones that are recommended are the following:\n\nproperty         value                                          comment\nmodel            ex. geforce gt 220                             gpu model name, cosmetic\ndevice_type      nvda,parent                                    always set as nvda,parent\nvram,totalsize   ex. 0000004000000000                           sets vram size\nrom-revision     dortania                                       property must exist, however the value can be anything\nnvcap            ex. 0500000000000f00000000000000000f00000000   sets display properties used by macos, more info below\n@0,compatible    nvda,nvmac                                     always set as nvda,nvmac\n@0,device_type   display                                        always set as display\n@0,name          nvda,display-a                                 always set as nvda,display-a\n@1,compatible    nvda,nvmac                                     always set as nvda,nvmac\n@1,device_type   display                                        always set as display\n@1,name          nvda,display-b                                 always set as nvda,display-b\n\nand to calculate the properties few properties:\n\n * model\n * vram,totalsize\n * rom-revision\n * nvcap\n\n\n# model\n\ntechnically cosmetic, however macos expects this entry so we'll provide it. the format is as follows:\n\ngeforce [device name]\n# example\ngeforce gt 220\n\n\n\n# vram,totalsize\n\namount of vram present on your card, in hexadecimal.\n\nfor this example, lets convert 1024mb to hexadecimal:\n\n# convert 1024mb megabytes to bytes\necho '1024 * 1024 * 1024' | bc\n 1073741824\n\n# convert from decimal to hexadecimal\necho 'obase=16; ibase=10; 1073741824' | bc\n 40000000\n\n# hexswap so it can be injected correctly\n# ie. swap in pairs\n40000000 -> 40 00 00 00 -> 00 00 00 40\n\n# pad the value to 8 bytes with 00 at the end\n00 00 00 40 00 00 00 00\n\n# and you're done\nvram,totalsize = 0000004000000000\n\n\n\n# rom-revision\n\nsimply can be any value, however the property must exist as some gpus fail to initialize without it(ex. gt 220's)\n\nrom-revision = dortania\n\n\n\n# nvcap\n\nthis is where the fun comes it, as we'll now need to calculate the nvcap value. thankfully for us, 1revenger1 has created a tool to automate the process: nvcap calculator\n\nto use this program, simply grab your vbios(techpowerup hosts most vbios) and run nvcap-calculator within your terminal.\n\nonce its running, you should see the following:\n\n\n\ngive it your vbios and then press enter. once it takes you to the main menu, select option 2 to take you to the nvcap calculation page.\n\n\n\nhere you can see the connectors that nvcap-calculator was able to find. each display may represent multiple dcb entries, such as dvi (normally represented as two entries) or duplicate dcb entries. the goal here is to assign each display to a head. each head can only output to one display at a time. for example, if your using 2 dvi ports, each should be on their own head to have proper dual monitor support.\n\nnote that some displays may be assigned automatically. an lvds display will be put on it's own head automatically, and tv displays will be put on the tv head automatically.\n\nto start assigning displays, press 1. to assign a display to a head, you type the number of the display then the number of the head. for example, typing in 1 1 results in:\n\n\n\nyou can type in 1 1 again to remove the display from the head. once you are done assigning displays, it should look something like this:\n\n\n\nonce you are done setting up the displays, press q to return to the other nvcap settings. you should set the rest of the nvcap settings as follows:\n\nnvcap value                    details                                                example command\nversion                        04 for 7 series and older, 05 for 8 series and newer   3 then 4\ncomposite                      01 for s-video, 00 otherwise                           4 to toggle\nscript based power/backlight   00 ony useful for genuine macbook pros                 3 to toggle\nfield f (unknown)              0f for 300 series and newer, otherwise 07              6 then 0x0f\n\nonce done, enter in c to calculate the nvcap value\n\n\n\nyou now have your nvcap value!\n\nnvcap: \n05000000 00000300 0c000000 0000000f 00000000\n\n\nfor those who are wanting a break down on how to calculate the nvcap value:\n\nnvcap table\n\ninfo based off of whatevergreen's nvcap.bt file\n\nnvcap bit     name                           comment\nbyte 1        nvcap version                  04 for 7 series and older, 05 for 8 series and newer\nbyte 2        laptop with lid                01 for true, 00 otherwise\nbyte 3        composite                      01 for s-video, 00 otherwise\nbyte 4        backlight                      01 for tesla v1 with backlight, otherwise 00 for newer gpus\n                                             regardless of screen type\nbytes 5+6     tvdcbmask                      00 00, relates to dcb entry 5\nbytes 7+8     head0dcbmask                   00 00, see below\nbytes 9+10    head1dcbmask                   00 00, see below\nbytes 11+12   head2dcbmask                   00 00, non-applicable for fermi and older\nbytes 13+14   head3dcbmask                   00 00, non-applicable for fermi and older\nbyte 15       scriptbasedpowerandbacklight   00, only relevant for genuine macbook pros\nbyte 16       unknown                        0f for 300 series and newer, otherwise 07\nbyte 17       edid                           00\nbyte 18       reserved                       00\nbyte 19       reserved                       00\nbyte 20       reserved                       00\n\n\n# cleaning up\n\nnow that we've gotten all our properties, we can now add em up and place them in our config.plist:\n\npciroot(0x2)/pci(0x0,0x0)/pci(0x0,0x0)\n\nmodel          | string | geforce gt 220\ndevice_type    | string | nvda,parent\nvram,totalsize |  data  | 0000004000000000\nrom-revision   | string | dortania\nnvcap          |  data  | 05000000 00000300 0c000000 0000000f 00000000\n@0,compatible  | string | nvda,nvmac\n@0,device_type | string | display\n@0,name        | string | nvda,display-a\n@1,compatible  | string | nvda,nvmac\n@1,device_type | string | display\n@1,name        | string | nvda,display-b\n\n\nopen your config.plist and head to deviceproperties -> add, next create a new child with the name of your gpu's path(ie the one with gfxutil). then, finally add the properties as children to the pciroot. you should end up with something similar:\n\n",charsets:{cjk:!0}},{title:"Battery Status",frontmatter:{},regularPath:"/laptop-specific/battery.html",relativePath:"laptop-specific/battery.md",key:"v-7abde996",path:"/laptop-specific/battery.html",headers:[{level:2,title:"Dual Battery",slug:"dual-battery",normalizedTitle:"dual battery",charIndex:1095},{level:2,title:"Cycle Count",slug:"cycle-count",normalizedTitle:"cycle count",charIndex:1326},{level:2,title:"Battery Information Supplement",slug:"battery-information-supplement",normalizedTitle:"battery information supplement",charIndex:2024},{level:2,title:"DSDT Patching",slug:"dsdt-patching",normalizedTitle:"dsdt patching",charIndex:2606},{level:2,title:"Battery Hot-patching",slug:"battery-hot-patching",normalizedTitle:"battery hot-patching",charIndex:3233}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"Dual Battery Cycle Count Battery Information Supplement DSDT Patching Battery Hot-patching",content:"# Battery Status\n\nWith ECEnabler.kext, ACPI patching is no longer required for working battery percentage. If you would like battery functionality beyond charge percentage (e.g. cycle count, or temperature/other supplemental data) or have dual batteries, you still will need to create ACPI patches - see the resources below.\n\n * If battery status is not working even with ECEnabler, make sure you have the SMCBatteryManager VirtualSMC plugin enabled in your OpenCore configuration.\n\n * Certain devices, such as the Surface 3, Surface Pro 5, Surface Book 2, and Surface Laptop (and all subsequent Surface devices), use proprietary Embedded Controllers (or other similar hardware) instead of standard ACPI battery devices and OperationRegion fields, and thus without device-specific kexts, battery status cannot work.\n\nBattery Patching Resources\n * Note: If you are using the ECEnabler kext, you do not need to split EC fields as shown in the guides below. This means that you can use the field names in your DSDT directly instead of through utility methods (e.g. B1B2, B1B4, RE1B, and RECB).\n\n\n# Dual Battery\n\nBecause macOS does not properly support systems with dual batteries, you have to merge the two batteries in ACPI.\n\nRefer to the VirtualSMC documentation for information on how to handle dual-battery laptops: Link\n\n\n# Cycle Count\n\nSome laptop vendors, such as HP, already supply cycle count information. However, their firmwares either do not implement or expose it within the _BIX method. In the past, Rehabman's ACPIBatteryManager employed a hack to support cycle counts on firmwares which do not have a _BIX method, however with SMCBatteryManager this is no longer supported.\n\nRefer to the VirtualSMC documentation for information on how to transition from the ACPIBatteryManager cycle count hack to a proper _BIX method implementation: Link\n\nThe documentation may also prove useful for those implementing cycle count for the first time rather than transitioning from the ACPIBatteryManager cycle count hack.\n\n\n# Battery Information Supplement\n\nAlthough many laptops supply supplemental battery information (e.g. manufacture date and battery temperature) in their EC fields, the traditional _BIF, _BIX, and _BST ACPI methods do not support providing this information. Thus, SMCBatteryManager supports two ACPI methods, CBIS and CBSS to provide this information to macOS.\n\nRefer to the VirtualSMC documentation for information on how to implement these methods: Link\n\nLegacy Patching Resources\n * Note: Rehabman's guides say to use ACPIBatteryManager, you must use SMCBatteryManager instead.\n\n\n# DSDT Patching\n\nWhile custom DSDT injection should be avoided as to prevent issues with Windows and firmware updates, it can be quite helpful as a starting point since it's a bit easier to grasp and do yourself:\n\nRehabman's how to patch DSDT for working battery status\n\n * Note: When re-injecting your DSDT, it should be the first in the list of ACPI -> Add in the config.plist. And also remember that the patched DSDT would also go into EFI/OC/ACPI\n\n * Note 2: Avoid using the MaciASL and iASL provided by Rehabman, they have been long neglected and so highly recommended grabbing a newer variant from Acidanthera: MaciASL\n\n\n# Battery Hot-patching\n\nOnce you've finally gotten your DSDT patched and battery working in macOS, it's time to finally create our very own hot-patches. How these differ from regular DSDT patching is that it's done on the fly with the DSDT allowing for greater flexibility with firmware updates:\n\nRehabman's Guide to Using Clover to \"hotpatch\" ACPI\n\n * Note: Specifically post #2 refers to battery hot-patching",normalizedContent:"# battery status\n\nwith ecenabler.kext, acpi patching is no longer required for working battery percentage. if you would like battery functionality beyond charge percentage (e.g. cycle count, or temperature/other supplemental data) or have dual batteries, you still will need to create acpi patches - see the resources below.\n\n * if battery status is not working even with ecenabler, make sure you have the smcbatterymanager virtualsmc plugin enabled in your opencore configuration.\n\n * certain devices, such as the surface 3, surface pro 5, surface book 2, and surface laptop (and all subsequent surface devices), use proprietary embedded controllers (or other similar hardware) instead of standard acpi battery devices and operationregion fields, and thus without device-specific kexts, battery status cannot work.\n\nbattery patching resources\n * note: if you are using the ecenabler kext, you do not need to split ec fields as shown in the guides below. this means that you can use the field names in your dsdt directly instead of through utility methods (e.g. b1b2, b1b4, re1b, and recb).\n\n\n# dual battery\n\nbecause macos does not properly support systems with dual batteries, you have to merge the two batteries in acpi.\n\nrefer to the virtualsmc documentation for information on how to handle dual-battery laptops: link\n\n\n# cycle count\n\nsome laptop vendors, such as hp, already supply cycle count information. however, their firmwares either do not implement or expose it within the _bix method. in the past, rehabman's acpibatterymanager employed a hack to support cycle counts on firmwares which do not have a _bix method, however with smcbatterymanager this is no longer supported.\n\nrefer to the virtualsmc documentation for information on how to transition from the acpibatterymanager cycle count hack to a proper _bix method implementation: link\n\nthe documentation may also prove useful for those implementing cycle count for the first time rather than transitioning from the acpibatterymanager cycle count hack.\n\n\n# battery information supplement\n\nalthough many laptops supply supplemental battery information (e.g. manufacture date and battery temperature) in their ec fields, the traditional _bif, _bix, and _bst acpi methods do not support providing this information. thus, smcbatterymanager supports two acpi methods, cbis and cbss to provide this information to macos.\n\nrefer to the virtualsmc documentation for information on how to implement these methods: link\n\nlegacy patching resources\n * note: rehabman's guides say to use acpibatterymanager, you must use smcbatterymanager instead.\n\n\n# dsdt patching\n\nwhile custom dsdt injection should be avoided as to prevent issues with windows and firmware updates, it can be quite helpful as a starting point since it's a bit easier to grasp and do yourself:\n\nrehabman's how to patch dsdt for working battery status\n\n * note: when re-injecting your dsdt, it should be the first in the list of acpi -> add in the config.plist. and also remember that the patched dsdt would also go into efi/oc/acpi\n\n * note 2: avoid using the maciasl and iasl provided by rehabman, they have been long neglected and so highly recommended grabbing a newer variant from acidanthera: maciasl\n\n\n# battery hot-patching\n\nonce you've finally gotten your dsdt patched and battery working in macos, it's time to finally create our very own hot-patches. how these differ from regular dsdt patching is that it's done on the fly with the dsdt allowing for greater flexibility with firmware updates:\n\nrehabman's guide to using clover to \"hotpatch\" acpi\n\n * note: specifically post #2 refers to battery hot-patching",charsets:{}},{title:"Fixing CFG Lock",frontmatter:{},regularPath:"/misc/msr-lock.html",relativePath:"misc/msr-lock.md",key:"v-cb784854",path:"/misc/msr-lock.html",headers:[{level:2,title:"What is CFG-Lock",slug:"what-is-cfg-lock",normalizedTitle:"what is cfg-lock",charIndex:318},{level:2,title:"Checking if your firmware supports CFG Lock unlocking",slug:"checking-if-your-firmware-supports-cfg-lock-unlocking",normalizedTitle:"checking if your firmware supports cfg lock unlocking",charIndex:1276},{level:3,title:"Checking via OpenCore logs",slug:"checking-via-opencore-logs",normalizedTitle:"checking via opencore logs",charIndex:1663},{level:3,title:"Checking via ControlMsrE2",slug:"checking-via-controlmsre2",normalizedTitle:"checking via controlmsre2",charIndex:2242},{level:2,title:"Disabling CFG Lock",slug:"disabling-cfg-lock",normalizedTitle:"disabling cfg lock",charIndex:2070},{level:2,title:"Turning off CFG-Lock manually",slug:"turning-off-cfg-lock-manually",normalizedTitle:"turning off cfg-lock manually",charIndex:3428}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"What is CFG-Lock Checking if your firmware supports CFG Lock unlocking Checking via OpenCore logs Checking via ControlMsrE2 Disabling CFG Lock Turning off CFG-Lock manually",content:"# Fixing CFG Lock\n\nThis guide is only recommended for users who have already installed macOS, for users who are installing for the first time enable AppleCpuPmCfgLock and AppleXcpmCfgLock under Kernel -> Quirks\n\n * Note that this guide is only applicable for Intel users. AMD users don't have any type of CFG Lock\n\n\n# What is CFG-Lock\n\nCFG-Lock is a setting in your BIOS that allows for a specific register(in this case the MSR 0xE2) to be written to. By default, most motherboards lock this variable with many even hiding the option outright in the GUI. And why we care about it is that macOS actually wants to write to this variable, and not just one part of macOS. Instead both the Kernel (XNU) and AppleIntelPowerManagement want this register.\n\nSo to fix it we have 2 options:\n\n# 1. Patch macOS to work with our hardware\n\n * This creates instability and unnecessary patching for many\n * The 2 patches we use for this:\n   * AppleCpuPmCfgLock for AppleIntelPowerManagement.kext\n   * AppleXcpmCfgLock for the Kernel(XNU)\n\n# 2. Patch our firmware to support MSR E2 write\n\n * Very much preferred, as avoids patching allowing for greater flexibility regarding stability and OS upgrades\n\nNote: Penyrn based machines actually don't need to worry about unlocking this register\n\n\n# Checking if your firmware supports CFG Lock unlocking\n\nBefore proceeding with the rest of this guide, you'll first need to check if your firmware supports CFG Lock unlocking. To check it, you can proceed into two ways:\n\n 1. Use the DEBUG version of OpenCore and check what the log says about CFG Lock\n 2. Use a tool called ControlMsrE2 which will speed up the whole checking process\n\n\n# Checking via OpenCore logs\n\nFor users who prefer using DEBUG release, you'll want to enable the DEBUG variant of OpenCore with Target set to 67 and boot OpenCore. This should provide you with a file in the format of opencore-YYYY-MM-DD-hhmmss.txt on the root of the drive.\n\nWithin this file, search for OCCPU: EIST CFG Lock:\n\nOCCPU: EIST CFG Lock 1\n\n\nIf it returns 1, then you proceed with this guide here: Disabling CFG Lock.\n\nOtherwise(ie. 0), no reason to continue and you can simply disable Kernel -> Quirks -> AppleCpuPmCfgLock and Kernel -> Quirks -> AppleXcpmCfgLock.\n\n\n# Checking via ControlMsrE2\n\nTo start, download ControlMsrE2 and add this tool inside EFI/OC/Tools and config.plist(this can be done with ProperTree's snapshot function(ie. Cmd+R)). Next, boot OpenCore and select the ControlMsrE2.efi entry. This should provide you one of the following:\n\n * CFG-Lock is enabled:\n\nThis firmware has LOCKED MSR 0xE2 register!\n\n\n * CFG-Lock is disabled:\n\nThis firmware has UNLOCKED MSR 0xE2 register!\n\n\nFor the former, please continue here: Disabling CFG Lock.\n\nFor the latter, you don't need to do any CFG-Lock patches and can simply disable Kernel -> Quirks -> AppleCpuPmCfgLock and Kernel -> Quirks -> AppleXcpmCfgLock.\n\n\n# Disabling CFG Lock\n\nSo you've created the EFI folder but you can't still boot without unlocking before CFG Lock. In order to do this you'll need the following:\n\nInside your EFI/OC/Tools folder and config.plist, add the following tool(this can be done with ProperTree's snapshot function(ie. Cmd+R)):\n\n * Modified GRUB Shell\n\nAnd some apps to help us out:\n\n * UEFITool (Make sure it's UEFITool and not UEFIExtract)\n * Universal-IFR-Extractor\n\nAnd the final part, grabbing your BIOS from the vendors' website.\n\nNow the fun part!\n\n\n# Turning off CFG-Lock manually\n\nPlease note that the only firmwares that can be directly opened by UEFITool are ASUS, MSI and ASRock. Other firmwares need a special procedure which we'll not directly cover into this guide. For Dell firmwares, please refer to dreamwhite's guide\n\n 1. Open your firmware with UEFITool and then find CFG Lock as a Unicode string. If nothing pops up then your firmware doesn't support CFG Lock, otherwise continue on.\n\n\n\n 1. You'll find that this string is found within a Setup folder, right-click and export as Setup.bin (or even Setup.sct)\n\n 2. Open your setup file with ifrextract and export as a .txt file with terminal:\n    \n    path/to/ifrextract path/to/Setup.bin path/to/Setup.txt\n    \n\n 3. Open the text file and search for CFG Lock, VarStoreInfo (VarOffset/VarName): and note the offset right after it (ie: 0x43) and the VarStore ID right after the offset (ie: 0x3)\n\n 4. Search for VarStoreId: 0x3 where 0x3 is replaced with the value of the VarStoreId you found and note the Name after it (ie: CpuSetup)\n\n\n\n 1. Run the Modified GRUB Shell and write the following command where CpuSetup is replaced with the VarStore Name you've previously extracted and 0x43 is replaced with the offset you've previously extracted:\n    \n    setup_var_cv CpuSetup 0x43 0x01 0x00\n    \n\nAt this point, run either reboot in the shell or simply reboot your machine. And with that, you should have CFG Lock unlocked! To verify, you can run over the methods listed at Checking if your firmware supports CFG Lock unlocking to verify whether the variable was set correctly then finally disable Kernel -> Quirks -> AppleCpuPmCfgLock and Kernel -> Quirks -> AppleXcpmCfgLock.\n\n * Do note that variable offsets are unique not just to each motherboard but even to its firmware version. Never try to use an offset without checking.\n\nAnd you're done! Now you'll have correct CPU power management\n\n * Note: Every time you reset your BIOS you will need to flip this bit again, make sure to write it down with the BIOS version so you know which.\n\n * Note 2: Some OEMs like Lenovo may have the variable set but cannot unlock it without physically modding the BIOS, for these situations you may need to use a tool like RU: CFG LOCK/Unlocking - Alternative method",normalizedContent:"# fixing cfg lock\n\nthis guide is only recommended for users who have already installed macos, for users who are installing for the first time enable applecpupmcfglock and applexcpmcfglock under kernel -> quirks\n\n * note that this guide is only applicable for intel users. amd users don't have any type of cfg lock\n\n\n# what is cfg-lock\n\ncfg-lock is a setting in your bios that allows for a specific register(in this case the msr 0xe2) to be written to. by default, most motherboards lock this variable with many even hiding the option outright in the gui. and why we care about it is that macos actually wants to write to this variable, and not just one part of macos. instead both the kernel (xnu) and appleintelpowermanagement want this register.\n\nso to fix it we have 2 options:\n\n# 1. patch macos to work with our hardware\n\n * this creates instability and unnecessary patching for many\n * the 2 patches we use for this:\n   * applecpupmcfglock for appleintelpowermanagement.kext\n   * applexcpmcfglock for the kernel(xnu)\n\n# 2. patch our firmware to support msr e2 write\n\n * very much preferred, as avoids patching allowing for greater flexibility regarding stability and os upgrades\n\nnote: penyrn based machines actually don't need to worry about unlocking this register\n\n\n# checking if your firmware supports cfg lock unlocking\n\nbefore proceeding with the rest of this guide, you'll first need to check if your firmware supports cfg lock unlocking. to check it, you can proceed into two ways:\n\n 1. use the debug version of opencore and check what the log says about cfg lock\n 2. use a tool called controlmsre2 which will speed up the whole checking process\n\n\n# checking via opencore logs\n\nfor users who prefer using debug release, you'll want to enable the debug variant of opencore with target set to 67 and boot opencore. this should provide you with a file in the format of opencore-yyyy-mm-dd-hhmmss.txt on the root of the drive.\n\nwithin this file, search for occpu: eist cfg lock:\n\noccpu: eist cfg lock 1\n\n\nif it returns 1, then you proceed with this guide here: disabling cfg lock.\n\notherwise(ie. 0), no reason to continue and you can simply disable kernel -> quirks -> applecpupmcfglock and kernel -> quirks -> applexcpmcfglock.\n\n\n# checking via controlmsre2\n\nto start, download controlmsre2 and add this tool inside efi/oc/tools and config.plist(this can be done with propertree's snapshot function(ie. cmd+r)). next, boot opencore and select the controlmsre2.efi entry. this should provide you one of the following:\n\n * cfg-lock is enabled:\n\nthis firmware has locked msr 0xe2 register!\n\n\n * cfg-lock is disabled:\n\nthis firmware has unlocked msr 0xe2 register!\n\n\nfor the former, please continue here: disabling cfg lock.\n\nfor the latter, you don't need to do any cfg-lock patches and can simply disable kernel -> quirks -> applecpupmcfglock and kernel -> quirks -> applexcpmcfglock.\n\n\n# disabling cfg lock\n\nso you've created the efi folder but you can't still boot without unlocking before cfg lock. in order to do this you'll need the following:\n\ninside your efi/oc/tools folder and config.plist, add the following tool(this can be done with propertree's snapshot function(ie. cmd+r)):\n\n * modified grub shell\n\nand some apps to help us out:\n\n * uefitool (make sure it's uefitool and not uefiextract)\n * universal-ifr-extractor\n\nand the final part, grabbing your bios from the vendors' website.\n\nnow the fun part!\n\n\n# turning off cfg-lock manually\n\nplease note that the only firmwares that can be directly opened by uefitool are asus, msi and asrock. other firmwares need a special procedure which we'll not directly cover into this guide. for dell firmwares, please refer to dreamwhite's guide\n\n 1. open your firmware with uefitool and then find cfg lock as a unicode string. if nothing pops up then your firmware doesn't support cfg lock, otherwise continue on.\n\n\n\n 1. you'll find that this string is found within a setup folder, right-click and export as setup.bin (or even setup.sct)\n\n 2. open your setup file with ifrextract and export as a .txt file with terminal:\n    \n    path/to/ifrextract path/to/setup.bin path/to/setup.txt\n    \n\n 3. open the text file and search for cfg lock, varstoreinfo (varoffset/varname): and note the offset right after it (ie: 0x43) and the varstore id right after the offset (ie: 0x3)\n\n 4. search for varstoreid: 0x3 where 0x3 is replaced with the value of the varstoreid you found and note the name after it (ie: cpusetup)\n\n\n\n 1. run the modified grub shell and write the following command where cpusetup is replaced with the varstore name you've previously extracted and 0x43 is replaced with the offset you've previously extracted:\n    \n    setup_var_cv cpusetup 0x43 0x01 0x00\n    \n\nat this point, run either reboot in the shell or simply reboot your machine. and with that, you should have cfg lock unlocked! to verify, you can run over the methods listed at checking if your firmware supports cfg lock unlocking to verify whether the variable was set correctly then finally disable kernel -> quirks -> applecpupmcfglock and kernel -> quirks -> applexcpmcfglock.\n\n * do note that variable offsets are unique not just to each motherboard but even to its firmware version. never try to use an offset without checking.\n\nand you're done! now you'll have correct cpu power management\n\n * note: every time you reset your bios you will need to flip this bit again, make sure to write it down with the bios version so you know which.\n\n * note 2: some oems like lenovo may have the variable set but cannot unlock it without physically modding the bios, for these situations you may need to use a tool like ru: cfg lock/unlocking - alternative method",charsets:{}},{title:"Emulated NVRAM",frontmatter:{},regularPath:"/misc/nvram.html",relativePath:"misc/nvram.md",key:"v-7d3e463c",path:"/misc/nvram.html",headers:[{level:2,title:"Cleaning out the Clover gunk",slug:"cleaning-out-the-clover-gunk",normalizedTitle:"cleaning out the clover gunk",charIndex:468},{level:2,title:"Verifying if you have working NVRAM",slug:"verifying-if-you-have-working-nvram",normalizedTitle:"verifying if you have working nvram",charIndex:1103},{level:2,title:"Emulating NVRAM (with a nvram.plist)",slug:"emulating-nvram-with-a-nvram-plist",normalizedTitle:"emulating nvram (with a nvram.plist)",charIndex:1478}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"Cleaning out the Clover gunk Verifying if you have working NVRAM Emulating NVRAM (with a nvram.plist)",content:"# Emulated NVRAM\n\nDANGER\n\nThis is not up to date for OpenCore 0.8.3!\n\nSo this section is for those who don't have native NVRAM, the most common hardware to have incompatible native NVRAM with macOS are X99 and some X299 series chipsets:\n\n * X99\n * X299\n\nFor B360, B365, H310, H370, and Z390 users, make sure you have SSDT-PMC both under EFI/OC/ACPI and config.plist -> ACPI -> Add. For more info on making and compiling SSDTs, please see Getting started with ACPI\n\n\n# Cleaning out the Clover gunk\n\nSo some may not have noticed but Clover may have installed RC scripts into macOS for proper NVRAM emulation. This is an issue as it conflicts with OpenCore's method of emulation.\n\nFiles to delete:\n\n * /Volumes/EFI/EFI/CLOVER/drivers64UEFI/EmuVariableUefi-64.efi\n * /Volumes/EFI/nvram.plist\n * /etc/rc.clover.lib\n * /etc/rc.boot.d/10.save_and_rotate_boot_log.local\n * /etc/rc.boot.d/20.mount_ESP.local\n * /etc/rc.boot.d/70.disable_sleep_proxy_client.local.disabled\n * /etc/rc.shutdown.d/80.save_nvram_plist.local\n\nIf folders are empty then delete them as well:\n\n * /etc/rc.boot.d\n * /etc/rc.shutdown.d\n\n\n# Verifying if you have working NVRAM\n\nTo start, open the terminal and run the following command, which sets a variable named test in your NVRAM to the current date and time:\n\nsudo nvram myvar=\"$(date)\"\n\n\nNow reboot and run this:\n\nnvram myvar\n\n\nIf nothing returns then your NVRAM is not working. If a line containing myvar and then the current date, your NVRAM is working.\n\n\n# Emulating NVRAM (with a nvram.plist)\n\nIf you don't have native NVRAM, don't fret. We can set up emulated NVRAM by using a script to save the NVRAM contents to a plist during the shutdown process, which will then be loaded by OpenCore at the next startup.\n\nTo enable emulated NVRAM, you'll need the following set:\n\nWithin your config.plist:\n\n * Booter -> Quirks:\n   * DisableVariableWrite: set to NO\n * Misc -> Security:\n   * ExposeSensitiveData: set to at least 0x1\n * NVRAM:\n   * LegacyOverwrite set to YES\n   * LegacySchema: NVRAM variables set (OpenCore compares these to the variables present in nvram.plist)\n   * WriteFlash: set to YES\n\nAnd within your EFI:\n\n * OpenVariableRuntimeDxe.efi driver\n * OpenRuntime.efi driver (this is needed for proper sleep, shutdown and other services to work correctly)\n\nMake sure to snapshot after to make sure the drivers are listed in your config.plist. Afterwards, make sure that both OpenVariableRuntimeDxe.efi and OpenRuntime.efi have LoadEarly set to YES, and that OpenVariableRuntimeDxe.efi is placed before OpenRuntime.efi in your config .\n\nNow grab the LogoutHook folder (inside Utilities) and place it somewhere safe (e.g. within your user directory, as shown below):\n\n/Users/$(whoami)/LogoutHook/\n\nOpen up terminal and run the following (one at a time):\n\ncd /Users/$(whoami)/LogoutHook/\n./Launchd.command install \n\n\nAnd voila! You have emulated NVRAM!",normalizedContent:"# emulated nvram\n\ndanger\n\nthis is not up to date for opencore 0.8.3!\n\nso this section is for those who don't have native nvram, the most common hardware to have incompatible native nvram with macos are x99 and some x299 series chipsets:\n\n * x99\n * x299\n\nfor b360, b365, h310, h370, and z390 users, make sure you have ssdt-pmc both under efi/oc/acpi and config.plist -> acpi -> add. for more info on making and compiling ssdts, please see getting started with acpi\n\n\n# cleaning out the clover gunk\n\nso some may not have noticed but clover may have installed rc scripts into macos for proper nvram emulation. this is an issue as it conflicts with opencore's method of emulation.\n\nfiles to delete:\n\n * /volumes/efi/efi/clover/drivers64uefi/emuvariableuefi-64.efi\n * /volumes/efi/nvram.plist\n * /etc/rc.clover.lib\n * /etc/rc.boot.d/10.save_and_rotate_boot_log.local\n * /etc/rc.boot.d/20.mount_esp.local\n * /etc/rc.boot.d/70.disable_sleep_proxy_client.local.disabled\n * /etc/rc.shutdown.d/80.save_nvram_plist.local\n\nif folders are empty then delete them as well:\n\n * /etc/rc.boot.d\n * /etc/rc.shutdown.d\n\n\n# verifying if you have working nvram\n\nto start, open the terminal and run the following command, which sets a variable named test in your nvram to the current date and time:\n\nsudo nvram myvar=\"$(date)\"\n\n\nnow reboot and run this:\n\nnvram myvar\n\n\nif nothing returns then your nvram is not working. if a line containing myvar and then the current date, your nvram is working.\n\n\n# emulating nvram (with a nvram.plist)\n\nif you don't have native nvram, don't fret. we can set up emulated nvram by using a script to save the nvram contents to a plist during the shutdown process, which will then be loaded by opencore at the next startup.\n\nto enable emulated nvram, you'll need the following set:\n\nwithin your config.plist:\n\n * booter -> quirks:\n   * disablevariablewrite: set to no\n * misc -> security:\n   * exposesensitivedata: set to at least 0x1\n * nvram:\n   * legacyoverwrite set to yes\n   * legacyschema: nvram variables set (opencore compares these to the variables present in nvram.plist)\n   * writeflash: set to yes\n\nand within your efi:\n\n * openvariableruntimedxe.efi driver\n * openruntime.efi driver (this is needed for proper sleep, shutdown and other services to work correctly)\n\nmake sure to snapshot after to make sure the drivers are listed in your config.plist. afterwards, make sure that both openvariableruntimedxe.efi and openruntime.efi have loadearly set to yes, and that openvariableruntimedxe.efi is placed before openruntime.efi in your config .\n\nnow grab the logouthook folder (inside utilities) and place it somewhere safe (e.g. within your user directory, as shown below):\n\n/users/$(whoami)/logouthook/\n\nopen up terminal and run the following (one at a time):\n\ncd /users/$(whoami)/logouthook/\n./launchd.command install \n\n\nand voila! you have emulated nvram!",charsets:{}},{title:"Fixing RTC write issues",frontmatter:{},regularPath:"/misc/rtc.html",relativePath:"misc/rtc.md",key:"v-457e0a26",path:"/misc/rtc.html",headers:[{level:2,title:"Finding our bad RTC region",slug:"finding-our-bad-rtc-region",normalizedTitle:"finding our bad rtc region",charIndex:1611},{level:2,title:"Making the blacklist more permanent",slug:"making-the-blacklist-more-permanent",normalizedTitle:"making the blacklist more permanent",charIndex:4387}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"Finding our bad RTC region Making the blacklist more permanent",content:"# Fixing RTC write issues\n\nWhat this section attempts to teach is how to resolve RTC(CMOS) issues on reboot/wake with certain machines. Most commonly looking like the image below:\n\n\n\nThe reason that these CMOS and safe mode errors happen is due to AppleRTC writing to certain areas that are not supported by the hardware properly and thus resulting in panics and errors.\n\nTo get around this, we've commonly blocked out all RTC writes with these types of patches but they're not ideal for many reasons including both breaking Windows and Linux and disabling potential supported regions like for power management.\n\nSo with OpenCore, we've got a few options to choose:\n\n * Patch AppleRTC from writing to specific regions\n   * They may break in future OS updates\n   * Much more difficult for the end user to patch\n   * Does not handle EfiBoot writing to RTC\n * Omit bad regions from being writable\n   * They may break in future firmware updates\n   * Much easier for the end user to patch\n   * Prevents EfiBoot from breaking your system as well\n\nThe former is actually already integrated into OpenCore with the DisableRtcChecksum quirk, but has the downfall of only blocking regions 0x58-0x59 and only working in the kernel level. Best way to know if this option is best, enable it and try. If this doesn't work, disable as it's an unnecessary patch.\n\nWith the latter, we're able to block very specific regions of our choice that match our exact model. And we're able to do this both in the kernel level and firmware aiding with hibernation support. This however will requires much more time and RTCMemoryFixup.\n\n\n# Finding our bad RTC region\n\nFor the rest of this guide, we're going to assume you've tested option 1(DisableRtcChecksum) and it didn't work or you're having issues with EfiBoot also writing to RTC. To get started, we should first introduce a few ideas:\n\n * RTC will have regions spanning from 0 to 255\n * These regions will be in the hexadecimal counting system so in reality will be 0x00-0xFF\n * To omit bad regions, we use the boot-arg rtcfx_exclude=00-FF\n   * Replace 00-FF with your bad region (or regions)\n   * Reminder that boot-args is located under NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 in your config.plist\n   * This will also require you to have RTCMemoryFixup in your config.plist and EFI/OC/Kexts folder.\n * There can be multiple bad regions\n * To find the bad region, we'll want to split out search into chunks\n\nRegarding splitting out chunks, what we'll be doing is omitting chunks of RTC regions until we've narrowed down far enough to the exact spot that's bad. You can see the below on how to start:\n\n# 1. Testing RtcMemoryFixup\n\n * To start, you'll need to add rtcfx_exclude=00-FF in boot-args. If after a reboot the RTC errors seems solved, this will tell you whether your CMOS errors are RTC related\n\n# 2. Split 0x00-0xFF into 2\n\n * 0x00-0x7F and 0x80-0xFF\n   * write down the excluded range which fixes the RTC errors and proceed by splitting more into chunks\n   * e.g. rtcfx_exclude=00-7Ffixes the RTC errors so you're gonna split it by half and don't consider more rtcfx_exclude=80-FF\n * Test rtcfx_exclude=00-7F and rtcfx_exclude=80-FF\n   * Note you may also get a bad range of 7F-80, or even bad regions split into multiple sections(ex. 0x00-0x01 and 0x80-0x81)\n   * You can use rtcfx_exclude=00-01,7F-80 to resolve this\n\n# 3. After testing which regions is bad, shrink even more\n\n * Assuming our bad region was within 0x80-0xFF, you'd next split that into 2:\n * 0x80-0xBF and 0xC0-0xFF\n   * if you had multiple ranges that are bad\n\n# 4. And you'll continue on with this pattern until you've narrowed down the bad region. Note that you will need to reboot each time to test if you're still getting CMOS/Safe-mode errors\n\n * Also note that the final bad spot will usually be a range and not a singular spot.\n * ie. rtcfx_exclude=85-86 instead of one singular value\n\nPro tip: To find a value in between 2 regions, I recommend first converting from hexadecimal to decimal, then run the below equation:\n\n * (x + y) / 2\n\nNow lets try to use this with step 1 from earlier:\n\n * 0x00-0xFF -> 0-255 -> (0 + 255) / 2 = 127.5\n\nNow with 127.5, you'll round up and down to get yourselves an end and a start value:\n\n * 0-127 -> 0x00-0x7F\n\n * 128-255 -> 0x80-0xFF\n\nAnd hopefully this can help better understand how you got our values from step 1.\n\n\n# Making the blacklist more permanent\n\nOnce you've found the bad RTC region, you can now finally add it to OpenCore itself and allow this region to also be blacklisted at the firmware level.\n\nFor this, open up your config.plist and head to the NVRAM -> Add section. Here under the 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102 GUID, you'll want to add a new entry called rtc-blacklist\n\nNext you'll want to add our bad RTC region as an array, so rtcfx_exclude=85-86 will become rtc-blacklist | Data | 8586. This will also work with longer ranges such as 85-89 and such however with rtc-blacklist you must include every entry(ie. <85 86 87 88 89>). Remember to remove the boot-arg once you're set rtc-blacklist\n\nNext ensure you have NVRAM -> Delete also set as NVRAM variables will not be overwritten by OpenCore unless explicitly told so.\n\nOnce all this is done, you should have something similar to below:\n\n",normalizedContent:"# fixing rtc write issues\n\nwhat this section attempts to teach is how to resolve rtc(cmos) issues on reboot/wake with certain machines. most commonly looking like the image below:\n\n\n\nthe reason that these cmos and safe mode errors happen is due to applertc writing to certain areas that are not supported by the hardware properly and thus resulting in panics and errors.\n\nto get around this, we've commonly blocked out all rtc writes with these types of patches but they're not ideal for many reasons including both breaking windows and linux and disabling potential supported regions like for power management.\n\nso with opencore, we've got a few options to choose:\n\n * patch applertc from writing to specific regions\n   * they may break in future os updates\n   * much more difficult for the end user to patch\n   * does not handle efiboot writing to rtc\n * omit bad regions from being writable\n   * they may break in future firmware updates\n   * much easier for the end user to patch\n   * prevents efiboot from breaking your system as well\n\nthe former is actually already integrated into opencore with the disablertcchecksum quirk, but has the downfall of only blocking regions 0x58-0x59 and only working in the kernel level. best way to know if this option is best, enable it and try. if this doesn't work, disable as it's an unnecessary patch.\n\nwith the latter, we're able to block very specific regions of our choice that match our exact model. and we're able to do this both in the kernel level and firmware aiding with hibernation support. this however will requires much more time and rtcmemoryfixup.\n\n\n# finding our bad rtc region\n\nfor the rest of this guide, we're going to assume you've tested option 1(disablertcchecksum) and it didn't work or you're having issues with efiboot also writing to rtc. to get started, we should first introduce a few ideas:\n\n * rtc will have regions spanning from 0 to 255\n * these regions will be in the hexadecimal counting system so in reality will be 0x00-0xff\n * to omit bad regions, we use the boot-arg rtcfx_exclude=00-ff\n   * replace 00-ff with your bad region (or regions)\n   * reminder that boot-args is located under nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 in your config.plist\n   * this will also require you to have rtcmemoryfixup in your config.plist and efi/oc/kexts folder.\n * there can be multiple bad regions\n * to find the bad region, we'll want to split out search into chunks\n\nregarding splitting out chunks, what we'll be doing is omitting chunks of rtc regions until we've narrowed down far enough to the exact spot that's bad. you can see the below on how to start:\n\n# 1. testing rtcmemoryfixup\n\n * to start, you'll need to add rtcfx_exclude=00-ff in boot-args. if after a reboot the rtc errors seems solved, this will tell you whether your cmos errors are rtc related\n\n# 2. split 0x00-0xff into 2\n\n * 0x00-0x7f and 0x80-0xff\n   * write down the excluded range which fixes the rtc errors and proceed by splitting more into chunks\n   * e.g. rtcfx_exclude=00-7ffixes the rtc errors so you're gonna split it by half and don't consider more rtcfx_exclude=80-ff\n * test rtcfx_exclude=00-7f and rtcfx_exclude=80-ff\n   * note you may also get a bad range of 7f-80, or even bad regions split into multiple sections(ex. 0x00-0x01 and 0x80-0x81)\n   * you can use rtcfx_exclude=00-01,7f-80 to resolve this\n\n# 3. after testing which regions is bad, shrink even more\n\n * assuming our bad region was within 0x80-0xff, you'd next split that into 2:\n * 0x80-0xbf and 0xc0-0xff\n   * if you had multiple ranges that are bad\n\n# 4. and you'll continue on with this pattern until you've narrowed down the bad region. note that you will need to reboot each time to test if you're still getting cmos/safe-mode errors\n\n * also note that the final bad spot will usually be a range and not a singular spot.\n * ie. rtcfx_exclude=85-86 instead of one singular value\n\npro tip: to find a value in between 2 regions, i recommend first converting from hexadecimal to decimal, then run the below equation:\n\n * (x + y) / 2\n\nnow lets try to use this with step 1 from earlier:\n\n * 0x00-0xff -> 0-255 -> (0 + 255) / 2 = 127.5\n\nnow with 127.5, you'll round up and down to get yourselves an end and a start value:\n\n * 0-127 -> 0x00-0x7f\n\n * 128-255 -> 0x80-0xff\n\nand hopefully this can help better understand how you got our values from step 1.\n\n\n# making the blacklist more permanent\n\nonce you've found the bad rtc region, you can now finally add it to opencore itself and allow this region to also be blacklisted at the firmware level.\n\nfor this, open up your config.plist and head to the nvram -> add section. here under the 4d1fda02-38c7-4a6a-9cc6-4bcca8b30102 guid, you'll want to add a new entry called rtc-blacklist\n\nnext you'll want to add our bad rtc region as an array, so rtcfx_exclude=85-86 will become rtc-blacklist | data | 8586. this will also work with longer ranges such as 85-89 and such however with rtc-blacklist you must include every entry(ie. <85 86 87 88 89>). remember to remove the boot-arg once you're set rtc-blacklist\n\nnext ensure you have nvram -> delete also set as nvram variables will not be overwritten by opencore unless explicitly told so.\n\nonce all this is done, you should have something similar to below:\n\n",charsets:{cjk:!0}},{title:"Installing and using BootCamp utilities",frontmatter:{},regularPath:"/multiboot/bootcamp.html",relativePath:"multiboot/bootcamp.md",key:"v-184e7518",path:"/multiboot/bootcamp.html",headers:[{level:2,title:"Preparations",slug:"preparations",normalizedTitle:"preparations",charIndex:814},{level:2,title:"Installation",slug:"installation",normalizedTitle:"installation",charIndex:1101},{level:2,title:"Troubleshooting",slug:"troubleshooting",normalizedTitle:"troubleshooting",charIndex:3180},{level:2,title:"Can't find Windows/BootCamp drive in picker",slug:"can-t-find-windows-bootcamp-drive-in-picker",normalizedTitle:"can't find windows/bootcamp drive in picker",charIndex:3200},{level:2,title:'"You can\'t change the startup disk to the selected disk" error',slug:"you-can-t-change-the-startup-disk-to-the-selected-disk-error",normalizedTitle:"&quot;you can't change the startup disk to the selected disk&quot; error",charIndex:null},{level:2,title:"Booting Windows results in BlueScreen or Linux crashes",slug:"booting-windows-results-in-bluescreen-or-linux-crashes",normalizedTitle:"booting windows results in bluescreen or linux crashes",charIndex:3313},{level:2,title:"Booting Windows error: OCB: StartImage failed - Already started",slug:"booting-windows-error-ocb-startimage-failed-already-started",normalizedTitle:"booting windows error: ocb: startimage failed - already started",charIndex:3371},{level:2,title:"Windows Startup Disk can't see APFS drives",slug:"windows-startup-disk-can-t-see-apfs-drives",normalizedTitle:"windows startup disk can't see apfs drives",charIndex:1687}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"Preparations Installation Troubleshooting Can't find Windows/BootCamp drive in picker \"You can't change the startup disk to the selected disk\" error Booting Windows results in BlueScreen or Linux crashes Booting Windows error: OCB: StartImage failed - Already started Windows Startup Disk can't see APFS drives",content:"# Installing and using BootCamp utilities\n\nSo a neat feature of OpenCore is the ability to avoid the BIOS entirely and use Startup disk solely for multiboot. Problem comes in when we try to boot windows and have no way of setting the boot option back to macOS. That's where the BootCamp utilities come in.\n\n * Note: This guide will not cover the creation of the Windows installer, only the installation of BootCamp drivers.\n   * Example of Windows installer creation: Build a Bootable Windows ISO\n   * Reminder: Windows MUST be GPT/GUID based, OpenCore will not boot legacy installs\n * Note 2: Using BootCamp utilities from macOS will erase the EFI/BOOT/BOOTx64.efi file on your EFI, which is needed for booting OpenCore. And OpenCore itself does not support MBR based installs so the utility is useless to us\n\n\n# Preparations\n\nTo start we'll need the following:\n\n * Windows already installed\n   * MUST be UEFI/GPT based\n * Brigadier\n   * To download the BootCamp drivers\n * Setup LauncherOption\n   * Not required but can help alleviate headaches when Windows erases the BOOTx64.efi OpenCore uses\n\n\n# Installation\n\nTo install, it's as simple as grabbing Brigadier and running either Brigadier.bat for Windows or Brigadier.command for macOS. If the SMBIOS you're currently using either has BootCamp issues or want to download for another SMBIOS, you can add -- model{SMBIOS} to the end:\n\npath/to/Brigadier --model MacPro7,1\n\n\n * Note: Older versions of the BootCamp installer(6.0) do not support APFS, you'll need to either choose a newer SMBIOS that would have it bundled(ie. iMac 19,1) or after installation update your bootcamp software. See below for more details on troubleshooting: Windows Startup Disk can't see APFS drives\n\n\n\nNext you will find our bootcamp drivers under either:\n\n * Windows:\n\n\\Users\\{Username}\\bootcamp-{filename}\\BootCamp\n\n\n * macOS:\n\n/Users/{Username}/BootCamp-{filename}/WindowsSupport.dmg\n\n\nmacOS users will next need to expand WindowsSupport.dmg and place it somewhere Windows can get.\n\n\n\nNext, within Windows, you have two choices.\n\nEither navigate to the bootcamp-{filename}\\BootCamp folder and run Setup.exe, this requires correct spoofing of SMBIOS SystemProductName - shown as System Model in Windows - to launch:\n\n\n\nAlternatively, launch bootcamp-{filename}\\BootCamp\\Drivers\\Apple\\BootCamp.msi as Administrator - for instance by starting it directly from an Administrator command shell - this skips the BootCamp model check entirely:\n\n\n\nOnce all is finished, you now have BootCamp switching! There should be a little BootCamp icon in you tray now that you can select which drive to boot to.\n\n * Note: For those no needing the extra drivers BootCamp provides, you can delete the following:\n   * $WinPEDriver$: DO NOT delete the folder itself, just the drivers inside\n     * Apple Wifi card users will want to keep the following:\n       * $WinPEDriver$/BroadcomWireless\n       * $WinPEDriver$/BroadcomBluetooth\n       * $WinPEDriver$/AppleBluetoothBroadcom\n   * BootCamp/Drivers/...\n     * DO NOT delete BootCamp/Drivers/Apple\n     * Apple Wifi card users will want to keep the following:\n       * BootCamp/Drivers/Broadcom/BroadcomBluetooth\n\n\n# Troubleshooting\n\n * Can't find Windows/BootCamp drive in picker\n * \"You can't change the startup disk to the selected disk\" error\n * Booting Windows results in BlueScreen or Linux crashes\n * Booting Windows error: OCB: StartImage failed - Already started\n * Windows Startup Disk can't see APFS drives\n\n\n# Can't find Windows/BootCamp drive in picker\n\nSo with OpenCore, we have to note that legacy Windows installs are not supported, only UEFI. Most installs now are UEFI based but those made by BootCamp Assistant in macOS are legacy based, so you'll have to find other means to make an installer(Google's your friend). This also means MasterBootRecord/Hybrid partitions are also broken so you'll need to format the drive you want to install onto with DiskUtility.\n\nNow to get onto troubleshooting:\n\n * Make sure Misc -> Security -> ScanPolicy is set to 0 to show all drives\n\nIf Windows and OpenCore's boot loaders are on the same drive, you'll need to add a BlessOverride entry:\n\nMisc -> BlessOverride -> \\EFI\\Microsoft\\Boot\\bootmgfw.efi\n\n\n * Note: As of OpenCore 0.5.9, this no longer needs to be specified. OpenCore should pick up on this entry automatically\n\n\n\n\n# \"You can't change the startup disk to the selected disk\" error\n\nThis is commonly caused by either:\n\n * 3rd Party NTFS Drivers(ie. Paragon)\n * Irregular partition setup of the Windows drive, specifically that the EFI is not the first partition.\n\nTo fix the former, either disable or uninstall these tools.\n\nTo fix the latter, we need to enable this quirk:\n\n * PlatformInfo -> Generic -> AdviseFeatures -> True\n\n\n\n\n# Booting Windows results in BlueScreen or Linux crashes\n\nThis is due to alignment issues, make sure SyncRuntimePermissions is enabled on firmwares supporting MATs. Check your logs whether your firmware supports Memory Attribute Tables(generally seen on 2018 firmwares and newer)\n\nFor Z390 and newer motherboards, you'll also want to enable ProtectUefiServices to ensure OpenCore's patches are applying correctly.\n\nIf your firmware is quite old(generally 2013 and older), you'll want to enable ProtectMemoryRegions.\n\nDue to the variations of firmwares from vendor to vendor, you'll need to play around with the combination of these 3 quirks and see which works best.\n\nCommon Windows error code:\n\n * 0xc000000d\n\n\n# Booting Windows error: OCB: StartImage failed - Already started\n\nThis is due to OpenCore getting confused when trying to boot Windows and accidentally thinking it's booting OpenCore. This can be avoided by either move Windows to it's own drive or adding a custom drive path under BlessOverride. See Configuration.pdf and Can't find Windows/BootCamp drive in picker entry for more details.\n\n\n# Windows Startup Disk can't see APFS drives\n\n * Outdated BootCamp drivers(generally ver 6.0 will come with brigadier, BootCamp Utility in macOS provides newer version like ver 6.1). You can try to alleviate these issues by either updating to the newest release with Apple's software updater or selecting a newer SMBIOS from brigadier(ie. --model iMac19,1) and when running brigadier.\n\nFor the latter, you'll need to run the following(replace filename.msi with the BootCamp installation msi):\n\nmsiexec.exe /x \"c:\\filename.msi\"\n",normalizedContent:"# installing and using bootcamp utilities\n\nso a neat feature of opencore is the ability to avoid the bios entirely and use startup disk solely for multiboot. problem comes in when we try to boot windows and have no way of setting the boot option back to macos. that's where the bootcamp utilities come in.\n\n * note: this guide will not cover the creation of the windows installer, only the installation of bootcamp drivers.\n   * example of windows installer creation: build a bootable windows iso\n   * reminder: windows must be gpt/guid based, opencore will not boot legacy installs\n * note 2: using bootcamp utilities from macos will erase the efi/boot/bootx64.efi file on your efi, which is needed for booting opencore. and opencore itself does not support mbr based installs so the utility is useless to us\n\n\n# preparations\n\nto start we'll need the following:\n\n * windows already installed\n   * must be uefi/gpt based\n * brigadier\n   * to download the bootcamp drivers\n * setup launcheroption\n   * not required but can help alleviate headaches when windows erases the bootx64.efi opencore uses\n\n\n# installation\n\nto install, it's as simple as grabbing brigadier and running either brigadier.bat for windows or brigadier.command for macos. if the smbios you're currently using either has bootcamp issues or want to download for another smbios, you can add -- model{smbios} to the end:\n\npath/to/brigadier --model macpro7,1\n\n\n * note: older versions of the bootcamp installer(6.0) do not support apfs, you'll need to either choose a newer smbios that would have it bundled(ie. imac 19,1) or after installation update your bootcamp software. see below for more details on troubleshooting: windows startup disk can't see apfs drives\n\n\n\nnext you will find our bootcamp drivers under either:\n\n * windows:\n\n\\users\\{username}\\bootcamp-{filename}\\bootcamp\n\n\n * macos:\n\n/users/{username}/bootcamp-{filename}/windowssupport.dmg\n\n\nmacos users will next need to expand windowssupport.dmg and place it somewhere windows can get.\n\n\n\nnext, within windows, you have two choices.\n\neither navigate to the bootcamp-{filename}\\bootcamp folder and run setup.exe, this requires correct spoofing of smbios systemproductname - shown as system model in windows - to launch:\n\n\n\nalternatively, launch bootcamp-{filename}\\bootcamp\\drivers\\apple\\bootcamp.msi as administrator - for instance by starting it directly from an administrator command shell - this skips the bootcamp model check entirely:\n\n\n\nonce all is finished, you now have bootcamp switching! there should be a little bootcamp icon in you tray now that you can select which drive to boot to.\n\n * note: for those no needing the extra drivers bootcamp provides, you can delete the following:\n   * $winpedriver$: do not delete the folder itself, just the drivers inside\n     * apple wifi card users will want to keep the following:\n       * $winpedriver$/broadcomwireless\n       * $winpedriver$/broadcombluetooth\n       * $winpedriver$/applebluetoothbroadcom\n   * bootcamp/drivers/...\n     * do not delete bootcamp/drivers/apple\n     * apple wifi card users will want to keep the following:\n       * bootcamp/drivers/broadcom/broadcombluetooth\n\n\n# troubleshooting\n\n * can't find windows/bootcamp drive in picker\n * \"you can't change the startup disk to the selected disk\" error\n * booting windows results in bluescreen or linux crashes\n * booting windows error: ocb: startimage failed - already started\n * windows startup disk can't see apfs drives\n\n\n# can't find windows/bootcamp drive in picker\n\nso with opencore, we have to note that legacy windows installs are not supported, only uefi. most installs now are uefi based but those made by bootcamp assistant in macos are legacy based, so you'll have to find other means to make an installer(google's your friend). this also means masterbootrecord/hybrid partitions are also broken so you'll need to format the drive you want to install onto with diskutility.\n\nnow to get onto troubleshooting:\n\n * make sure misc -> security -> scanpolicy is set to 0 to show all drives\n\nif windows and opencore's boot loaders are on the same drive, you'll need to add a blessoverride entry:\n\nmisc -> blessoverride -> \\efi\\microsoft\\boot\\bootmgfw.efi\n\n\n * note: as of opencore 0.5.9, this no longer needs to be specified. opencore should pick up on this entry automatically\n\n\n\n\n# \"you can't change the startup disk to the selected disk\" error\n\nthis is commonly caused by either:\n\n * 3rd party ntfs drivers(ie. paragon)\n * irregular partition setup of the windows drive, specifically that the efi is not the first partition.\n\nto fix the former, either disable or uninstall these tools.\n\nto fix the latter, we need to enable this quirk:\n\n * platforminfo -> generic -> advisefeatures -> true\n\n\n\n\n# booting windows results in bluescreen or linux crashes\n\nthis is due to alignment issues, make sure syncruntimepermissions is enabled on firmwares supporting mats. check your logs whether your firmware supports memory attribute tables(generally seen on 2018 firmwares and newer)\n\nfor z390 and newer motherboards, you'll also want to enable protectuefiservices to ensure opencore's patches are applying correctly.\n\nif your firmware is quite old(generally 2013 and older), you'll want to enable protectmemoryregions.\n\ndue to the variations of firmwares from vendor to vendor, you'll need to play around with the combination of these 3 quirks and see which works best.\n\ncommon windows error code:\n\n * 0xc000000d\n\n\n# booting windows error: ocb: startimage failed - already started\n\nthis is due to opencore getting confused when trying to boot windows and accidentally thinking it's booting opencore. this can be avoided by either move windows to it's own drive or adding a custom drive path under blessoverride. see configuration.pdf and can't find windows/bootcamp drive in picker entry for more details.\n\n\n# windows startup disk can't see apfs drives\n\n * outdated bootcamp drivers(generally ver 6.0 will come with brigadier, bootcamp utility in macos provides newer version like ver 6.1). you can try to alleviate these issues by either updating to the newest release with apple's software updater or selecting a newer smbios from brigadier(ie. --model imac19,1) and when running brigadier.\n\nfor the latter, you'll need to run the following(replace filename.msi with the bootcamp installation msi):\n\nmsiexec.exe /x \"c:\\filename.msi\"\n",charsets:{}},{title:"Using LauncherOption",frontmatter:{},regularPath:"/multiboot/bootstrap.html",relativePath:"multiboot/bootstrap.md",key:"v-aed32214",path:"/multiboot/bootstrap.html",headers:[{level:2,title:"Prerequisites",slug:"prerequisites",normalizedTitle:"prerequisites",charIndex:611},{level:2,title:"Booting",slug:"booting",normalizedTitle:"booting",charIndex:1076},{level:2,title:"Troubleshooting",slug:"troubleshooting",normalizedTitle:"troubleshooting",charIndex:1442},{level:3,title:"Verify LauncherOption entry was applied",slug:"verify-launcheroption-entry-was-applied",normalizedTitle:"verify launcheroption entry was applied",charIndex:1700},{level:3,title:"Removing LauncherOption entry from BIOS",slug:"removing-launcheroption-entry-from-bios",normalizedTitle:"removing launcheroption entry from bios",charIndex:1743},{level:2,title:"Updating Bootstrap in 0.6.6",slug:"updating-bootstrap-in-0-6-6",normalizedTitle:"updating bootstrap in 0.6.6",charIndex:143},{level:3,title:"With Bootstrap disabled",slug:"with-bootstrap-disabled",normalizedTitle:"with bootstrap disabled",charIndex:2868},{level:3,title:"With Bootstrap enabled",slug:"with-bootstrap-enabled",normalizedTitle:"with bootstrap enabled",charIndex:3098}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"Prerequisites Booting Troubleshooting Verify LauncherOption entry was applied Removing LauncherOption entry from BIOS Updating Bootstrap in 0.6.6 With Bootstrap disabled With Bootstrap enabled",content:"# Using LauncherOption\n\n * Note: With OpenCore 0.6.6, Bootstrap.efi has been replaced with LauncherOption. See here for more info on updating: Updating Bootstrap in 0.6.6\n\nWith OpenCore 0.6.6 and newer, we are now able to launch OpenCore directly from our firmwares without needing a launcher (Bootstrap.efi or BOOTx64.efi) as an intermediary. This allows us to add OpenCore to our motherboard's boot menu and prevent issues where either Windows or Linux try to overwrite the EFI/BOOT/BOOTx64.efi path, which can happen when installing or updating Windows and therefore breaking OpenCore's ability to boot.\n\n\n# Prerequisites\n\n\n\n * OpenCore 0.6.6 or newer\n   * For 0.6.5 and older users upgrading, see here: Updating Bootstrap in 0.6.6\n * config.plist settings:\n   * Misc -> Boot -> LauncherOption = Full\n     * Use Short for Insyde based firmwares, commonly found on laptops\n   * UEFI -> Quirks -> RequestBootVarRouting = True\n * OpenShell\n   * Bundled with OpenCore\n   * Remember to add this to both EFI/OC/Tools and Misc -> Tools\n   * This is mainly for troubleshooting\n\n\n# Booting\n\nIf everything is set up correctly, the first boot will have OpenCore create a new boot option in our BIOS (pointing to EFI/OC/OpenCore.efi) and future boots will update the entry making sure it's correct and ensuring it is still present. This now allows us to remove BOOTx64.efi and not worry about other OSes overwriting the EFI/BOOT/BOOTx64.efi path.\n\n\n# Troubleshooting\n\nIf no new boot option is created, you can follow these troubleshooting steps but first double-check the prerequisites were met. The following sections are a mini-guide in case LauncherOption doesn't work or you'd like to do it manually.\n\n * Verify LauncherOption entry was applied\n * Removing LauncherOption entry from BIOS\n\n\n# Verify LauncherOption entry was applied\n\nFor those wanting to verify that the entry was applied in OpenCore, enable logging (see OpenCore Debugging) and check for entries similar to these:\n\nOCB: Have existing option 1, valid 1\nOCB: Boot order has first option as the default option\n\n\n\n# Removing LauncherOption entry from BIOS\n\nBecause the LauncherOption entry is a protected entry when resetting NVRAM, you'll need to disable LauncherOption first before you can remove it:\n\n * Misc -> Security -> AllowNvramReset -> True\n * Misc -> Boot -> LauncherOption -> Disabled\n\nOnce these are set, you can reboot into the OpenCore picker and select the Reset NVRAM entry to clear your NVRAM, which will remove the LauncherOption entry too..\n\n\n# Updating Bootstrap in 0.6.6\n\nFor those updating to 0.6.6, you may have noticed Bootstrap.efi has been removed from OpenCore. This is due to changes with how OpenCore works; specifically OpenCore is now a UEFI application instead of a driver. This means OpenCore.efi can be loaded directly and a launcher (Bootstrap.efi) is no longer needed.\n\n\n# With Bootstrap disabled\n\nIf Bootstrap is disabled prior to updating to 0.6.6, you don't need to make any changes, just the usual file swapping. If afterwards you would like to try LauncherOption, you can do so with no issues.\n\n\n# With Bootstrap enabled\n\nIf Bootstrap is enabled prior to updating to 0.6.6, and your motherboard's firmware will autodetect EFI/BOOT/BOOTx64.efi, you can do the following before you update:\n\n 1. Set Misc -> Security -> AllowNvramReset to True and Misc -> Security -> BootProtect to None, then reset NVRAM (either outside of or in OpenCore) and boot. This will get rid of the old Bootstrap boot entry.\n\n 2. Update your OpenCore setup as normal, ensuring that you copy BOOTx64.efi from the OpenCore package to EFI/BOOT/BOOTx64.efi and set Misc -> Boot -> LauncherOption in your config.plist to Full (or Short if previously using BootstrapShort).\n\n 3. Reboot.\n    \n    On first boot you will need to boot from EFI/BOOT/BOOTx64.efi, but on subsequent boots you should see the LauncherOption entry created by OpenCore directly booting OpenCore.efi.\n\nIf your firmware does not automatically detect EFI/BOOT/BOOTx64.efi or you cannot put OpenCore's launcher there for any reason, you have multiple other options:\n\n * Put OpenShell.efi on a USB, rename and move to EFI/BOOT/BOOTx64.efi, and follow the above steps, except instead of selecting BOOTx64.efi from the boot menu, boot into the USB and launch OpenCore from there directly.\n * Add a folder EFI/OC/Bootstrap and copy and rename BOOTx64.efi from the OpenCore package to EFI/OC/Bootstrap/Bootstrap.efi. Then, after updating your OpenCore setup, set Misc -> Boot -> LauncherOption to the appropriate option (Full, or Short if previously using BootstrapShort) and boot OpenCore using the existing entry create by Bootstrap. After your first boot, you should see a new OpenCore boot entry added. You can then reset NVRAM in OpenCore (making sure to keep LauncherOption enabled so you don't delete the new entry) to get rid of the old Bootstrap boot entry.\n\nConversion notes:\n\n0.5.8 - 0.6.5                     0.6.6+\nMisc -> Security -> BootProtect   Misc -> Boot -> LauncherOption\nBootstrap                         Full\nBootstrapShort                    Short",normalizedContent:"# using launcheroption\n\n * note: with opencore 0.6.6, bootstrap.efi has been replaced with launcheroption. see here for more info on updating: updating bootstrap in 0.6.6\n\nwith opencore 0.6.6 and newer, we are now able to launch opencore directly from our firmwares without needing a launcher (bootstrap.efi or bootx64.efi) as an intermediary. this allows us to add opencore to our motherboard's boot menu and prevent issues where either windows or linux try to overwrite the efi/boot/bootx64.efi path, which can happen when installing or updating windows and therefore breaking opencore's ability to boot.\n\n\n# prerequisites\n\n\n\n * opencore 0.6.6 or newer\n   * for 0.6.5 and older users upgrading, see here: updating bootstrap in 0.6.6\n * config.plist settings:\n   * misc -> boot -> launcheroption = full\n     * use short for insyde based firmwares, commonly found on laptops\n   * uefi -> quirks -> requestbootvarrouting = true\n * openshell\n   * bundled with opencore\n   * remember to add this to both efi/oc/tools and misc -> tools\n   * this is mainly for troubleshooting\n\n\n# booting\n\nif everything is set up correctly, the first boot will have opencore create a new boot option in our bios (pointing to efi/oc/opencore.efi) and future boots will update the entry making sure it's correct and ensuring it is still present. this now allows us to remove bootx64.efi and not worry about other oses overwriting the efi/boot/bootx64.efi path.\n\n\n# troubleshooting\n\nif no new boot option is created, you can follow these troubleshooting steps but first double-check the prerequisites were met. the following sections are a mini-guide in case launcheroption doesn't work or you'd like to do it manually.\n\n * verify launcheroption entry was applied\n * removing launcheroption entry from bios\n\n\n# verify launcheroption entry was applied\n\nfor those wanting to verify that the entry was applied in opencore, enable logging (see opencore debugging) and check for entries similar to these:\n\nocb: have existing option 1, valid 1\nocb: boot order has first option as the default option\n\n\n\n# removing launcheroption entry from bios\n\nbecause the launcheroption entry is a protected entry when resetting nvram, you'll need to disable launcheroption first before you can remove it:\n\n * misc -> security -> allownvramreset -> true\n * misc -> boot -> launcheroption -> disabled\n\nonce these are set, you can reboot into the opencore picker and select the reset nvram entry to clear your nvram, which will remove the launcheroption entry too..\n\n\n# updating bootstrap in 0.6.6\n\nfor those updating to 0.6.6, you may have noticed bootstrap.efi has been removed from opencore. this is due to changes with how opencore works; specifically opencore is now a uefi application instead of a driver. this means opencore.efi can be loaded directly and a launcher (bootstrap.efi) is no longer needed.\n\n\n# with bootstrap disabled\n\nif bootstrap is disabled prior to updating to 0.6.6, you don't need to make any changes, just the usual file swapping. if afterwards you would like to try launcheroption, you can do so with no issues.\n\n\n# with bootstrap enabled\n\nif bootstrap is enabled prior to updating to 0.6.6, and your motherboard's firmware will autodetect efi/boot/bootx64.efi, you can do the following before you update:\n\n 1. set misc -> security -> allownvramreset to true and misc -> security -> bootprotect to none, then reset nvram (either outside of or in opencore) and boot. this will get rid of the old bootstrap boot entry.\n\n 2. update your opencore setup as normal, ensuring that you copy bootx64.efi from the opencore package to efi/boot/bootx64.efi and set misc -> boot -> launcheroption in your config.plist to full (or short if previously using bootstrapshort).\n\n 3. reboot.\n    \n    on first boot you will need to boot from efi/boot/bootx64.efi, but on subsequent boots you should see the launcheroption entry created by opencore directly booting opencore.efi.\n\nif your firmware does not automatically detect efi/boot/bootx64.efi or you cannot put opencore's launcher there for any reason, you have multiple other options:\n\n * put openshell.efi on a usb, rename and move to efi/boot/bootx64.efi, and follow the above steps, except instead of selecting bootx64.efi from the boot menu, boot into the usb and launch opencore from there directly.\n * add a folder efi/oc/bootstrap and copy and rename bootx64.efi from the opencore package to efi/oc/bootstrap/bootstrap.efi. then, after updating your opencore setup, set misc -> boot -> launcheroption to the appropriate option (full, or short if previously using bootstrapshort) and boot opencore using the existing entry create by bootstrap. after your first boot, you should see a new opencore boot entry added. you can then reset nvram in opencore (making sure to keep launcheroption enabled so you don't delete the new entry) to get rid of the old bootstrap boot entry.\n\nconversion notes:\n\n0.5.8 - 0.6.5                     0.6.6+\nmisc -> security -> bootprotect   misc -> boot -> launcheroption\nbootstrap                         full\nbootstrapshort                    short",charsets:{}},{title:"用AppleALC修复音频",frontmatter:{},regularPath:"/universal/audio.html",relativePath:"universal/audio.md",key:"v-0f9cc8f6",path:"/universal/audio.html",headers:[{level:2,title:"查找你的layout ID",slug:"查找你的layout-id",normalizedTitle:"查找你的layout id",charIndex:240},{level:2,title:"测试你的layout",slug:"测试你的layout",normalizedTitle:"测试你的layout",charIndex:931},{level:2,title:"使layout ID更永久",slug:"使layout-id更永久",normalizedTitle:"使layout id更永久",charIndex:1237},{level:2,title:"其他问题",slug:"其他问题",normalizedTitle:"其他问题",charIndex:2058},{level:3,title:"AMD上没有麦克风",slug:"amd上没有麦克风",normalizedTitle:"amd上没有麦克风",charIndex:2067},{level:3,title:"Clover中相同的layout ID不在OpenCore上工作",slug:"clover中相同的layout-id不在opencore上工作",normalizedTitle:"clover中相同的layout id不在opencore上工作",charIndex:2210},{level:3,title:"在10.15中，电源状态改变导致Kernel Panic",slug:"在10-15中-电源状态改变导致kernel-panic",normalizedTitle:"在10.15中，电源状态改变导致kernel panic",charIndex:2402},{level:2,title:"排错",slug:"排错",normalizedTitle:"排错",charIndex:2539},{level:3,title:"检查你是否有正确的内核扩展",slug:"检查你是否有正确的内核扩展",normalizedTitle:"检查你是否有正确的内核扩展",charIndex:2565},{level:3,title:"检查AppleALC补丁是否正确",slug:"检查applealc补丁是否正确",normalizedTitle:"检查applealc补丁是否正确",charIndex:2582},{level:3,title:"检查AppleHDA是否正常",slug:"检查applehda是否正常",normalizedTitle:"检查applehda是否正常",charIndex:2602},{level:3,title:"AppleALC工作不一致",slug:"applealc工作不一致",normalizedTitle:"applealc工作不一致",charIndex:2620},{level:3,title:"AppleALC在多个声卡下不能正常工作",slug:"applealc在多个声卡下不能正常工作",normalizedTitle:"applealc在多个声卡下不能正常工作",charIndex:2637},{level:3,title:"Windows重启后，AppleALC无法工作",slug:"windows重启后-applealc无法工作",normalizedTitle:"windows重启后，applealc无法工作",charIndex:2661}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"查找你的layout ID 测试你的layout 使layout ID更永久 其他问题 AMD上没有麦克风 Clover中相同的layout ID不在OpenCore上工作 在10.15中，电源状态改变导致Kernel Panic 排错 检查你是否有正确的内核扩展 检查AppleALC补丁是否正确 检查AppleHDA是否正常 AppleALC工作不一致 AppleALC在多个声卡下不能正常工作 Windows重启后，AppleALC无法工作",content:"# 用AppleALC修复音频\n\n因此，首先，我们假设您已经安装了Lilu和AppleALC，如果您不确定它是否已正确加载，则可以在终端中运行以下命令（这也将检查AppleHDA是否已加载，因为没有这个AppleALC就没有什么可修补的）：\n\nkextstat | grep -E \"AppleHDA|AppleALC|Lilu\"\n\n\n如果3个都出现，您就可以开始了。并确保不存在VoodooHDA。否则这将与AppleALC冲突。\n\n如果您遇到问题，请参阅问题排查部分\n\n\n# 查找你的layout ID\n\n因此，对于此示例，我们假设您的编解码器为ALC1220。要验证您的，您有以下几种选择：\n\n * 检查主板的规格页和手册\n * 检查Windows中的“设备管理器”\n * 检查Windows下的HWInfo64\n   * 确保在打开时取消选择Summary-only和Sensors-only\n * 在Windows中检查AIDA64 Extreme\n * 在Linux的终端上运行cat\n   * cat /proc/asound/card0/codec#0 | less\n\n现在有了编解码器，我们想交叉引用它与AppleALC支持的编解码器列表:\n\n * AppleALC支持的编解码器\n\n使用ALC1220，我们得到以下结果:\n\n0x100003, layout 1, 2, 3, 5, 7, 11, 13, 15, 16, 21, 27, 28, 29, 34\n\n\n因此，它告诉我们两件事:\n\n * 支持哪个硬件版本(0x100003)，仅在列出具有不同布局的多个版本时相关\n * 我们的编解码器支持的layout ID(layout 1, 2, 3, 5, 7, 11, 13, 15, 16, 21, 27, 28, 29, 34)\n\n现在有了支持的layout ID列表，我们准备进行一些尝试\n\nNote: 如果你的音频编解码器是ALC 3XXX，这很可能是假的，只是一个重新命名的控制器，做你的研究，看看真正的控制器是什么。\n\n * 这方面的一个例子是ALC3601，但是当我们加载Linux时，显示的是真实名称：ALC 671\n\n\n# 测试你的layout\n\n为了测试我们的layout ID，我们将使用boot-argalcid=xxx，其中xxx是您的layout。记住，一次尝试一个布局id 。不要添加多个ID或alcid启动参数，如果一个不工作，然后尝试下一个ID等\n\nconfig.plist\n├── NVRAM\n  ├── Add\n    ├── 7C436110-AB2A-4BBB-A880-FE41995C9F82\n          ├── boot-args | String | alcid=11\n\n\n如果没有布局ID工作，尝试为您的系统创建SSDT-HPET修复-AppleHDA为笔记本和一些台式机工作时需要。\n\n\n# 使layout ID更永久\n\n一旦你找到了一个与你的黑苹果工作的布局ID，我们可以创建一个更永久的解决方案，更接近真实的mac设置他们的布局ID。\n\n在AppleALC中，有一个优先级结构，属性的优先级是这样的:\n\n 1. alcid=xxx boot-arg，用于调试并覆盖所有其他值\n 2. alc-layout-id 在DeviceProperties,，应该只在苹果硬件上使用\n 3. layout-id 在DeviceProperties，应该在苹果和非苹果硬件上使用\n\n首先，我们需要找出音频控制器在PCI地图上的位置。为此，我们将使用一个名为gfxutil的方便工具，然后在macOS终端上使用:\n\npath/to/gfxutil -f HDEF\n\n\n\n\n然后将这个PciRoot和子配置layout-id添加到你的config.plist中DeviceProperties -> Add部分:\n\n\n\n请注意，AppleALC可以接受十进制/数字和十六进制/数据，通常最好的方法是十六进制，因为你避免了任何不必要的转换。你可以使用一个简单的十进制到十六进制计算器来找到你的答案。printf '%x\\n' DECI_VAL:\n\n\n\n所以在这个例子中，alcid=11可以变成:\n\n * layout-id | Data | <0B000000>\n * layout-id | Number | <11>\n\n请注意，最终的HEX/Data值总共应该是4个字节（ 0B 00 00 00，对于layout ID超过255（FF 00 00 00）将需要记住字节被交换。所以256就变成了00 01 00 00\n\n * 使用十进制/数字方法可以完全忽略十六进制交换和数据大小\n\n提醒:你之后必须删除boot-arg，因为它将始终具有最高优先级，不删除的话AppleALC将忽略所有如DeviceProperties的其他条目\n\n\n# 其他问题\n\n\n# AMD上没有麦克风\n\n * 这是与AMD一起运行AppleALC时的常见问题，特别是没有补丁来支持麦克风输入。目前“最好”的解决方案是买一个USB DAC/麦克风。实际上VoodooHDA.kext方法也可以，但VoodooHDA的问题在于它不稳定，音质也比AppleALC差\n\n\n# Clover中相同的layout ID不在OpenCore上工作\n\n这可能会导致IRQ冲突，在Clover上有一个自动应用的ACPI热补丁。修复这个有点痛苦，但SSDTTime的FixHPET选项可以处理大多数情况。\n\n对于RTC和HPET从USB和音频等其他设备获取irq的奇怪情况，您可以参考trashOS repo中的HP Compaq DC7900 ACPI补丁示例\n\n\n# 在10.15中，电源状态改变导致Kernel Panic\n\n * 在你的config.plist中启用PowerTimeoutKernelPanic：\n   * Kernel -> Quirks -> PowerTimeoutKernelPanic -> True\n\n\n# 排错\n\n为了排除故障，我们需要复习几件事:\n\n * 检查你是否有正确的内核扩展\n * 检查AppleALC补丁是否正确\n * 检查AppleHDA是否正常\n * AppleALC工作不一致\n * AppleALC在多个声卡下不能正常工作\n * Windows重启后，AppleALC无法工作\n * 注意：从此处跳转可能需要双击\n\n\n# 检查你是否有正确的内核扩展\n\n首先，我们假设你已经安装了Lilu和AppleALC，如果你不确定它是否被正确加载，你可以在终端运行以下命令(这也会检查AppleHDA是否被加载，因为没有这个AppleALC没有什么可以修补的):\n\nkextstat | grep -E \"AppleHDA|AppleALC|Lilu\"\n\n\n如果这三个都出现了，你就可以开始了。确保VoodooHDA 不存在。否则，这将与AppleALC冲突。需要确保系统中没有以下内核扩展:\n\n * RealtekALC.kext\n * CloverALC.kext\n * VoodooHDA.kext\n * HDA Blocker.kext\n * HDAEnabler#.kext(# 可以是1, 2, 或3)\n\n> Lilu和/或AppleALC没有出现\n\n一般来说，最好的开始是查看你的OpenCore日志，看看Lilu和AppleALC是否正确注入:\n\n14:354 00:020 OC: Prelink injection Lilu.kext () - Success\n14:367 00:012 OC: Prelink injection AppleALC.kext () - Success\n\n\n如果显示注入失败:\n\n15:448 00:007 OC: Prelink injection AppleALC.kext () - Invalid Parameter\n\n\n你可以查看原因的主要地方:\n\n * 注入顺序：确保Lilu在内核扩展中位于AppleALC之上\n * 所有内核扩展都是最新的：对于Lilu插件尤其重要，因为不匹配的文本可能会导致问题\n\nNote: 要设置文件日志记录，请参见OpenCore调试.\n\n\n# 检查AppleALC补丁是否正确\n\n所以在AppleALC中，检查补丁是否正确的最简单方法之一就是查看你的音频控制器是否被正确地命名。抓取IORegistryExplorer，看看你是否有一个HDEF设备:\n\n\n\n从上图中可以看到，我们有以下内容:\n\n * HDEF设备意味着我们的重命名完成了这项工作\n * AppleHDAController attached表示苹果的音频内核扩展连接成功\n * alc-layout-id 是一个属性显示我们的boot-arg/DeviceProperty注入成功\n   * 注意：layout-id | Data | 07000000 是默认layout， alc-layout-id 将覆盖它，并成为AppleHDA将使用的布局\n\n注意:不要手动重命名您的音频控制器，这可能会导致问题，因为AppleALC正在尝试修补程序。让苹果去做它的工作。\n\n更多示例:\n\n正确的LAYOUT-ID   不正确的LAYOUT-ID\n               \n\n正如你从上面的2中看到的那样，右边的图像缺少了很多AppleHDAInput设备，这意味着AppleALC无法将你的物理端口匹配到它可以理解和输出的东西。这意味着您需要做一些工作来为系统找到正确的布局ID。\n\n\n# 检查AppleHDA是否正常\n\n这一节主要是有关那些谁是替换库存的AppleHDA与自定义的，这将验证是否你是真正的:\n\nsudo kextcache -i / && sudo kextcache -u /\n\n\n这将检查签名是否对AppleHDA有效，如果不是，那么你将需要为你的系统获取AppleHDA的原始副本并替换它或更新macOS（更新时将清除内核扩展）。这只会发生在你手动修补AppleHDA时，所以如果这是一个新安装，你不太可能有签名问题。\n\n\n# AppleALC工作不一致\n\n有时会出现罕见的情况，即您的硬件没有及时初始化AppleHDAController，导致没有声音输出。要解决这个问题，你可以:\n\n在引导参数中指定延迟:\n\nalcdelay=1000\n\n\n或者通过DeviceProperties指定(在HDEF设备中):\n\nalc-delay | Number | 1000\n\n\n上面的boot-arg/DeviceProperty会使AppleHDAController延迟1000毫秒(1秒)，注意ALC延迟不能超过3000毫秒。(https://github.com/acidanthera/AppleALC/blob/2ed6af4505a81c8c8f5a6b18c249eb478266739c/AppleALC/kern_alc.cpp#L373)\n\n\n# AppleALC在多个声卡下不能正常工作\n\n对于罕见的情况下，你有2个声卡(例如。板载Realtek和外部PCIe卡)，您可能希望避免AppleALC修补您不使用或不需要修补的设备(如本机PCIe卡)。如果你发现当外部音频控制器存在时，AppleALC不会修补你的板载音频控制器，这一点尤其重要。\n\n为了解决这个问题，我们首先需要确定两个音频控制器的位置。最简单的方法是运行gfxutil并搜索PCI ID:\n\n/path/to/gfxutil\n\n\n现在有了这么大的输出，你会想找到你的PciRoot路径，对于这个例子，让我们使用一个Creative Sound-Blaster AE-9PE PCIe声卡。为此，我们知道PCI ID是1102:0010。所以通过gfxutil输出，我们得到了这个:\n\n66:00.0 1102:0010 /PC02@0/BR2A@0/SL05@0 = PciRoot(0x32)/Pci(0x0,0x0)/Pci(0x0,0x0)\n\n\n从这里，我们可以清楚地看到我们的PciRoot路径是:\n\nPciRoot(0x32)/Pci(0x0,0x0)/Pci(0x0,0x0)\n\n\n * 注意:这将假设您知道外部声卡的供应商和设备ID。以下是常见的供应商编号，供参考:\n   * Creative Labs: 1102\n   * 华硕: 1043\n * 注意2: 您的ACPI和PciRoot路径看起来会有所不同，因此请注意您的 gfxutil输出\n\n现在我们有了PciRoot路径，我们终于可以打开我们的config.plist添加我们的补丁。\n\n在DeviceProperties -> Add下，你会想要添加你的PciRoot(作为一个字典)和子调用 external-audio:\n\nDeviceProperties\n| --- > Add\n | --- > PciRoot(0x32)/Pci(0x0,0x0)/Pci(0x0,0x0)\n  | ----\x3e external-audio | Data | 01\n\n\n\n\n完成后，你可以重新启动，AppleALC现在应该忽略你的外部音频控制器!\n\n\n# Windows重启后，AppleALC无法工作\n\n如果你发现从Windows重新启动到macOS会中断音频，我们建议在boot-args中添加' alctcsel=1 '，或者在DeviceProperties中为音频设备添加此属性:\n\nDeviceProperties\n| --- > Add\n | --- > PciRoot(0x32)/Pci(0x0,0x0)/Pci(0x0,0x0)(Adjust to your device)\n  | ----\x3e alctcsel | Data | 01000000\n",normalizedContent:"# 用applealc修复音频\n\n因此，首先，我们假设您已经安装了lilu和applealc，如果您不确定它是否已正确加载，则可以在终端中运行以下命令（这也将检查applehda是否已加载，因为没有这个applealc就没有什么可修补的）：\n\nkextstat | grep -e \"applehda|applealc|lilu\"\n\n\n如果3个都出现，您就可以开始了。并确保不存在voodoohda。否则这将与applealc冲突。\n\n如果您遇到问题，请参阅问题排查部分\n\n\n# 查找你的layout id\n\n因此，对于此示例，我们假设您的编解码器为alc1220。要验证您的，您有以下几种选择：\n\n * 检查主板的规格页和手册\n * 检查windows中的“设备管理器”\n * 检查windows下的hwinfo64\n   * 确保在打开时取消选择summary-only和sensors-only\n * 在windows中检查aida64 extreme\n * 在linux的终端上运行cat\n   * cat /proc/asound/card0/codec#0 | less\n\n现在有了编解码器，我们想交叉引用它与applealc支持的编解码器列表:\n\n * applealc支持的编解码器\n\n使用alc1220，我们得到以下结果:\n\n0x100003, layout 1, 2, 3, 5, 7, 11, 13, 15, 16, 21, 27, 28, 29, 34\n\n\n因此，它告诉我们两件事:\n\n * 支持哪个硬件版本(0x100003)，仅在列出具有不同布局的多个版本时相关\n * 我们的编解码器支持的layout id(layout 1, 2, 3, 5, 7, 11, 13, 15, 16, 21, 27, 28, 29, 34)\n\n现在有了支持的layout id列表，我们准备进行一些尝试\n\nnote: 如果你的音频编解码器是alc 3xxx，这很可能是假的，只是一个重新命名的控制器，做你的研究，看看真正的控制器是什么。\n\n * 这方面的一个例子是alc3601，但是当我们加载linux时，显示的是真实名称：alc 671\n\n\n# 测试你的layout\n\n为了测试我们的layout id，我们将使用boot-argalcid=xxx，其中xxx是您的layout。记住，一次尝试一个布局id 。不要添加多个id或alcid启动参数，如果一个不工作，然后尝试下一个id等\n\nconfig.plist\n├── nvram\n  ├── add\n    ├── 7c436110-ab2a-4bbb-a880-fe41995c9f82\n          ├── boot-args | string | alcid=11\n\n\n如果没有布局id工作，尝试为您的系统创建ssdt-hpet修复-applehda为笔记本和一些台式机工作时需要。\n\n\n# 使layout id更永久\n\n一旦你找到了一个与你的黑苹果工作的布局id，我们可以创建一个更永久的解决方案，更接近真实的mac设置他们的布局id。\n\n在applealc中，有一个优先级结构，属性的优先级是这样的:\n\n 1. alcid=xxx boot-arg，用于调试并覆盖所有其他值\n 2. alc-layout-id 在deviceproperties,，应该只在苹果硬件上使用\n 3. layout-id 在deviceproperties，应该在苹果和非苹果硬件上使用\n\n首先，我们需要找出音频控制器在pci地图上的位置。为此，我们将使用一个名为gfxutil的方便工具，然后在macos终端上使用:\n\npath/to/gfxutil -f hdef\n\n\n\n\n然后将这个pciroot和子配置layout-id添加到你的config.plist中deviceproperties -> add部分:\n\n\n\n请注意，applealc可以接受十进制/数字和十六进制/数据，通常最好的方法是十六进制，因为你避免了任何不必要的转换。你可以使用一个简单的十进制到十六进制计算器来找到你的答案。printf '%x\\n' deci_val:\n\n\n\n所以在这个例子中，alcid=11可以变成:\n\n * layout-id | data | <0b000000>\n * layout-id | number | <11>\n\n请注意，最终的hex/data值总共应该是4个字节（ 0b 00 00 00，对于layout id超过255（ff 00 00 00）将需要记住字节被交换。所以256就变成了00 01 00 00\n\n * 使用十进制/数字方法可以完全忽略十六进制交换和数据大小\n\n提醒:你之后必须删除boot-arg，因为它将始终具有最高优先级，不删除的话applealc将忽略所有如deviceproperties的其他条目\n\n\n# 其他问题\n\n\n# amd上没有麦克风\n\n * 这是与amd一起运行applealc时的常见问题，特别是没有补丁来支持麦克风输入。目前“最好”的解决方案是买一个usb dac/麦克风。实际上voodoohda.kext方法也可以，但voodoohda的问题在于它不稳定，音质也比applealc差\n\n\n# clover中相同的layout id不在opencore上工作\n\n这可能会导致irq冲突，在clover上有一个自动应用的acpi热补丁。修复这个有点痛苦，但ssdttime的fixhpet选项可以处理大多数情况。\n\n对于rtc和hpet从usb和音频等其他设备获取irq的奇怪情况，您可以参考trashos repo中的hp compaq dc7900 acpi补丁示例\n\n\n# 在10.15中，电源状态改变导致kernel panic\n\n * 在你的config.plist中启用powertimeoutkernelpanic：\n   * kernel -> quirks -> powertimeoutkernelpanic -> true\n\n\n# 排错\n\n为了排除故障，我们需要复习几件事:\n\n * 检查你是否有正确的内核扩展\n * 检查applealc补丁是否正确\n * 检查applehda是否正常\n * applealc工作不一致\n * applealc在多个声卡下不能正常工作\n * windows重启后，applealc无法工作\n * 注意：从此处跳转可能需要双击\n\n\n# 检查你是否有正确的内核扩展\n\n首先，我们假设你已经安装了lilu和applealc，如果你不确定它是否被正确加载，你可以在终端运行以下命令(这也会检查applehda是否被加载，因为没有这个applealc没有什么可以修补的):\n\nkextstat | grep -e \"applehda|applealc|lilu\"\n\n\n如果这三个都出现了，你就可以开始了。确保voodoohda 不存在。否则，这将与applealc冲突。需要确保系统中没有以下内核扩展:\n\n * realtekalc.kext\n * cloveralc.kext\n * voodoohda.kext\n * hda blocker.kext\n * hdaenabler#.kext(# 可以是1, 2, 或3)\n\n> lilu和/或applealc没有出现\n\n一般来说，最好的开始是查看你的opencore日志，看看lilu和applealc是否正确注入:\n\n14:354 00:020 oc: prelink injection lilu.kext () - success\n14:367 00:012 oc: prelink injection applealc.kext () - success\n\n\n如果显示注入失败:\n\n15:448 00:007 oc: prelink injection applealc.kext () - invalid parameter\n\n\n你可以查看原因的主要地方:\n\n * 注入顺序：确保lilu在内核扩展中位于applealc之上\n * 所有内核扩展都是最新的：对于lilu插件尤其重要，因为不匹配的文本可能会导致问题\n\nnote: 要设置文件日志记录，请参见opencore调试.\n\n\n# 检查applealc补丁是否正确\n\n所以在applealc中，检查补丁是否正确的最简单方法之一就是查看你的音频控制器是否被正确地命名。抓取ioregistryexplorer，看看你是否有一个hdef设备:\n\n\n\n从上图中可以看到，我们有以下内容:\n\n * hdef设备意味着我们的重命名完成了这项工作\n * applehdacontroller attached表示苹果的音频内核扩展连接成功\n * alc-layout-id 是一个属性显示我们的boot-arg/deviceproperty注入成功\n   * 注意：layout-id | data | 07000000 是默认layout， alc-layout-id 将覆盖它，并成为applehda将使用的布局\n\n注意:不要手动重命名您的音频控制器，这可能会导致问题，因为applealc正在尝试修补程序。让苹果去做它的工作。\n\n更多示例:\n\n正确的layout-id   不正确的layout-id\n               \n\n正如你从上面的2中看到的那样，右边的图像缺少了很多applehdainput设备，这意味着applealc无法将你的物理端口匹配到它可以理解和输出的东西。这意味着您需要做一些工作来为系统找到正确的布局id。\n\n\n# 检查applehda是否正常\n\n这一节主要是有关那些谁是替换库存的applehda与自定义的，这将验证是否你是真正的:\n\nsudo kextcache -i / && sudo kextcache -u /\n\n\n这将检查签名是否对applehda有效，如果不是，那么你将需要为你的系统获取applehda的原始副本并替换它或更新macos（更新时将清除内核扩展）。这只会发生在你手动修补applehda时，所以如果这是一个新安装，你不太可能有签名问题。\n\n\n# applealc工作不一致\n\n有时会出现罕见的情况，即您的硬件没有及时初始化applehdacontroller，导致没有声音输出。要解决这个问题，你可以:\n\n在引导参数中指定延迟:\n\nalcdelay=1000\n\n\n或者通过deviceproperties指定(在hdef设备中):\n\nalc-delay | number | 1000\n\n\n上面的boot-arg/deviceproperty会使applehdacontroller延迟1000毫秒(1秒)，注意alc延迟不能超过3000毫秒。(https://github.com/acidanthera/applealc/blob/2ed6af4505a81c8c8f5a6b18c249eb478266739c/applealc/kern_alc.cpp#l373)\n\n\n# applealc在多个声卡下不能正常工作\n\n对于罕见的情况下，你有2个声卡(例如。板载realtek和外部pcie卡)，您可能希望避免applealc修补您不使用或不需要修补的设备(如本机pcie卡)。如果你发现当外部音频控制器存在时，applealc不会修补你的板载音频控制器，这一点尤其重要。\n\n为了解决这个问题，我们首先需要确定两个音频控制器的位置。最简单的方法是运行gfxutil并搜索pci id:\n\n/path/to/gfxutil\n\n\n现在有了这么大的输出，你会想找到你的pciroot路径，对于这个例子，让我们使用一个creative sound-blaster ae-9pe pcie声卡。为此，我们知道pci id是1102:0010。所以通过gfxutil输出，我们得到了这个:\n\n66:00.0 1102:0010 /pc02@0/br2a@0/sl05@0 = pciroot(0x32)/pci(0x0,0x0)/pci(0x0,0x0)\n\n\n从这里，我们可以清楚地看到我们的pciroot路径是:\n\npciroot(0x32)/pci(0x0,0x0)/pci(0x0,0x0)\n\n\n * 注意:这将假设您知道外部声卡的供应商和设备id。以下是常见的供应商编号，供参考:\n   * creative labs: 1102\n   * 华硕: 1043\n * 注意2: 您的acpi和pciroot路径看起来会有所不同，因此请注意您的 gfxutil输出\n\n现在我们有了pciroot路径，我们终于可以打开我们的config.plist添加我们的补丁。\n\n在deviceproperties -> add下，你会想要添加你的pciroot(作为一个字典)和子调用 external-audio:\n\ndeviceproperties\n| --- > add\n | --- > pciroot(0x32)/pci(0x0,0x0)/pci(0x0,0x0)\n  | ----\x3e external-audio | data | 01\n\n\n\n\n完成后，你可以重新启动，applealc现在应该忽略你的外部音频控制器!\n\n\n# windows重启后，applealc无法工作\n\n如果你发现从windows重新启动到macos会中断音频，我们建议在boot-args中添加' alctcsel=1 '，或者在deviceproperties中为音频设备添加此属性:\n\ndeviceproperties\n| --- > add\n | --- > pciroot(0x32)/pci(0x0,0x0)/pci(0x0,0x0)(adjust to your device)\n  | ----\x3e alctcsel | data | 01000000\n",charsets:{cjk:!0}},{title:"Fixing DRM support and iGPU performance",frontmatter:{},regularPath:"/universal/drm.html",relativePath:"universal/drm.md",key:"v-6496ca56",path:"/universal/drm.html",headers:[{level:2,title:"Testing Hardware Acceleration and Decoding",slug:"testing-hardware-acceleration-and-decoding",normalizedTitle:"testing hardware acceleration and decoding",charIndex:949},{level:2,title:"Testing DRM",slug:"testing-drm",normalizedTitle:"testing drm",charIndex:3236},{level:2,title:"Fixing DRM",slug:"fixing-drm",normalizedTitle:"fixing drm",charIndex:2}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"Testing Hardware Acceleration and Decoding Testing DRM Fixing DRM",content:"# Fixing DRM support and iGPU performance\n\n * Note: Safari 14 and macOS 11, Big Sur are currently unsupported by WhateverGreen's DRM patches. Safari 13 in Catalina and older are supported just fine however.\n * Note 2: Browsers not using hardware based DRM (ie. Mozilla Firefox or Chromium-based browsers like Google Chrome and Microsoft Edge) will have working DRM without any work both on iGPUs and dGPUs. The below guide is for Safari and other applications using hardware-based DRM.\n\nSo with DRM, we have a couple things we need to mention:\n\n * DRM requires a supported dGPU\n   * See the GPU Buyers Guide for supported cards\n * DRM is broken for iGPU-only systems\n   * This could be fixed with Shiki (now WhateverGreen) til 10.12.2, but broke with 10.12.3\n   * This is due to the issue that our iGPUs don't support Apple's firmware and that our Management Engine doesn't have Apple's certificate\n * Working hardware acceleration and decoding\n\n\n# Testing Hardware Acceleration and Decoding\n\nSo before we can get started with fixing DRM, we need to make sure your hardware is working. The best way to check is by running VDADecoderChecker:\n\n\n\nIf you fail at this point, there's a couple things you can check for:\n\n * Make sure your hardware is supported\n   * See GPU Buyers Guide\n * Make sure the SMBIOS you're running matches with your hardware\n   * Don't use a Mac Mini SMBIOS on a desktop for example, as Mac Minis run mobile hardware and so macOS will expect the same\n * Make sure the iGPU is enabled in the BIOS and has the correct properties for your setup (AAPL,ig-platform-id and if needed, device-id)\n   * You can either review the DeviceProperties section from the guide or WhateverGreen's manual\n * Avoid unnecessary ACPI renames, all important ones are handled in WhateverGreen\n   * change GFX0 to IGPU\n   * change PEG0 to GFX0\n   * change HECI to IMEI\n   * etc\n * Make sure Lilu and WhateverGreen are loaded\n   * Make sure not to have any legacy graphics patches present as they've been absorbed into WhateverGreen:\n     * IntelGraphicsFixup.kext\n     * NvidiaGraphicsFixup.kext\n     * Shiki.kext\n\nTo check if Lilu and WhateverGreen loaded correctly:\n\nkextstat | grep -E \"Lilu|WhateverGreen\"\n\n\n> Hey one or more of these kexts aren't showing up\n\nGenerally the best place to start is by looking through your OpenCore logs and seeing if Lilu and WhateverGreen injected correctly:\n\n14:354 00:020 OC: Prelink injection Lilu.kext () - Success\n14:367 00:012 OC: Prelink injection WhateverGreen.kext () - Success\n\n\nIf it says failed to inject:\n\n15:448 00:007 OC: Prelink injection WhateverGreen.kext () - Invalid Parameter\n\n\nMain places you can check as to why:\n\n * Injection order: Make sure that Lilu is above WhateverGreen in kext order\n * All kexts are latest release: Especially important for Lilu plugins, as mismatched kexts can cause issues\n\nNote: To setup file logging, see OpenCore Debugging.\n\nNote: On macOS 10.15 and newer, AppleGVA debugging is disabled by default, if you get a generic error while running VDADecoderChecker you can enable debugging with the following:\n\ndefaults write com.apple.AppleGVA enableSyslog -boolean true\n\n\nAnd to undo this once done:\n\ndefaults delete com.apple.AppleGVA enableSyslog\n\n\n\n# Testing DRM\n\nSo before we get too deep, we need to go over some things, mainly the types of DRM you'll see out in the wild:\n\nFairPlay 1.x: Software based DRM, used for supporting legacy Macs more easily\n\n * Easiest way to test this is by playing an iTunes movie: FairPlay 1.x test\n   * FairPlay 1.x trailers will work on any configuration if WhateverGreen is properly set up - including iGPU-only configurations. However, FairPlay 1.x movies will only play on iGPU-only configurations for around 3-5 seconds, erroring that HDCP is unsupported afterwards.\n\nFairPlay 2.x/3.x: Hardware based DRM, found in Netflix, Amazon Prime\n\n * There's a couple ways to test:\n   * Play a show in Netflix or Amazon Prime\n   * Play an Amazon Prime trailer: Spider-Man: Far From Home\n     * Trailer itself does not use DRM but Amazon still checks before playing\n * Note: Requires newer AMD GPU to work (Polaris+)\n\nFairPlay 4.x: Mixed DRM, found on AppleTV+\n\n * You can open TV.app, choose TV+ -> Free Apple TV+ Premieres, then click on any episode to test without any trial (you do need an iCloud account)\n * Apple TV+ also has a free trial if you want to use it\n * Note: Requires either an absent iGPU (Xeon) or newer AMD GPU to work (Polaris+)\n   * Possible to force FairPlay 1.x when iGPU is absent\n\nIf everything works on these tests, you have no need to continue! Otherwise, proceed on.\n\n\n# Fixing DRM\n\nSo for fixing DRM we can go down mainly 1 route: patching DRM to use either software or AMD decoding. Vit made a great little chart for different hardware configurations:\n\n * WhateverGreen's DRM chart\n\nSo how do you use it? First, identify what configuration you have in the chart (AMD represents GPU, not CPU). The SMBIOS listed (IM = iMac, MM = Mac Mini, IMP = iMac Pro, MP = Mac Pro) is what you should use if you match the hardware configuration. If you don't match any of the configurations in the chart, you're out of luck.\n\nNext, identify what Shiki mode you need to use. If there are two configurations for your setup, they will differ in the Shiki flags used. Generally, you want hardware decoding over software decoding. If the mode column is blank, then you are done. Otherwise, you should add shikigva as a property to any GPU, using DeviceProperties > Add. For example, if the mode we need to use is shikigva=80:\n\n\n\nYou can also use the boot argument - this is in the mode column.\n\nHere's one example. If we have an Intel i9-9900K and an RX 560, the configuration would be \"AMD+IGPU\", and we should be using an iMac or Mac Mini SMBIOS (for this specific configuration, iMac19,1). Then we see there are two options for the configuration: one where the mode is shikigva=16, and one with shikigva=80. We see the difference is in \"Prime Trailers\" and \"Prime/Netflix\". We want Netflix to work, so we'll choose the shikigva=80 option. Then inject shikigva with type number/integer and value 80 into our iGPU or dGPU, reboot, and DRM should work.\n\nHere's another example. This time, We have an Ryzen 3700X and an RX 480. Our configuration in this case is just \"AMD\", and we should be using either an iMac Pro or Mac Pro SMBIOS. Again, there are two options: no shiki arguments, and shikigva=128. We prefer hardware decoding over software decoding, so we'll choose the shikigva=128 option, and again inject shikigva into our dGPU, this time with value 128. A reboot and DRM works.\n\nNotes:\n\n * You can use gfxutil to find the path to your iGPU/dGPU.\n   \n   * path/to/gfxutil -f GFX0\n   * GFX0: For dGPUs, if multiple installed check IORegistryExplorer for what your AMD card is called\n   * IGPU: For iGPU\n\n * If you inject shikigva using DeviceProperties, ensure you only do so to one GPU, otherwise WhateverGreen will use whatever it finds first and it is not guaranteed to be consistent.\n\n * IQSV stands for Intel Quick Sync Video: this only works if iGPU is present and enabled and it is set up correctly.\n\n * Special configurations (like Haswell + AMD dGPU with an iMac SMBIOS, but iGPU is disabled) are not covered in the chart. You must do research on this yourself.\n\n * Shiki source is useful in understanding what flags do what and when they should be used, and may help with special configurations.\n\n * For error VDADecoderCreate failed. err: -12473 in Big Sur, forcing the AMD Decoder(on applicable systems) can help resolve this:\n   \n   defaults write com.apple.AppleGVA gvaForceAMDAVCDecode -boolean yes\n   ",normalizedContent:"# fixing drm support and igpu performance\n\n * note: safari 14 and macos 11, big sur are currently unsupported by whatevergreen's drm patches. safari 13 in catalina and older are supported just fine however.\n * note 2: browsers not using hardware based drm (ie. mozilla firefox or chromium-based browsers like google chrome and microsoft edge) will have working drm without any work both on igpus and dgpus. the below guide is for safari and other applications using hardware-based drm.\n\nso with drm, we have a couple things we need to mention:\n\n * drm requires a supported dgpu\n   * see the gpu buyers guide for supported cards\n * drm is broken for igpu-only systems\n   * this could be fixed with shiki (now whatevergreen) til 10.12.2, but broke with 10.12.3\n   * this is due to the issue that our igpus don't support apple's firmware and that our management engine doesn't have apple's certificate\n * working hardware acceleration and decoding\n\n\n# testing hardware acceleration and decoding\n\nso before we can get started with fixing drm, we need to make sure your hardware is working. the best way to check is by running vdadecoderchecker:\n\n\n\nif you fail at this point, there's a couple things you can check for:\n\n * make sure your hardware is supported\n   * see gpu buyers guide\n * make sure the smbios you're running matches with your hardware\n   * don't use a mac mini smbios on a desktop for example, as mac minis run mobile hardware and so macos will expect the same\n * make sure the igpu is enabled in the bios and has the correct properties for your setup (aapl,ig-platform-id and if needed, device-id)\n   * you can either review the deviceproperties section from the guide or whatevergreen's manual\n * avoid unnecessary acpi renames, all important ones are handled in whatevergreen\n   * change gfx0 to igpu\n   * change peg0 to gfx0\n   * change heci to imei\n   * etc\n * make sure lilu and whatevergreen are loaded\n   * make sure not to have any legacy graphics patches present as they've been absorbed into whatevergreen:\n     * intelgraphicsfixup.kext\n     * nvidiagraphicsfixup.kext\n     * shiki.kext\n\nto check if lilu and whatevergreen loaded correctly:\n\nkextstat | grep -e \"lilu|whatevergreen\"\n\n\n> hey one or more of these kexts aren't showing up\n\ngenerally the best place to start is by looking through your opencore logs and seeing if lilu and whatevergreen injected correctly:\n\n14:354 00:020 oc: prelink injection lilu.kext () - success\n14:367 00:012 oc: prelink injection whatevergreen.kext () - success\n\n\nif it says failed to inject:\n\n15:448 00:007 oc: prelink injection whatevergreen.kext () - invalid parameter\n\n\nmain places you can check as to why:\n\n * injection order: make sure that lilu is above whatevergreen in kext order\n * all kexts are latest release: especially important for lilu plugins, as mismatched kexts can cause issues\n\nnote: to setup file logging, see opencore debugging.\n\nnote: on macos 10.15 and newer, applegva debugging is disabled by default, if you get a generic error while running vdadecoderchecker you can enable debugging with the following:\n\ndefaults write com.apple.applegva enablesyslog -boolean true\n\n\nand to undo this once done:\n\ndefaults delete com.apple.applegva enablesyslog\n\n\n\n# testing drm\n\nso before we get too deep, we need to go over some things, mainly the types of drm you'll see out in the wild:\n\nfairplay 1.x: software based drm, used for supporting legacy macs more easily\n\n * easiest way to test this is by playing an itunes movie: fairplay 1.x test\n   * fairplay 1.x trailers will work on any configuration if whatevergreen is properly set up - including igpu-only configurations. however, fairplay 1.x movies will only play on igpu-only configurations for around 3-5 seconds, erroring that hdcp is unsupported afterwards.\n\nfairplay 2.x/3.x: hardware based drm, found in netflix, amazon prime\n\n * there's a couple ways to test:\n   * play a show in netflix or amazon prime\n   * play an amazon prime trailer: spider-man: far from home\n     * trailer itself does not use drm but amazon still checks before playing\n * note: requires newer amd gpu to work (polaris+)\n\nfairplay 4.x: mixed drm, found on appletv+\n\n * you can open tv.app, choose tv+ -> free apple tv+ premieres, then click on any episode to test without any trial (you do need an icloud account)\n * apple tv+ also has a free trial if you want to use it\n * note: requires either an absent igpu (xeon) or newer amd gpu to work (polaris+)\n   * possible to force fairplay 1.x when igpu is absent\n\nif everything works on these tests, you have no need to continue! otherwise, proceed on.\n\n\n# fixing drm\n\nso for fixing drm we can go down mainly 1 route: patching drm to use either software or amd decoding. vit made a great little chart for different hardware configurations:\n\n * whatevergreen's drm chart\n\nso how do you use it? first, identify what configuration you have in the chart (amd represents gpu, not cpu). the smbios listed (im = imac, mm = mac mini, imp = imac pro, mp = mac pro) is what you should use if you match the hardware configuration. if you don't match any of the configurations in the chart, you're out of luck.\n\nnext, identify what shiki mode you need to use. if there are two configurations for your setup, they will differ in the shiki flags used. generally, you want hardware decoding over software decoding. if the mode column is blank, then you are done. otherwise, you should add shikigva as a property to any gpu, using deviceproperties > add. for example, if the mode we need to use is shikigva=80:\n\n\n\nyou can also use the boot argument - this is in the mode column.\n\nhere's one example. if we have an intel i9-9900k and an rx 560, the configuration would be \"amd+igpu\", and we should be using an imac or mac mini smbios (for this specific configuration, imac19,1). then we see there are two options for the configuration: one where the mode is shikigva=16, and one with shikigva=80. we see the difference is in \"prime trailers\" and \"prime/netflix\". we want netflix to work, so we'll choose the shikigva=80 option. then inject shikigva with type number/integer and value 80 into our igpu or dgpu, reboot, and drm should work.\n\nhere's another example. this time, we have an ryzen 3700x and an rx 480. our configuration in this case is just \"amd\", and we should be using either an imac pro or mac pro smbios. again, there are two options: no shiki arguments, and shikigva=128. we prefer hardware decoding over software decoding, so we'll choose the shikigva=128 option, and again inject shikigva into our dgpu, this time with value 128. a reboot and drm works.\n\nnotes:\n\n * you can use gfxutil to find the path to your igpu/dgpu.\n   \n   * path/to/gfxutil -f gfx0\n   * gfx0: for dgpus, if multiple installed check ioregistryexplorer for what your amd card is called\n   * igpu: for igpu\n\n * if you inject shikigva using deviceproperties, ensure you only do so to one gpu, otherwise whatevergreen will use whatever it finds first and it is not guaranteed to be consistent.\n\n * iqsv stands for intel quick sync video: this only works if igpu is present and enabled and it is set up correctly.\n\n * special configurations (like haswell + amd dgpu with an imac smbios, but igpu is disabled) are not covered in the chart. you must do research on this yourself.\n\n * shiki source is useful in understanding what flags do what and when they should be used, and may help with special configurations.\n\n * for error vdadecodercreate failed. err: -12473 in big sur, forcing the amd decoder(on applicable systems) can help resolve this:\n   \n   defaults write com.apple.applegva gvaforceamdavcdecode -boolean yes\n   ",charsets:{cjk:!0}},{title:"GPU Patching",frontmatter:{},regularPath:"/universal/gpu-patches.html",relativePath:"universal/gpu-patches.md",key:"v-d257c2d4",path:"/universal/gpu-patches.html",headers:[{level:2,title:"Converting a clover fakeID to OpenCore",slug:"converting-a-clover-fakeid-to-opencore",normalizedTitle:"converting a clover fakeid to opencore",charIndex:248},{level:2,title:"iGPU BusID Patching",slug:"igpu-busid-patching",normalizedTitle:"igpu busid patching",charIndex:324},{level:3,title:"Mapping video ports",slug:"mapping-video-ports",normalizedTitle:"mapping video ports",charIndex:2748},{level:3,title:"Adding to your config.plist",slug:"adding-to-your-config-plist",normalizedTitle:"adding to your config.plist",charIndex:3460}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"Converting a clover fakeID to OpenCore iGPU BusID Patching Mapping video ports Adding to your config.plist",content:"# GPU Patching\n\nThis little section is for those who need more than what is provided by simple framebuffer patching and WhateverGreen's auto-patches:\n\n * Applying a fakeID for unsupported GPUs\n * iGPU BusID patching for 300 series motherboards\n\n\n# Converting a clover fakeID to OpenCore\n\nGuide moved here: Renaming GPUs\n\n\n# iGPU BusID Patching\n\nThis section is for users running \"true\" 300 series motherboards( B360, B365, H310, H370, Z390) who are having issues setting up their iGPU as a display out.\n\nSo to get started I'll assume you've already done basic framebuffer patches in your config from the Coffee Lake portion of the guide, it should look something like this:\n\n\n\n * Note: With macOS 10.15.5, there seems to be a lot of issues with black screen using 07009B3E, if you get similar issues try swapping to 00009B3E\n\nNow that we're prepped, we can start looking into busID patching. Checking the dumps at the official WhateverGreen repository shows us this for the 3E9B0007 ID(Desktop UHD 630):\n\nID: 3E9B0007, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00801302\nTOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)\nGPU Name: Intel UHD Graphics 630\nModel Name(s):\nCamelia: Disabled\nMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3\n[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - DP\n[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - DP\n[3] busId: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003C7 - DP\n01050900 00040000 C7030000\n02040A00 00040000 C7030000\n03060800 00040000 C7030000\n\n\nLooking at all this can be quite overwhelming, but we'll break it down to be a bit simpler. For use we care about this:\n\n[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - DP\n[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - DP\n[3] busId: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003C7 - DP\n01050900 00040000 C7030000\n02040A00 00040000 C7030000\n03060800 00040000 C7030000\n\n\nThese are your iGPUs ports by default, lets go through port 1 and see what each section is used for:\n\nThe first port:\n\n01050900 00040000 C7030000\n\n\nPort: 01\n\n * 01050900 00040000 C7030000\n\nbusId: 0x05\n\n * 01050900 00040000 C7030000\n\nPipe Number 9 (little endian):\n\n * 01050900 00040000 C7030000\n\nConnector type: DisplayPort\n\n * 01050900 00040000 C7030000\n\nFlags - We leave it as default:\n\n * 01050900 00040000 C7030000\n\nThings to note:\n\n * You cannot use the same busId twice, having 2 in use will create conflicts\n * Pipe number and flags don't need to changed\n\nList of connector types:\n\n * 00 04 00 00 - DisplayPort\n * 00 08 00 00 - HDMI\n * 04 00 00 00 - Digital DVI\n * 02 00 00 00 - LVDS (for laptops)\n * 01 00 00 00 - Dummy port\n\n\n# Mapping video ports\n\n 1. Plug display into HDMI port\n\n 2. Set Port 1 to the HDMI connector type:\n    \n    * 01xx0900 00080000 C7030000\n\n 3. Disable ports 2 and 3 with busid=00:\n    \n    * 02000A00 00040000 C7030000\n    * 03000800 00040000 C7030000\n\n 4. Walk through busids for Port 1 if the previous didn't work(yup you gotta do a shit ton of reboots). The maximum busid on most platforms is 0x06\n    \n    * 01010900 00080000 C7030000\n    * 01020900 00080000 C7030000\n    * 01030900 00080000 C7030000\n    * etc\n\nIf you still get no output, set port 1's busid to 00 and start going through busids for port 2 and so on\n\n * 01000900 00040000 C7030000\n * 02xx0A00 00080000 C7030000\n * 03000800 00040000 C7030000\n\n\n# Adding to your config.plist\n\nSo adding these patches are simple though a bunch of entries are required:\n\n * framebuffer-con0-enable = 01000000\n * framebuffer-con1-enable = 01000000\n * framebuffer-con2-enable = 01000000\n * framebuffer-con0-alldata = port 1\n * framebuffer-con1-alldata = port 2\n * framebuffer-con2-alldata = port 3\n\nSo when adding the patches, port 1 will actually become con0 as the ports start at 0. These are also all data types when entering your values.\n\nA finished config should look something like this:\n\n\n\nSource for iGPU BusID patching: CorpNewt's Brain",normalizedContent:"# gpu patching\n\nthis little section is for those who need more than what is provided by simple framebuffer patching and whatevergreen's auto-patches:\n\n * applying a fakeid for unsupported gpus\n * igpu busid patching for 300 series motherboards\n\n\n# converting a clover fakeid to opencore\n\nguide moved here: renaming gpus\n\n\n# igpu busid patching\n\nthis section is for users running \"true\" 300 series motherboards( b360, b365, h310, h370, z390) who are having issues setting up their igpu as a display out.\n\nso to get started i'll assume you've already done basic framebuffer patches in your config from the coffee lake portion of the guide, it should look something like this:\n\n\n\n * note: with macos 10.15.5, there seems to be a lot of issues with black screen using 07009b3e, if you get similar issues try swapping to 00009b3e\n\nnow that we're prepped, we can start looking into busid patching. checking the dumps at the official whatevergreen repository shows us this for the 3e9b0007 id(desktop uhd 630):\n\nid: 3e9b0007, stolen: 57 mb, fbmem: 0 bytes, vram: 1536 mb, flags: 0x00801302\ntotal stolen: 58 mb, total cursor: 1 mb (1572864 bytes), max stolen: 172 mb, max overall: 173 mb (181940224 bytes)\ngpu name: intel uhd graphics 630\nmodel name(s):\ncamelia: disabled\nmobile: 0, pipecount: 3, portcount: 3, fbmemorycount: 3\n[1] busid: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003c7 - dp\n[2] busid: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003c7 - dp\n[3] busid: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003c7 - dp\n01050900 00040000 c7030000\n02040a00 00040000 c7030000\n03060800 00040000 c7030000\n\n\nlooking at all this can be quite overwhelming, but we'll break it down to be a bit simpler. for use we care about this:\n\n[1] busid: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003c7 - dp\n[2] busid: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003c7 - dp\n[3] busid: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003c7 - dp\n01050900 00040000 c7030000\n02040a00 00040000 c7030000\n03060800 00040000 c7030000\n\n\nthese are your igpus ports by default, lets go through port 1 and see what each section is used for:\n\nthe first port:\n\n01050900 00040000 c7030000\n\n\nport: 01\n\n * 01050900 00040000 c7030000\n\nbusid: 0x05\n\n * 01050900 00040000 c7030000\n\npipe number 9 (little endian):\n\n * 01050900 00040000 c7030000\n\nconnector type: displayport\n\n * 01050900 00040000 c7030000\n\nflags - we leave it as default:\n\n * 01050900 00040000 c7030000\n\nthings to note:\n\n * you cannot use the same busid twice, having 2 in use will create conflicts\n * pipe number and flags don't need to changed\n\nlist of connector types:\n\n * 00 04 00 00 - displayport\n * 00 08 00 00 - hdmi\n * 04 00 00 00 - digital dvi\n * 02 00 00 00 - lvds (for laptops)\n * 01 00 00 00 - dummy port\n\n\n# mapping video ports\n\n 1. plug display into hdmi port\n\n 2. set port 1 to the hdmi connector type:\n    \n    * 01xx0900 00080000 c7030000\n\n 3. disable ports 2 and 3 with busid=00:\n    \n    * 02000a00 00040000 c7030000\n    * 03000800 00040000 c7030000\n\n 4. walk through busids for port 1 if the previous didn't work(yup you gotta do a shit ton of reboots). the maximum busid on most platforms is 0x06\n    \n    * 01010900 00080000 c7030000\n    * 01020900 00080000 c7030000\n    * 01030900 00080000 c7030000\n    * etc\n\nif you still get no output, set port 1's busid to 00 and start going through busids for port 2 and so on\n\n * 01000900 00040000 c7030000\n * 02xx0a00 00080000 c7030000\n * 03000800 00040000 c7030000\n\n\n# adding to your config.plist\n\nso adding these patches are simple though a bunch of entries are required:\n\n * framebuffer-con0-enable = 01000000\n * framebuffer-con1-enable = 01000000\n * framebuffer-con2-enable = 01000000\n * framebuffer-con0-alldata = port 1\n * framebuffer-con1-alldata = port 2\n * framebuffer-con2-alldata = port 3\n\nso when adding the patches, port 1 will actually become con0 as the ports start at 0. these are also all data types when entering your values.\n\na finished config should look something like this:\n\n\n\nsource for igpu busid patching: corpnewt's brain",charsets:{}},{title:"Fixing iMessage and other services with OpenCore",frontmatter:{},regularPath:"/universal/iservices.html",relativePath:"universal/iservices.md",key:"v-af8079d4",path:"/universal/iservices.html",headers:[{level:2,title:"Using GenSMBIOS",slug:"using-gensmbios",normalizedTitle:"using gensmbios",charIndex:1211},{level:2,title:"Using macserial",slug:"using-macserial",normalizedTitle:"using macserial",charIndex:1518},{level:2,title:"Choose a MAC Address",slug:"choose-a-mac-address",normalizedTitle:"choose a mac address",charIndex:2387},{level:2,title:"Derive the corresponding ROM Value",slug:"derive-the-corresponding-rom-value",normalizedTitle:"derive the corresponding rom value",charIndex:2727},{level:2,title:"Generate an UUID",slug:"generate-an-uuid",normalizedTitle:"generate an uuid",charIndex:2938},{level:2,title:"Serial Number Validity",slug:"serial-number-validity",normalizedTitle:"serial number validity",charIndex:4021},{level:2,title:"Fixing en0",slug:"fixing-en0",normalizedTitle:"fixing en0",charIndex:5491},{level:3,title:"What if I don't have En0 at all?!?",slug:"what-if-i-don-t-have-en0-at-all",normalizedTitle:"what if i don't have en0 at all?!?",charIndex:5972},{level:3,title:"Making en0 show as built-in",slug:"making-en0-show-as-built-in",normalizedTitle:"making en0 show as built-in",charIndex:6594},{level:2,title:"Fixing ROM",slug:"fixing-rom",normalizedTitle:"fixing rom",charIndex:5785},{level:2,title:"Verifying NVRAM",slug:"verifying-nvram",normalizedTitle:"verifying nvram",charIndex:7874},{level:2,title:"Clean out old attempts",slug:"clean-out-old-attempts",normalizedTitle:"clean out old attempts",charIndex:8383},{level:2,title:"Verifying your work one last time",slug:"verifying-your-work-one-last-time",normalizedTitle:"verifying your work one last time",charIndex:9531},{level:2,title:"Cleaning up your AppleID",slug:"cleaning-up-your-appleid",normalizedTitle:"cleaning up your appleid",charIndex:9778},{level:2,title:"Customer Code error",slug:"customer-code-error",normalizedTitle:"customer code error",charIndex:10705}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"Using GenSMBIOS Using macserial Choose a MAC Address Derive the corresponding ROM Value Generate an UUID Serial Number Validity Fixing en0 What if I don't have En0 at all?!? Making en0 show as built-in Fixing ROM Verifying NVRAM Clean out old attempts Verifying your work one last time Cleaning up your AppleID Customer Code error",content:"# Fixing iMessage and other services with OpenCore\n\nThis page is for those having iMessage and other iServices issues, this is a very basic guide so will not go as in-depth into the issues as some other guides. This specific guide is a translation and reinterpretation of the AppleLife Guide on fixing iServices: Как завести сервисы Apple - iMessage, FaceTime, iCloud.\n\nYour Apple ID is the single most influential factor in using iServices.\n\nIf you have existing Apple products in your account, such as an iPhone, you should have no issues whatsoever using a generated serial set. However, if you recently created an account, that does not have any existing Apple hardware or App Store purchases, you may be required to call Apple once you have attemped logging in.\n\nThe following items will be created below and are required to use iServices:\n\n * MLB\n * ROM*\n * SystemProductName\n * SystemSerialNumber\n * SystemUUID\n\nNOTE\n\nFor ROM, we use the MAC Address of the network interface, lowercase, and without :.\n\nNote: You and you alone are responsible for your AppleID, read the guide carefully and take full responsibility if you screw up. Dortania and other guides are not held accountable for what you do.\n\n\n# Using GenSMBIOS\n\nDownload GenSMBIOS and select option 1 to download MacSerial and next option 3 to generate some new serials. What we're looking for is a valid serial that currently has no registered purchase date.\n\nTip: iMacPro1,1 10 will print 10 serials, this will save you some time on generating\n\n\n\n\n# Using macserial\n\nThis is for Linux users and an alternative to using GenSMBIOS.\n\nGenerate a new Serial and Board Serial (MLB) for your model.\n\nTo generate this you will need macserial.\n\nYou can download the latest release of OpenCorePkg from here.\n\nOr compile the development macserial from source.\n\ngit clone --depth 1 https://github.com/acidanthera/OpenCorePkg.git\ncd ./OpenCorePkg/Utilities/macserial/\nmake\nchmod +x ./macserial\n\n\nFind your SystemProductName in your config.plist file. That is your model number.\n\nReplace \"iMacPro1,1\" below with SystemProductName in your config.plist.\n\n./macserial --num 1 --model \"iMacPro1,1\" \n\n\nExample output:\n\n$ ./macserial \\\n        --model \"iMacPro1,1\" \nWarning: arc4random is not available!\nC02V7UYGHX87 | C02733401J9JG36A8\n\n\nThe value on the left is your Serial number. The value on the right is your Board Serial (MLB).\n\n\n# Choose a MAC Address\n\nSelect a MAC Address with an Organizationally Unique Identifier (OUI) that corresponds to a real Apple, Inc. interface.\n\nSee the following list:\n\nhttps://gitlab.com/wireshark/wireshark/-/raw/master/manuf\n\nFor example:\n\n00:16:CB    Apple   Apple, Inc.\n\n\nMake up the last 3 octets.\n\nFor example:\n\n00:16:CB:00:11:22\n\n\n\n# Derive the corresponding ROM Value\n\nROM is calculated from your MAC Address.\n\nLowercase your MAC Address, and remove each colon : between the octets.\n\nFor example:\n\nMAC: 00:16:CB:00:11:22\n\nROM: 0016cb001122\n\n\n# Generate an UUID\n\nType uuidgen in Terminal\n\n$ uuidgen\n976AA603-75FC-456B-BC6D-9011BFB4968E\n\n\nThen simply replace those values in your config.plist:\n\nKEY                  DATA\nMLB                  C02733401J9JG36A8\nMac Address          00:16:CB:00:11:22\nROM                  0016cb001122\nSystemProductName    iMacPro1,1\nSystemSerialNumber   C02V7UYGHX87\nSystemUUID           976AA603-75FC-456B-BC6D-9011BFB4968E\n\nIt should look something like this:\n\n    <key>MLB</key>\n    <string>C02733401J9JG36A8</string>\n    <key>ROM</key>\n    <data>0016cb001122</data>\n    <key>SpoofVendor</key>\n    <true/>\n    <key>SystemProductName</key>\n    <string>iMacPro1,1</string>\n    <key>SystemSerialNumber</key>\n    <string>C02V7UYGHX87</string>\n    <key>SystemUUID</key>\n    <string>976AA603-75FC-456B-BC6D-9011BFB4968E</string>\n\n\nNOTE: If you have trouble using the App Store, you may need to fix En0, depending on your hardware setup.\n\nBrand new Apple ID's will almost certainly not work. Having other real devices in your account almost always works.\n\nIf you see a support warning, see below.\n\n\n# Serial Number Validity\n\nNow enter the serial into the Apple Check Coverage page, you will get 1 of 3 responses:\n\nWE'RE SORRY, WE'RE UNABLE TO CHECK COVERAGE FOR THIS SERIAL   VALID PURCHASE DATE   PURCHASE DATE NOT VALIDATED\nNUMBER.\n                                                                                    \n\nTIP\n\nCopy and paste the serial number, as invalidly formatted serials will also return the \"We're sorry, we're unable to check coverage for this serial number.\"\n\nThis first one is what we're after (you can also use the third one, but it is not recommended as there may be a chance of a conflict with an actual Mac). Now we can translate the rest of the values into our config.plist -> PlatformInfo -> Generic:\n\n * Type = SystemProductName\n * Serial = SystemSerialNumber\n * Board Serial = MLB\n * SmUUID = SystemUUID\n\nNOTE\n\nAlthough the first option works for most, do note though if you've had a bad track record with Apple/iServices you many need one that's \"Purchase Date not Validated\". Otherwise there may be suspicion\n\nWARNING\n\nUsing a \"Purchase Date not Validated:\" serial can cause issues down the line if another machine of the same serial ever gets activated. For initial setup it can help alleviate issues with your account but in the long run an invalid serial can be a safer choice.\n\nTIP\n\nChecking too many serials may result in you becoming ratelimited. To bypass this limitation you can try clearing your cookies or changing your IP.\n\n\n# Fixing en0\n\nTo start, grab Hackintool and head to System -> Peripherals (Info -> Misc on older versions of Hackintool)\n\nHere under Network Interfaces (network card icon), look for en0 under BSD and check whether the device has a check mark under built-in. If there is a check mark, skip to the Fixing ROM section otherwise continue reading.\n\n * Note: en0 can be either Wifi, ethernet or even Thunderbolt. The type doesn't matter, just that it's present and marked as built-in.\n\n\n# What if I don't have En0 at all?!?\n\nWell, we'll want to reset the macOS networking settings so it can build the interfaces fresh; open Terminal and run the following:\n\nsudo rm /Library/Preferences/SystemConfiguration/NetworkInterfaces.plist\nsudo rm /Library/Preferences/SystemConfiguration/preferences.plist\n\n\nOnce done reboot and check again.\n\nIf this doesn't work, add NullEthernet.kext and ssdt-rmne.aml to your EFI and config.plist under Kernel -> Add and ACPI -> Add respectively. The SSDT is precompiled so no extra work needed, reminder compiled files have a .aml extension and .dsl can be seen as source code.\n\n\n# Making en0 show as built-in\n\n\n\nNow head under the PCI tab of Hackintool and export your PCI DeviceProperties, this will create a pcidevices.plist on your desktop\n\n\n\nNow search through the pcidevices.plist and find the PciRoot of your ethernet controller. For us, this would be PciRoot(0x0)/Pci(0x1f,0x6)\n\n\n\nNow with the PciRoot, go into your config.plist -> DeviceProperties -> Add and apply the property of built-in with type Data and value 01\n\n\n\n\n# Fixing ROM\n\nThis is a section many may have forgotten about but this is found in your config.plist under PlatformInfo -> Generic -> ROM\n\nTo find your actual MAC Address/ROM value, you can find in a couple places:\n\n * BIOS\n\n * macOS: System Preferences -> Network -> Ethernet -> Advanced -> Hardware -> MAC Address\n\n * Windows: Settings -> Network & Internet -> Ethernet -> Ethernet -> Physical MAC Address\n\n * Note: en0 can be either Wifi, ethernet or even Thunderbolt, adapt the above example to your situation.\n\nSome users have even gone as far as using real Apple MAC Address dumps for their config, for this guide we'll be using our real MAC Address but note that this is another option.\n\nWhen adding this to your config, c0:7e:bf:c3:af:ff should be converted to c07ebfc3afff as the Data type cannot accept colons (:).\n\n\n\n\n# Verifying NVRAM\n\nSomething that many forget about iServices is that NVRAM is crucial to getting it working correctly, the reason being is that iMessage keys and such are stored in NVRAM. Without NVRAM, iMessage can neither see nor store keys.\n\nSo we'll need to verify NVRAM works, regardless if \"it should work\" as some firmwares can be more of a pain than others.\n\nPlease refer to the Emulated NVRAM section of the OpenCore Guide for both testing if you have working NVRAM and emulating it if you don't.\n\n\n# Clean out old attempts\n\nThis is important for those who've tried setting up iMessage but failed, to start make sure your NVRAM has been cleared. You can enable the option in the boot picker in your config under config.plist -> Misc -> Security -> AllowNvramReset.\n\nNext open terminal and run the following:\n\nbash\nsudo rm -rf ~/Library/Caches/com.apple.iCloudHelper*\nsudo rm -rf ~/Library/Caches/com.apple.Messages*\nsudo rm -rf ~/Library/Caches/com.apple.imfoundation.IMRemoteURLConnectionAgent*\nsudo rm -rf ~/Library/Preferences/com.apple.iChat*\nsudo rm -rf ~/Library/Preferences/com.apple.icloud*\nsudo rm -rf ~/Library/Preferences/com.apple.imagent*\nsudo rm -rf ~/Library/Preferences/com.apple.imessage*\nsudo rm -rf ~/Library/Preferences/com.apple.imservice*\nsudo rm -rf ~/Library/Preferences/com.apple.ids.service*\nsudo rm -rf ~/Library/Preferences/com.apple.madrid.plist*\nsudo rm -rf ~/Library/Preferences/com.apple.imessage.bag.plist*\nsudo rm -rf ~/Library/Preferences/com.apple.identityserviced*\nsudo rm -rf ~/Library/Preferences/com.apple.ids.service*\nsudo rm -rf ~/Library/Preferences/com.apple.security*\nsudo rm -rf ~/Library/Messages\n\n\n\n# Verifying your work one last time\n\nGrab macserial from the latest OpenCore release and run the following:\n\npath/to/macserial -s\n\n\nThis will provide us with a full rundown of our system, verify that what is presented matches up with your work.\n\n\n# Cleaning up your AppleID\n\n * Remove all devices from your AppleID: Manage your devices\n * Enable 2 Factor-Auth\n * Remove all iServices from Keychain, some examples:\n\nids: identity-rsa-key-pair-signature-v1\nids: identity-rsa-private-key\nids: identity-rsa-public-key\nids: message-protection-key\nids: message-protection-public-data-registered\nids: personal-public-key-cache\niMessage Encryption Key\niMessage Signing Key\ncom.apple.facetime: registrationV1\netc ...\n\n\nAnd a final layer of precaution is to make a new AppleID to play with, this makes sure that if you do end up blacklisting your account that it's not your main.\n\nTIP\n\nAdding a payment card to the account and having a decent amount of purchases can also help. While not concrete, you can think of an AppleID as a credit score where the better an Apple customer you are the more likely they won't have activation issues or get an easier pass with Apple Support\n\n::\n\n\n# Customer Code error\n\nWell mate, you've done it. You blacklisted your AppleID. The fix is simple but not pretty, you MUST call Apple. Otherwise, there is no proceeding besides using a new account. Adding a payment card before calling can help legitimize the account so it doesn't seem as much like a bot.\n\n\n\n * For Apple contacting, there are 2 methods\n   * Apple calls you: Apple Support. You must click on Apple ID and then select the iCloud, Facetime & Messages. Now, you should click on Talk to Apple Support Now and type your phone number\n   * You can contact Apple for support and service as well, look for your country in the list and then make a phone call: Apple Support Phone Numbers",normalizedContent:"# fixing imessage and other services with opencore\n\nthis page is for those having imessage and other iservices issues, this is a very basic guide so will not go as in-depth into the issues as some other guides. this specific guide is a translation and reinterpretation of the applelife guide on fixing iservices: как завести сервисы apple - imessage, facetime, icloud.\n\nyour apple id is the single most influential factor in using iservices.\n\nif you have existing apple products in your account, such as an iphone, you should have no issues whatsoever using a generated serial set. however, if you recently created an account, that does not have any existing apple hardware or app store purchases, you may be required to call apple once you have attemped logging in.\n\nthe following items will be created below and are required to use iservices:\n\n * mlb\n * rom*\n * systemproductname\n * systemserialnumber\n * systemuuid\n\nnote\n\nfor rom, we use the mac address of the network interface, lowercase, and without :.\n\nnote: you and you alone are responsible for your appleid, read the guide carefully and take full responsibility if you screw up. dortania and other guides are not held accountable for what you do.\n\n\n# using gensmbios\n\ndownload gensmbios and select option 1 to download macserial and next option 3 to generate some new serials. what we're looking for is a valid serial that currently has no registered purchase date.\n\ntip: imacpro1,1 10 will print 10 serials, this will save you some time on generating\n\n\n\n\n# using macserial\n\nthis is for linux users and an alternative to using gensmbios.\n\ngenerate a new serial and board serial (mlb) for your model.\n\nto generate this you will need macserial.\n\nyou can download the latest release of opencorepkg from here.\n\nor compile the development macserial from source.\n\ngit clone --depth 1 https://github.com/acidanthera/opencorepkg.git\ncd ./opencorepkg/utilities/macserial/\nmake\nchmod +x ./macserial\n\n\nfind your systemproductname in your config.plist file. that is your model number.\n\nreplace \"imacpro1,1\" below with systemproductname in your config.plist.\n\n./macserial --num 1 --model \"imacpro1,1\" \n\n\nexample output:\n\n$ ./macserial \\\n        --model \"imacpro1,1\" \nwarning: arc4random is not available!\nc02v7uyghx87 | c02733401j9jg36a8\n\n\nthe value on the left is your serial number. the value on the right is your board serial (mlb).\n\n\n# choose a mac address\n\nselect a mac address with an organizationally unique identifier (oui) that corresponds to a real apple, inc. interface.\n\nsee the following list:\n\nhttps://gitlab.com/wireshark/wireshark/-/raw/master/manuf\n\nfor example:\n\n00:16:cb    apple   apple, inc.\n\n\nmake up the last 3 octets.\n\nfor example:\n\n00:16:cb:00:11:22\n\n\n\n# derive the corresponding rom value\n\nrom is calculated from your mac address.\n\nlowercase your mac address, and remove each colon : between the octets.\n\nfor example:\n\nmac: 00:16:cb:00:11:22\n\nrom: 0016cb001122\n\n\n# generate an uuid\n\ntype uuidgen in terminal\n\n$ uuidgen\n976aa603-75fc-456b-bc6d-9011bfb4968e\n\n\nthen simply replace those values in your config.plist:\n\nkey                  data\nmlb                  c02733401j9jg36a8\nmac address          00:16:cb:00:11:22\nrom                  0016cb001122\nsystemproductname    imacpro1,1\nsystemserialnumber   c02v7uyghx87\nsystemuuid           976aa603-75fc-456b-bc6d-9011bfb4968e\n\nit should look something like this:\n\n    <key>mlb</key>\n    <string>c02733401j9jg36a8</string>\n    <key>rom</key>\n    <data>0016cb001122</data>\n    <key>spoofvendor</key>\n    <true/>\n    <key>systemproductname</key>\n    <string>imacpro1,1</string>\n    <key>systemserialnumber</key>\n    <string>c02v7uyghx87</string>\n    <key>systemuuid</key>\n    <string>976aa603-75fc-456b-bc6d-9011bfb4968e</string>\n\n\nnote: if you have trouble using the app store, you may need to fix en0, depending on your hardware setup.\n\nbrand new apple id's will almost certainly not work. having other real devices in your account almost always works.\n\nif you see a support warning, see below.\n\n\n# serial number validity\n\nnow enter the serial into the apple check coverage page, you will get 1 of 3 responses:\n\nwe're sorry, we're unable to check coverage for this serial   valid purchase date   purchase date not validated\nnumber.\n                                                                                    \n\ntip\n\ncopy and paste the serial number, as invalidly formatted serials will also return the \"we're sorry, we're unable to check coverage for this serial number.\"\n\nthis first one is what we're after (you can also use the third one, but it is not recommended as there may be a chance of a conflict with an actual mac). now we can translate the rest of the values into our config.plist -> platforminfo -> generic:\n\n * type = systemproductname\n * serial = systemserialnumber\n * board serial = mlb\n * smuuid = systemuuid\n\nnote\n\nalthough the first option works for most, do note though if you've had a bad track record with apple/iservices you many need one that's \"purchase date not validated\". otherwise there may be suspicion\n\nwarning\n\nusing a \"purchase date not validated:\" serial can cause issues down the line if another machine of the same serial ever gets activated. for initial setup it can help alleviate issues with your account but in the long run an invalid serial can be a safer choice.\n\ntip\n\nchecking too many serials may result in you becoming ratelimited. to bypass this limitation you can try clearing your cookies or changing your ip.\n\n\n# fixing en0\n\nto start, grab hackintool and head to system -> peripherals (info -> misc on older versions of hackintool)\n\nhere under network interfaces (network card icon), look for en0 under bsd and check whether the device has a check mark under built-in. if there is a check mark, skip to the fixing rom section otherwise continue reading.\n\n * note: en0 can be either wifi, ethernet or even thunderbolt. the type doesn't matter, just that it's present and marked as built-in.\n\n\n# what if i don't have en0 at all?!?\n\nwell, we'll want to reset the macos networking settings so it can build the interfaces fresh; open terminal and run the following:\n\nsudo rm /library/preferences/systemconfiguration/networkinterfaces.plist\nsudo rm /library/preferences/systemconfiguration/preferences.plist\n\n\nonce done reboot and check again.\n\nif this doesn't work, add nullethernet.kext and ssdt-rmne.aml to your efi and config.plist under kernel -> add and acpi -> add respectively. the ssdt is precompiled so no extra work needed, reminder compiled files have a .aml extension and .dsl can be seen as source code.\n\n\n# making en0 show as built-in\n\n\n\nnow head under the pci tab of hackintool and export your pci deviceproperties, this will create a pcidevices.plist on your desktop\n\n\n\nnow search through the pcidevices.plist and find the pciroot of your ethernet controller. for us, this would be pciroot(0x0)/pci(0x1f,0x6)\n\n\n\nnow with the pciroot, go into your config.plist -> deviceproperties -> add and apply the property of built-in with type data and value 01\n\n\n\n\n# fixing rom\n\nthis is a section many may have forgotten about but this is found in your config.plist under platforminfo -> generic -> rom\n\nto find your actual mac address/rom value, you can find in a couple places:\n\n * bios\n\n * macos: system preferences -> network -> ethernet -> advanced -> hardware -> mac address\n\n * windows: settings -> network & internet -> ethernet -> ethernet -> physical mac address\n\n * note: en0 can be either wifi, ethernet or even thunderbolt, adapt the above example to your situation.\n\nsome users have even gone as far as using real apple mac address dumps for their config, for this guide we'll be using our real mac address but note that this is another option.\n\nwhen adding this to your config, c0:7e:bf:c3:af:ff should be converted to c07ebfc3afff as the data type cannot accept colons (:).\n\n\n\n\n# verifying nvram\n\nsomething that many forget about iservices is that nvram is crucial to getting it working correctly, the reason being is that imessage keys and such are stored in nvram. without nvram, imessage can neither see nor store keys.\n\nso we'll need to verify nvram works, regardless if \"it should work\" as some firmwares can be more of a pain than others.\n\nplease refer to the emulated nvram section of the opencore guide for both testing if you have working nvram and emulating it if you don't.\n\n\n# clean out old attempts\n\nthis is important for those who've tried setting up imessage but failed, to start make sure your nvram has been cleared. you can enable the option in the boot picker in your config under config.plist -> misc -> security -> allownvramreset.\n\nnext open terminal and run the following:\n\nbash\nsudo rm -rf ~/library/caches/com.apple.icloudhelper*\nsudo rm -rf ~/library/caches/com.apple.messages*\nsudo rm -rf ~/library/caches/com.apple.imfoundation.imremoteurlconnectionagent*\nsudo rm -rf ~/library/preferences/com.apple.ichat*\nsudo rm -rf ~/library/preferences/com.apple.icloud*\nsudo rm -rf ~/library/preferences/com.apple.imagent*\nsudo rm -rf ~/library/preferences/com.apple.imessage*\nsudo rm -rf ~/library/preferences/com.apple.imservice*\nsudo rm -rf ~/library/preferences/com.apple.ids.service*\nsudo rm -rf ~/library/preferences/com.apple.madrid.plist*\nsudo rm -rf ~/library/preferences/com.apple.imessage.bag.plist*\nsudo rm -rf ~/library/preferences/com.apple.identityserviced*\nsudo rm -rf ~/library/preferences/com.apple.ids.service*\nsudo rm -rf ~/library/preferences/com.apple.security*\nsudo rm -rf ~/library/messages\n\n\n\n# verifying your work one last time\n\ngrab macserial from the latest opencore release and run the following:\n\npath/to/macserial -s\n\n\nthis will provide us with a full rundown of our system, verify that what is presented matches up with your work.\n\n\n# cleaning up your appleid\n\n * remove all devices from your appleid: manage your devices\n * enable 2 factor-auth\n * remove all iservices from keychain, some examples:\n\nids: identity-rsa-key-pair-signature-v1\nids: identity-rsa-private-key\nids: identity-rsa-public-key\nids: message-protection-key\nids: message-protection-public-data-registered\nids: personal-public-key-cache\nimessage encryption key\nimessage signing key\ncom.apple.facetime: registrationv1\netc ...\n\n\nand a final layer of precaution is to make a new appleid to play with, this makes sure that if you do end up blacklisting your account that it's not your main.\n\ntip\n\nadding a payment card to the account and having a decent amount of purchases can also help. while not concrete, you can think of an appleid as a credit score where the better an apple customer you are the more likely they won't have activation issues or get an easier pass with apple support\n\n::\n\n\n# customer code error\n\nwell mate, you've done it. you blacklisted your appleid. the fix is simple but not pretty, you must call apple. otherwise, there is no proceeding besides using a new account. adding a payment card before calling can help legitimize the account so it doesn't seem as much like a bot.\n\n\n\n * for apple contacting, there are 2 methods\n   * apple calls you: apple support. you must click on apple id and then select the icloud, facetime & messages. now, you should click on talk to apple support now and type your phone number\n   * you can contact apple for support and service as well, look for your country in the list and then make a phone call: apple support phone numbers",charsets:{cyrillic:!0,cjk:!0}},{title:"Fixing MacPro7,1 Memory Errors",frontmatter:{},regularPath:"/universal/memory.html",relativePath:"universal/memory.md",key:"v-0e04bd50",path:"/universal/memory.html",headers:[{level:2,title:"Mapping our memory",slug:"mapping-our-memory",normalizedTitle:"mapping our memory",charIndex:613},{level:3,title:"DataWidth",slug:"datawidth",normalizedTitle:"datawidth",charIndex:1008},{level:3,title:"ErrorCorrection",slug:"errorcorrection",normalizedTitle:"errorcorrection",charIndex:1021},{level:3,title:"FormFactor",slug:"formfactor",normalizedTitle:"formfactor",charIndex:1040},{level:3,title:"MaxCapacity",slug:"maxcapacity",normalizedTitle:"maxcapacity",charIndex:1054},{level:3,title:"TotalWidth",slug:"totalwidth",normalizedTitle:"totalwidth",charIndex:1069},{level:3,title:"Type",slug:"type",normalizedTitle:"type",charIndex:1083},{level:3,title:"TypeDetail",slug:"typedetail",normalizedTitle:"typedetail",charIndex:1091},{level:3,title:"Devices",slug:"devices",normalizedTitle:"devices",charIndex:1105},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:1239}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"Mapping our memory DataWidth ErrorCorrection FormFactor MaxCapacity TotalWidth Type TypeDetail Devices Cleaning up",content:'# Fixing MacPro7,1 Memory Errors\n\nOn macOS Catalina and newer, users of the MacPro7,1 SMBIOS will experience this error on each boot:\n\nNOTIFICATION ERROR   ABOUT THIS MAC ERROR\n                     \n\nThe exact reason for this error is a bit unknown, however ways to resolve this error have been made possible. The most common way to remove the error is to use RestrictEvents and we highly encourage all users to use this kext instead.\n\nFor those who wish to attempt the legacy mapping way, see the below guide. Note it will require you to map all your DIMMs manually so this will be a time consuming process.\n\n\n# Mapping our memory\n\nTo start, we\'ll want to grab the following files:\n\n * CustomMemory.plist\n   * Example setup for using CustomMemory in OpenCore\n * dmidecode\n   * Tool used for extracting SMBIOS info in macOS\n\nHere is a premade file which has properties already set out for you, once you open it you should see the following:\n\n\n\nFrom here we see may properties, lets try to break it down:\n\n * DataWidth\n * ErrorCorrection\n * FormFactor\n * MaxCapacity\n * TotalWidth\n * Type\n * TypeDetail\n * Devices\n   * AssetTag\n   * BankLocator\n   * DeviceLocator\n   * Manufacturer\n   * PartNumber\n   * SerialNumber\n   * Size\n   * Speed\n * Cleaning up\n\n\n# DataWidth\n\nSpecifies the data width, in bits, of the memory. A DataWidth of 0 and a TotalWidth of 8 indicates that the device is being used solely to provide 8 error-correction bits.\n\nTo determine the DataWidth, run the following:\n\npath/to/dmidecode -t memory | grep "Data Width:"\n# Example Output\n Data Width: 64 bits\n Data Width: Unknown\n Data Width: 64 bits\n Data Width: Unknown\n Data Width: 64 bits\n Data Width: Unknown\n Data Width: 64 bits\n Data Width: Unknown\n# Final Value\nDataWidth = 64\n\n\n\n# ErrorCorrection\n\nSpecifies ECC support:\n\n1 — Other\n2 — Unknown\n3 — None\n4 — Parity\n5 — Single-bit ECC\n6 — Multi-bit ECC\n7 — CRC\n\n\nTo determine ErrorCorrection, run the following:\n\npath/to/dmidecode -t memory | grep "Error Correction Type:"\n# Example Output\n Error Correction Type: None\n# Final Value\nErrorCorrection = 3\n\n\n\n# FormFactor\n\nSpecifies Memory Form Factor\n\n1  — Other\n2  — Unknown\n9  — DIMM\n13 — SODIMM\n15 — FB-DIMM\n\n\nTo determine FormFactor, run the following:\n\npath/to/dmidecode -t memory | grep "Form Factor:"\n# Example Output\n Form Factor: DIMM\n Form Factor: DIMM\n Form Factor: DIMM\n Form Factor: DIMM\n Form Factor: DIMM\n Form Factor: DIMM\n Form Factor: DIMM\n Form Factor: DIMM\n# Final Value\nFormFactor = 9\n\n\n\n# MaxCapacity\n\nSpecifies maximum supported memory in your system\n\nType: Bytes\n\n8GB   - 8589934592\n16GB  - 17179869184\n32GB  - 34359738368\n64GB  - 68719476736\n128GB - 137438953472\n256GB - 274877906944\n\n\n\n# TotalWidth\n\nSpecifies the total width, in bits, of the memory, including any check or error-correction bits. If there are no error-correction bits, this value should be equal to DataWidth.\n\nTo determine TotalWidth, run the following:\n\npath/to/dmidecode -t memory | grep "Total Width:"\n# Example Output\n Total Width: 72 bits\n Total Width: Unknown\n Total Width: 72 bits\n Total Width: Unknown\n Total Width: 72 bits\n Total Width: Unknown\n Total Width: 72 bits\n Total Width: Unknown\n# Final Value\nTotalWidth = 72\n\n\n\n# Type\n\nSpecifies memory type\n\n1  — Other\n2  — Unknown\n15 — SDRAM\n18 — DDR\n19 — DDR2\n20 — DDR2 FB-DIMM\n24 — DDR3\n26 — DDR4\n27 — LPDDR\n28 — LPDDR2\n29 — LPDDR3\n30 — LPDDR4\n\n\nTo determine Type, run the following:\n\npath/to/dmidecode -t memory | grep "Type:"\n# Example Output\n Type: DDR4\n Type: Unknown\n Type: DDR4\n Type: Unknown\n Type: DDR4\n Type: Unknown\n Type: DDR4\n Type: Unknown\n# Final Value\nType = 26\n\n\n\n# TypeDetail\n\nSpecifies other memory type information\n\nBit 0 — Reserved, set to 0\nBit 1 — Other\nBit 2 — Unknown\nBit 7 — Synchronous\nBit 13 — Registered (buffered)\nBit 14 — Unbuffered (unregistered)\n\n\nCombine all that are applicable, example:\n\nBit 13 — Registered (buffered)\nBit 14 — Unbuffered (unregistered)\n-----------------------------------\n27 = TypeDetail\n\n\nTo determine TypeDetail, run the following:\n\npath/to/dmidecode -t memory | grep "Type Detail:"\n# Example Output\n Type Detail: Synchronous\n Type Detail: Synchronous\n Type Detail: Synchronous\n Type Detail: Synchronous\n Type Detail: Synchronous\n Type Detail: Synchronous\n Type Detail: Synchronous\n Type Detail: Synchronous\n# Final Value\nTypeDetail = 7\n\n\n\n# Devices\n\nArray of Memory Devices, and where we do out magic to fix the error. In the sample CustomMemory.plist I provided, we have 12 slots listed here. From this, you\'ll want to open up System Profiler in macOS and look at the Memory tab:\n\n\n\nHere we see which slots are populated by memory, and which are empty. For filled slots, simply run through the below on how to pull information. For slots that are empty however, you\'ll want to add some blank information into thinking macOS has populated device. Ensure that by the end, you have 12 total slots filled with devices.\n\nExample of filled slots vs fake:\n\n\n\nWe recommend setting the Size and Speed to both 1, to ensure applications that do pull from memory are not confused that you have more than you should.\n\nNext lets break down the properties:\n\n * AssetTag\n * BankLocator\n * DeviceLocator\n * Manufacturer\n * PartNumber\n * SerialNumber\n * Size\n * Speed\n\n# AssetTag\n\nTo determine AssetTag, run the following:\n\npath/to/dmidecode -t memory | grep "Asset Tag:"\n#Example Output\n\n# Final Value\n\n\n * If dmidecode prints Not Specified, you can simply leave this entry blank\n\n# BankLocator\n\nTo determine BankLocator, run the following:\n\npath/to/dmidecode -t memory | grep "Bank Locator:"\n#Example Output\n\n# Final Value\n\n\n * If dmidecode prints Not Specified, you can simply leave this entry blank\n\n# DeviceLocator\n\nTo determine DeviceLocator, run the following:\n\npath/to/dmidecode -t memory | grep "Locator:"\n#Example Output\n Locator: DIMM_A1\n Locator: DIMM_A2\n Locator: DIMM_B1\n Locator: DIMM_B2\n Locator: DIMM_C1\n Locator: DIMM_C2\n Locator: DIMM_D1\n Locator: DIMM_D2\n# Final Value\nEntry 1:  DIMM_A1\nEntry 2:  DIMM_A2\nEntry 3:  DIMM_B1\nEntry 4:  DIMM_B2\nEntry 5:  DIMM_C1\nEntry 6:  DIMM_C2\nEntry 7:  DIMM_D1\nEntry 8:  DIMM_D2\nEntry 9:  DIMM_EMPTY\nEntry 10: DIMM_EMPTY\nEntry 11: DIMM_EMPTY\nEntry 12: DIMM_EMPTY\n\n\n# Manufacturer\n\nTo determine Manufacturer, run the following:\n\npath/to/dmidecode -t memory | grep "Manufacturer:"\n#Example Output\n\n# Final Value\n\n\n# PartNumber\n\nTo determine PartNumber, run the following:\n\npath/to/dmidecode -t memory | grep "Part Number:"\n#Example Output\n Part Number: KHX2666C16/8G\n Part Number: NO DIMM\n Part Number: KHX2666C16/8G\n Part Number: NO DIMM\n Part Number: KHX2666C16/8G\n Part Number: NO DIMM\n Part Number: KHX2666C15D4/8G\n Part Number: NO DIMM\n# Final Value\nEntry 1:  KHX2666C16/8G\nEntry 2:  EmptyDIMM\nEntry 3:  KHX2666C16/8G\nEntry 4:  EmptyDIMM\nEntry 5:  KHX2666C16/8G\nEntry 6:  EmptyDIMM\nEntry 7:  KHX2666C15D4/8G\nEntry 8:  EmptyDIMM\nEntry 9:  EmptyDIMM\nEntry 10: EmptyDIMM\nEntry 11: EmptyDIMM\nEntry 12: EmptyDIMM\n\n\n# SerialNumber\n\nTo determine SerialNumber, run the following:\n\npath/to/dmidecode -t memory | grep "Serial Number:"\n#Example Output\n Serial Number: 0F095257\n Serial Number: NO DIMM\n Serial Number: 0C099A57\n Serial Number: NO DIMM\n Serial Number: 752EDED8\n Serial Number: NO DIMM\n Serial Number: A2032E84\n Serial Number: NO DIMM\n# Final Value\nEntry 1:  0F095257\nEntry 2:  EmptyDIMM\nEntry 3:  0C099A57\nEntry 4:  EmptyDIMM\nEntry 5:  752EDED8\nEntry 6:  EmptyDIMM\nEntry 7:  A2032E84\nEntry 8:  EmptyDIMM\nEntry 9:  EmptyDIMM\nEntry 10: EmptyDIMM\nEntry 11: EmptyDIMM\nEntry 12: EmptyDIMM\n\n\n# Size\n\nSize of single memory stick in MB\n\n1GB  - 1024\n2GB  - 2048\n4GB  - 4096\n8GB  - 8192\n16GB - 16384\n32GB - 32768\n64GB - 65536\n12GB - 131072\n\n\nTo determine Size, run the following:\n\npath/to/dmidecode -t memory | grep "Size:"\n#Example Output\n Size: 8 GB\n Size: No Module Installed\n Size: 8 GB\n Size: No Module Installed\n Size: 8 GB\n Size: No Module Installed\n Size: 8 GB\n Size: No Module Installed\n# Final Value\nEntry 1:  8192\nEntry 2:  1\nEntry 3:  8192\nEntry 4:  1\nEntry 5:  8192\nEntry 6:  1\nEntry 7:  8192\nEntry 8:  1\nEntry 9:  1\nEntry 10: 1\nEntry 11: 1\nEntry 12: 1\n\n\n# Speed\n\nSpeed of memory in Mhz\n\nex: 3000Mhz\n\nTo determine Speed, run the following:\n\npath/to/dmidecode -t memory | grep "Speed:"\n#Example Output\n Speed: 2666 MT/s\n Speed: Unknown\n Speed: 2666 MT/s\n Speed: Unknown\n Speed: 2666 MT/s\n Speed: Unknown\n Speed: 2666 MT/s\n Speed: Unknown\n# Final Value\nEntry 1:  2666\nEntry 2:  1\nEntry 3:  2666\nEntry 4:  1\nEntry 5:  2666\nEntry 6:  1\nEntry 7:  2666\nEntry 8:  1\nEntry 9:  1\nEntry 10: 1\nEntry 11: 1\nEntry 12: 1\n\n\n\n# Cleaning up\n\nNow that you\'ve built the table, we can now merge it into our config.plist.\n\nSimply copy over your work from the CustomMemory.plist and paste it into PlatformInfo:\n\n\n\nOnce this is copied over, enable PlatformInfo -> CustomMemory and reboot. The error should be no more now!\n\nReminder that you must fill all 12 slots with memory, otherwise the error will not disappear:\n\nFIXED SYSTEM PROFILER   FIXED ABOUT THIS MAC\n                        ',normalizedContent:'# fixing macpro7,1 memory errors\n\non macos catalina and newer, users of the macpro7,1 smbios will experience this error on each boot:\n\nnotification error   about this mac error\n                     \n\nthe exact reason for this error is a bit unknown, however ways to resolve this error have been made possible. the most common way to remove the error is to use restrictevents and we highly encourage all users to use this kext instead.\n\nfor those who wish to attempt the legacy mapping way, see the below guide. note it will require you to map all your dimms manually so this will be a time consuming process.\n\n\n# mapping our memory\n\nto start, we\'ll want to grab the following files:\n\n * custommemory.plist\n   * example setup for using custommemory in opencore\n * dmidecode\n   * tool used for extracting smbios info in macos\n\nhere is a premade file which has properties already set out for you, once you open it you should see the following:\n\n\n\nfrom here we see may properties, lets try to break it down:\n\n * datawidth\n * errorcorrection\n * formfactor\n * maxcapacity\n * totalwidth\n * type\n * typedetail\n * devices\n   * assettag\n   * banklocator\n   * devicelocator\n   * manufacturer\n   * partnumber\n   * serialnumber\n   * size\n   * speed\n * cleaning up\n\n\n# datawidth\n\nspecifies the data width, in bits, of the memory. a datawidth of 0 and a totalwidth of 8 indicates that the device is being used solely to provide 8 error-correction bits.\n\nto determine the datawidth, run the following:\n\npath/to/dmidecode -t memory | grep "data width:"\n# example output\n data width: 64 bits\n data width: unknown\n data width: 64 bits\n data width: unknown\n data width: 64 bits\n data width: unknown\n data width: 64 bits\n data width: unknown\n# final value\ndatawidth = 64\n\n\n\n# errorcorrection\n\nspecifies ecc support:\n\n1 — other\n2 — unknown\n3 — none\n4 — parity\n5 — single-bit ecc\n6 — multi-bit ecc\n7 — crc\n\n\nto determine errorcorrection, run the following:\n\npath/to/dmidecode -t memory | grep "error correction type:"\n# example output\n error correction type: none\n# final value\nerrorcorrection = 3\n\n\n\n# formfactor\n\nspecifies memory form factor\n\n1  — other\n2  — unknown\n9  — dimm\n13 — sodimm\n15 — fb-dimm\n\n\nto determine formfactor, run the following:\n\npath/to/dmidecode -t memory | grep "form factor:"\n# example output\n form factor: dimm\n form factor: dimm\n form factor: dimm\n form factor: dimm\n form factor: dimm\n form factor: dimm\n form factor: dimm\n form factor: dimm\n# final value\nformfactor = 9\n\n\n\n# maxcapacity\n\nspecifies maximum supported memory in your system\n\ntype: bytes\n\n8gb   - 8589934592\n16gb  - 17179869184\n32gb  - 34359738368\n64gb  - 68719476736\n128gb - 137438953472\n256gb - 274877906944\n\n\n\n# totalwidth\n\nspecifies the total width, in bits, of the memory, including any check or error-correction bits. if there are no error-correction bits, this value should be equal to datawidth.\n\nto determine totalwidth, run the following:\n\npath/to/dmidecode -t memory | grep "total width:"\n# example output\n total width: 72 bits\n total width: unknown\n total width: 72 bits\n total width: unknown\n total width: 72 bits\n total width: unknown\n total width: 72 bits\n total width: unknown\n# final value\ntotalwidth = 72\n\n\n\n# type\n\nspecifies memory type\n\n1  — other\n2  — unknown\n15 — sdram\n18 — ddr\n19 — ddr2\n20 — ddr2 fb-dimm\n24 — ddr3\n26 — ddr4\n27 — lpddr\n28 — lpddr2\n29 — lpddr3\n30 — lpddr4\n\n\nto determine type, run the following:\n\npath/to/dmidecode -t memory | grep "type:"\n# example output\n type: ddr4\n type: unknown\n type: ddr4\n type: unknown\n type: ddr4\n type: unknown\n type: ddr4\n type: unknown\n# final value\ntype = 26\n\n\n\n# typedetail\n\nspecifies other memory type information\n\nbit 0 — reserved, set to 0\nbit 1 — other\nbit 2 — unknown\nbit 7 — synchronous\nbit 13 — registered (buffered)\nbit 14 — unbuffered (unregistered)\n\n\ncombine all that are applicable, example:\n\nbit 13 — registered (buffered)\nbit 14 — unbuffered (unregistered)\n-----------------------------------\n27 = typedetail\n\n\nto determine typedetail, run the following:\n\npath/to/dmidecode -t memory | grep "type detail:"\n# example output\n type detail: synchronous\n type detail: synchronous\n type detail: synchronous\n type detail: synchronous\n type detail: synchronous\n type detail: synchronous\n type detail: synchronous\n type detail: synchronous\n# final value\ntypedetail = 7\n\n\n\n# devices\n\narray of memory devices, and where we do out magic to fix the error. in the sample custommemory.plist i provided, we have 12 slots listed here. from this, you\'ll want to open up system profiler in macos and look at the memory tab:\n\n\n\nhere we see which slots are populated by memory, and which are empty. for filled slots, simply run through the below on how to pull information. for slots that are empty however, you\'ll want to add some blank information into thinking macos has populated device. ensure that by the end, you have 12 total slots filled with devices.\n\nexample of filled slots vs fake:\n\n\n\nwe recommend setting the size and speed to both 1, to ensure applications that do pull from memory are not confused that you have more than you should.\n\nnext lets break down the properties:\n\n * assettag\n * banklocator\n * devicelocator\n * manufacturer\n * partnumber\n * serialnumber\n * size\n * speed\n\n# assettag\n\nto determine assettag, run the following:\n\npath/to/dmidecode -t memory | grep "asset tag:"\n#example output\n\n# final value\n\n\n * if dmidecode prints not specified, you can simply leave this entry blank\n\n# banklocator\n\nto determine banklocator, run the following:\n\npath/to/dmidecode -t memory | grep "bank locator:"\n#example output\n\n# final value\n\n\n * if dmidecode prints not specified, you can simply leave this entry blank\n\n# devicelocator\n\nto determine devicelocator, run the following:\n\npath/to/dmidecode -t memory | grep "locator:"\n#example output\n locator: dimm_a1\n locator: dimm_a2\n locator: dimm_b1\n locator: dimm_b2\n locator: dimm_c1\n locator: dimm_c2\n locator: dimm_d1\n locator: dimm_d2\n# final value\nentry 1:  dimm_a1\nentry 2:  dimm_a2\nentry 3:  dimm_b1\nentry 4:  dimm_b2\nentry 5:  dimm_c1\nentry 6:  dimm_c2\nentry 7:  dimm_d1\nentry 8:  dimm_d2\nentry 9:  dimm_empty\nentry 10: dimm_empty\nentry 11: dimm_empty\nentry 12: dimm_empty\n\n\n# manufacturer\n\nto determine manufacturer, run the following:\n\npath/to/dmidecode -t memory | grep "manufacturer:"\n#example output\n\n# final value\n\n\n# partnumber\n\nto determine partnumber, run the following:\n\npath/to/dmidecode -t memory | grep "part number:"\n#example output\n part number: khx2666c16/8g\n part number: no dimm\n part number: khx2666c16/8g\n part number: no dimm\n part number: khx2666c16/8g\n part number: no dimm\n part number: khx2666c15d4/8g\n part number: no dimm\n# final value\nentry 1:  khx2666c16/8g\nentry 2:  emptydimm\nentry 3:  khx2666c16/8g\nentry 4:  emptydimm\nentry 5:  khx2666c16/8g\nentry 6:  emptydimm\nentry 7:  khx2666c15d4/8g\nentry 8:  emptydimm\nentry 9:  emptydimm\nentry 10: emptydimm\nentry 11: emptydimm\nentry 12: emptydimm\n\n\n# serialnumber\n\nto determine serialnumber, run the following:\n\npath/to/dmidecode -t memory | grep "serial number:"\n#example output\n serial number: 0f095257\n serial number: no dimm\n serial number: 0c099a57\n serial number: no dimm\n serial number: 752eded8\n serial number: no dimm\n serial number: a2032e84\n serial number: no dimm\n# final value\nentry 1:  0f095257\nentry 2:  emptydimm\nentry 3:  0c099a57\nentry 4:  emptydimm\nentry 5:  752eded8\nentry 6:  emptydimm\nentry 7:  a2032e84\nentry 8:  emptydimm\nentry 9:  emptydimm\nentry 10: emptydimm\nentry 11: emptydimm\nentry 12: emptydimm\n\n\n# size\n\nsize of single memory stick in mb\n\n1gb  - 1024\n2gb  - 2048\n4gb  - 4096\n8gb  - 8192\n16gb - 16384\n32gb - 32768\n64gb - 65536\n12gb - 131072\n\n\nto determine size, run the following:\n\npath/to/dmidecode -t memory | grep "size:"\n#example output\n size: 8 gb\n size: no module installed\n size: 8 gb\n size: no module installed\n size: 8 gb\n size: no module installed\n size: 8 gb\n size: no module installed\n# final value\nentry 1:  8192\nentry 2:  1\nentry 3:  8192\nentry 4:  1\nentry 5:  8192\nentry 6:  1\nentry 7:  8192\nentry 8:  1\nentry 9:  1\nentry 10: 1\nentry 11: 1\nentry 12: 1\n\n\n# speed\n\nspeed of memory in mhz\n\nex: 3000mhz\n\nto determine speed, run the following:\n\npath/to/dmidecode -t memory | grep "speed:"\n#example output\n speed: 2666 mt/s\n speed: unknown\n speed: 2666 mt/s\n speed: unknown\n speed: 2666 mt/s\n speed: unknown\n speed: 2666 mt/s\n speed: unknown\n# final value\nentry 1:  2666\nentry 2:  1\nentry 3:  2666\nentry 4:  1\nentry 5:  2666\nentry 6:  1\nentry 7:  2666\nentry 8:  1\nentry 9:  1\nentry 10: 1\nentry 11: 1\nentry 12: 1\n\n\n\n# cleaning up\n\nnow that you\'ve built the table, we can now merge it into our config.plist.\n\nsimply copy over your work from the custommemory.plist and paste it into platforminfo:\n\n\n\nonce this is copied over, enable platforminfo -> custommemory and reboot. the error should be no more now!\n\nreminder that you must fill all 12 slots with memory, otherwise the error will not disappear:\n\nfixed system profiler   fixed about this mac\n                        ',charsets:{cjk:!0}},{title:"将OpenCore从USB移动到硬盘上",frontmatter:{},regularPath:"/universal/oc2hdd.html",relativePath:"universal/oc2hdd.md",key:"v-1a241af4",path:"/universal/oc2hdd.html",headers:[{level:2,title:"从USB上抓取OpenCore",slug:"从usb上抓取opencore",normalizedTitle:"从usb上抓取opencore",charIndex:26},{level:2,title:"旧版用户的特别注意事项",slug:"旧版用户的特别注意事项",normalizedTitle:"旧版用户的特别注意事项",charIndex:650}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"从USB上抓取OpenCore 旧版用户的特别注意事项",content:"# 将OpenCore从USB移动到硬盘上\n\n\n# 从USB上抓取OpenCore\n\n首先，我们要从安装程序中获取OpenCore。为了做到这一点，我们将使用CorpNewt的一个简洁的工具，叫做MountEFI\n\n对于本例，我们假设您的USB叫做Install macOS Catalina:\n\n\n\n一旦EFI已装载，我们要找到我们的EFI文件夹在那里，并保持在一个安全的地方。然后我们想要弹出USB驱动器的EFI，因为有多个EFI挂载有时会使macOS感到困惑，最佳做法是一次只挂载1个EFI(你可以只弹出EFI，驱动器本身不需要被移除)\n\n注:Windows上使用gibMacOS的MakeInstall.bat制作的安装程序将默认为主引导记录(MBR)分区映射，这意味着没有专用的EFI分区，而不是macOS默认挂载的“Boot”分区。\n\n\n\n现在，完成这些后，让我们挂载macOS驱动器。对于macOS Catalina, macOS实际上被划分为2个卷:系统分区和用户分区。这意味着MountEFI可以在它的选择器中报告多个驱动器，但每个分区仍然会共享相同的EFI(UEFI规范只允许每个驱动器1个EFI)。您可以判断它是否与diskXsY是同一个驱动器(Y只是表示它是哪个分区)。\n\n\n\n当你挂载主驱动器的EFI时，你可能会看到一个名为“APPLE”的文件夹，这是用于更新真实mac上的固件，但对我们的硬件没有影响。您可以擦除EFI分区上的所有内容，并将其替换为USB上的分区\n\n\n# 旧版用户的特别注意事项\n\n当转移到您的EFI时，仍然有需要写入的引导扇区，以便您的非uefi BIOS能够找到它。所以不要忘记在macOS驱动器上重新运行' BootInstallARCH.tool '。",normalizedContent:"# 将opencore从usb移动到硬盘上\n\n\n# 从usb上抓取opencore\n\n首先，我们要从安装程序中获取opencore。为了做到这一点，我们将使用corpnewt的一个简洁的工具，叫做mountefi\n\n对于本例，我们假设您的usb叫做install macos catalina:\n\n\n\n一旦efi已装载，我们要找到我们的efi文件夹在那里，并保持在一个安全的地方。然后我们想要弹出usb驱动器的efi，因为有多个efi挂载有时会使macos感到困惑，最佳做法是一次只挂载1个efi(你可以只弹出efi，驱动器本身不需要被移除)\n\n注:windows上使用gibmacos的makeinstall.bat制作的安装程序将默认为主引导记录(mbr)分区映射，这意味着没有专用的efi分区，而不是macos默认挂载的“boot”分区。\n\n\n\n现在，完成这些后，让我们挂载macos驱动器。对于macos catalina, macos实际上被划分为2个卷:系统分区和用户分区。这意味着mountefi可以在它的选择器中报告多个驱动器，但每个分区仍然会共享相同的efi(uefi规范只允许每个驱动器1个efi)。您可以判断它是否与diskxsy是同一个驱动器(y只是表示它是哪个分区)。\n\n\n\n当你挂载主驱动器的efi时，你可能会看到一个名为“apple”的文件夹，这是用于更新真实mac上的固件，但对我们的硬件没有影响。您可以擦除efi分区上的所有内容，并将其替换为usb上的分区\n\n\n# 旧版用户的特别注意事项\n\n当转移到您的efi时，仍然有需要写入的引导扇区，以便您的非uefi bios能够找到它。所以不要忘记在macos驱动器上重新运行' bootinstallarch.tool '。",charsets:{cjk:!0}},{title:"Optimizing Power Management",frontmatter:{},regularPath:"/universal/pm.html",relativePath:"universal/pm.md",key:"v-5d47e1e0",path:"/universal/pm.html",headers:[{level:2,title:"Enabling X86PlatformPlugin",slug:"enabling-x86platformplugin",normalizedTitle:"enabling x86platformplugin",charIndex:34},{level:2,title:"Manually Modifying Power Management Data",slug:"manually-modifying-power-management-data",normalizedTitle:"manually modifying power management data",charIndex:2095},{level:3,title:"Using CPUFriend",slug:"using-cpufriend",normalizedTitle:"using cpufriend",charIndex:2816},{level:3,title:"LFM: Low Frequency Mode",slug:"lfm-low-frequency-mode",normalizedTitle:"lfm: low frequency mode",charIndex:3002},{level:3,title:"EPP: Energy Performance Preference",slug:"epp-energy-performance-preference",normalizedTitle:"epp: energy performance preference",charIndex:4620},{level:3,title:"Performance Bias",slug:"performance-bias",normalizedTitle:"performance bias",charIndex:5295},{level:3,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:5532},{level:2,title:"Sandy and Ivy Bridge Power Management",slug:"sandy-and-ivy-bridge-power-management",normalizedTitle:"sandy and ivy bridge power management",charIndex:307},{level:3,title:"ssdtPRgen Troubleshooting",slug:"ssdtprgen-troubleshooting",normalizedTitle:"ssdtprgen troubleshooting",charIndex:9e3},{level:3,title:"BIOS Troubleshooting",slug:"bios-troubleshooting",normalizedTitle:"bios troubleshooting",charIndex:10233},{level:2,title:"AMD CPU Power Management",slug:"amd-cpu-power-management",normalizedTitle:"amd cpu power management",charIndex:348}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"Enabling X86PlatformPlugin Manually Modifying Power Management Data Using CPUFriend LFM: Low Frequency Mode EPP: Energy Performance Preference Performance Bias Cleaning up Sandy and Ivy Bridge Power Management ssdtPRgen Troubleshooting BIOS Troubleshooting AMD CPU Power Management",content:"# Optimizing Power Management\n\n\n# Enabling X86PlatformPlugin\n\nSo before we can fine tune power management to our liking, we need to first make sure Apple's XCPM core is loaded. Note that this is supported only on Haswell and newer, consumer Sandy, Ivy Bridge and AMD CPUs should refer to the following:\n\n * Sandy and Ivy Bridge Power Management\n * AMD CPU Power Management\n\nIvy Bridge and Ivy Bridge-E note\n\nApple dropped support for XCPM on these models back in macOS Sierra, so XCPM is only supported between 10.8.5 and 10.11.6. You will still need ssdtPRgen.\n\nTo enable XCPM in 10.11 and older on these models, simply add -xcpm to your boot-args.\n\nTo start, grab IORegistryExplorer and look for AppleACPICPU (Note that if you use search, IORegistryExplorer won't show the children of any services found. Be sure to clear the search box once you've found the entry):\n\nXCPM PRESENT   MISSING XCPM\n               \n\nAs you can see from the image on the left, we have X86PlatformPlugin attached. This means that Apple's CPU power management drivers are working (the name of the CPU does not matter). If you see something similar to the image on the right, then there's likely an issue. Make sure to check the following:\n\n * SSDT-PLUG.aml is both present and enabled in your config.plist and EFI/OC/ACPI\n   * If you're missing this, head to Getting Started With ACPI on how to make this\n * SSDT-PLUG is set to the first thread of your CPU. You can check by selecting the first CPU listed (CP00 for our example) and make sure you see this in the properties:\n\nTIP\n\nSSDT-PLUG is not required on macOS 12.3 and up.\n\nplugin-type | Number | 0x1\n\n\nX99 Note\n\nXCPM does not natively support Haswell-E and Broadwell-E, this means we need to spoof the CPU ID into a model that does supports XCPM:\n\n * Haswell-E:\n   \n   * Kernel -> Emulate:\n     * Cpuid1Data: C3060300 00000000 00000000 00000000\n     * Cpuid1Mask: FFFFFFFF 00000000 00000000 00000000\n\n * Broadwell-E:\n   \n   * Kernel -> Emulate:\n     * Cpuid1Data: D4060300 00000000 00000000 00000000\n     * Cpuid1Mask: FFFFFFFF 00000000 00000000 00000000\n\n\n# Manually Modifying Power Management Data\n\nIn most cases, the native CPU power management data shipped with macOS work out of the box. If you're experiencing issues, changing your SMBIOS to something more appropriate to your system will provide different data and may be better for your usecase. In the cases where manual tuning is required, you can use CPUFriend to inject modified power management data, but if you don't know what you're doing, you can severely break power management.\n\nWARNING\n\nIn most cases, you do not have to do this. Change your SMBIOS instead.\n\nTIP\n\nThis is an example on how to change some parts of power management data. For more information, you should check out CPUFriend's documentation.\n\n\n# Using CPUFriend\n\nTo start, we're gonna need a couple things:\n\n * X86PlatformPlugin loaded\n   * This means Sandy Bridge and AMD CPUs are not supported\n * CPUFriend\n * CPUFriendFriend\n\n\n# LFM: Low Frequency Mode\n\nNow let's run CPUFriendFriend.command:\n\n\n\nWhen you first open up CPUFriendFriend, you'll be greeted with a prompt for choosing your LFM value. This can be seen as the floor of your CPU, or the lowest value it'll idle at. This value can greatly help with sleep functioning correctly as macOS needs to be able to transition from S3(sleep) to S0(wake) easily.\n\nTo determine your LFM value, you can either:\n\n * Look for the TDP-down Frequency on Intel's ARK site\n   * Note most CPUs do not have a listed value, so you'll need to determine yourself\n * Or choose recommended values:\n\nGENERATION                               LFM VALUE   COMMENT\nBroadwell+ Laptops                       08          Equivalent of 800Mhz\nBroadwell+ Desktops                      0A          Equivalent of 1000Mhz\nHaswell/Broadwell HEDT/Server(ie. X99)   0D          Equivalent of 1300Mhz\nSkylake+ HEDT/Server(ie. X299)           0C          Equivalent of 1200Mhz\n\n * Note: LFM value is only available on Broadwell and newer SMBIOS\n * Note 2: these values are not set in stone, each machine will have unique characteristics and so you'll need to experiment what works best for your hardware\n\nFor this example we'll be using the i9 7920x which has a base clock of 2.9 GHz but no LFM, so we'll choose 1.3 GHz(ie. 1300Mhz) and work our way up/down until we find stability.\n\n * Note that the LFM value is simply the CPU's multiplier, so you'll need to trim your value appropriately\n   * ie. Divide by 100, then convert to hexadecimal\n\necho \"obase=16; 13\" | bc\n\n\n * Pay close attention we used 13 for 1.3Ghz and not 1.3\n\n\n# EPP: Energy Performance Preference\n\n\n\nNext up is the Energy Performance Preference, EPP. This tells macOS how fast to turbo up the CPU to its full clock. 00 will tell macOS to let the CPU go as fast as it can as quickly as it can while FF will tell macOS to take things slowly and let the CPU ramp up over a much longer period of time. Depending on what you're doing and the cooling on your machine, you may want to set something in the middle. Below chart can help out a bit:\n\nEPP         SPEED\n0x00-0x3F   Max Performance\n0x40-0x7F   Balance performance\n0x80-0xBF   Balance power\n0xC0-0xFF   Max Power Saving\n\nNote: Only Skylake and newer SMBIOS officially support EPP\n\n\n# Performance Bias\n\n\n\nThis final entry is to help macOS out what kind of overall performance you'd like from your CPU. The general recommendation depends on your exact setup, and experimenting does help figure out what's best for you.\n\n\n# Cleaning up\n\n\n\nOnce you're finished, you'll be provided with a CPUFriendDataProvider.kext and ssdt_data.aml. Which you choose is your preference but I recommend the kext variant to avoid any headaches with data injection into Windows and Linux.\n\n * Note: Load order does not matter with the CPUFriendDataProvider as it's just a plist-only kext\n * Note 2: Wake issues resulting from CPUFriend are likely due to incorrect power management data. Every system is unique so you'll need to play around until you get a stable config. Kernel panics will have Sleep Wake failure in efi. Reusing power management data from old macOS versions can also cause issues, so recreate your data provider if you update macOS. You can create multiple data providers and use OpenCore's MinKernel/MaxKernel feature in order to load different power management data for each macOS version.\n * Note 3: If you do choose to use ssdt_data.aml, note that SSDT-PLUG is no longer needed. However the setup for this SSDT is broken on HEDT platforms like X99 and X299, so we highly recommend SSDT-PLUG with CPUFriendDataProvider.kext instead.\n\n\n# Sandy and Ivy Bridge Power Management\n\nWith Sandy and Ivy Bridge, consumer PCs have issues connecting to Apple's XCPM. So to get around this we need to create our own Power Management Table.\n\nWhat we'll need:\n\n * Ensure CpuPm and Cpu0Ist tables are NOT dropped\n * ssdtPRGen\n\nInitially with the setup in the Ivy Bridge section, we recommended users drop their CpuPm and Cpu0Ist to avoid any issues with AppleIntelCPUPowerManagement.kext. But dropping these tables has the adverse affect of breaking turbo boost in Windows. So to resolve this, we'll want to keep our OEM's table but we'll want to add a new table to supplement data only for macOS. So once we're done creating our CPU-PM table, we'll re-add our OEM's CPU SSDTs.\n\nTo start, grab your config.plist then head to ACPI -> Delete and ensure both of these sections have Enabled set to YES:\n\nKEY              TYPE      VALUE\nAll              Boolean   YES\nComment          String    Drop CpuPm\nEnabled          Boolean   YES\nOemTableId       Data      437075506d000000\nTableLength      Number    0\nTableSignature   Data      53534454\nKey              Type      Value\n:---             :---      :---\nAll              Boolean   YES\nComment          String    Drop Cpu0Ist\nEnabled          Boolean   YES\nOemTableId       Data      4370753049737400\nTableLength      Number    0\nTableSignature   Data      53534454\n\nOnce this is done, reboot, then grab ssdtPRGen and run it:\n\n\n\nOnce you're done, you'll be provided with an SSDT.aml under /Users/your-name>/Library/ssdtPRGen/ssdt.dsl, you can easily find it with the Cmd+Shift+G shortcut and pasting ~/Library/ssdtPRGen/\n\n\n\nRemember to now add this to both EFI/OC/ACPI and your config.plist, I recommend renaming it to SSDT-PM to find it more easily.\n\nFinally, we can disable our previous ACPI -> Delete entries (Enabled set to NO):\n\nKEY              TYPE      VALUE\nAll              Boolean   YES\nComment          String    Drop CpuPm\nEnabled          Boolean   NO\nOemTableId       Data      437075506d000000\nTableLength      Number    0\nTableSignature   Data      53534454\nKey              Type      Value\n:---             :---      :---\nAll              Boolean   YES\nComment          String    Drop Cpu0Ist\nEnabled          Boolean   NO\nOemTableId       Data      4370753049737400\nTableLength      Number    0\nTableSignature   Data      53534454\n\n\n# ssdtPRgen Troubleshooting\n\nWhile ssdtPRgen tries to handle any incompatibility issues with your OEM's SSDT, you may find it still clashes on boot as your OEM has already declared certain devices or methods in sections like _INI or _DSM.\n\nIf you find during boot up you get errors such as this one from SSDT-PM:\n\nACPI Error: Method parse/execution failed [\\_SB._INI] , AE_ALREADY_EXIST\n\n\nThis means there's some conflict, to resolve this, we recommend moving ssdtPRgen's info into a format like this:\n\nDefinitionBlock (\"ssdt.aml\", \"SSDT\", 1, \"APPLE \", \"CpuPm\", 0x00021500)\n{\n    External (\\_PR_.CPU0, DeviceObj) // External Processor definition\n    External (\\_PR_.CPU1, DeviceObj) // External Processor definition\n\n    Scope (\\_PR_.CPU0) // Processor's scope\n    {\n        Name (APLF, Zero)\n        Name (APSN, 0x04)\n        Name (APSS, Package (0x20)\n        {\n            /*  … */\n        })\n\n        Method (ACST, 0, NotSerialized)\n        {\n            /*  … */\n        }\n\n        /*  … */\n    }\n\n\nPay close attention to what we've done:\n\n * Made sure the Processor object is moved to external\n * Move all your methods into the Processor's scope\n\nFor editing and re-compiling the SSDT-PM, see here: Getting Started With ACPI\n\n\n# BIOS Troubleshooting\n\nFor some boards, you may need to ensure the following BIOS options are set for CPU Power Management:\n\n * C States: True\n * P States Coordination: SW_ALL\n\n\n# AMD CPU Power Management\n\nWhile macOS might not officially support AMD CPU power management, there are community efforts to add it, specifically being AMDRyzenCPUPowerManagement.\n\nWarning: This kext is known to be unstable, if you're receiving random kernel panics or issues booting do keep in mind this kext may be the culprit.",normalizedContent:"# optimizing power management\n\n\n# enabling x86platformplugin\n\nso before we can fine tune power management to our liking, we need to first make sure apple's xcpm core is loaded. note that this is supported only on haswell and newer, consumer sandy, ivy bridge and amd cpus should refer to the following:\n\n * sandy and ivy bridge power management\n * amd cpu power management\n\nivy bridge and ivy bridge-e note\n\napple dropped support for xcpm on these models back in macos sierra, so xcpm is only supported between 10.8.5 and 10.11.6. you will still need ssdtprgen.\n\nto enable xcpm in 10.11 and older on these models, simply add -xcpm to your boot-args.\n\nto start, grab ioregistryexplorer and look for appleacpicpu (note that if you use search, ioregistryexplorer won't show the children of any services found. be sure to clear the search box once you've found the entry):\n\nxcpm present   missing xcpm\n               \n\nas you can see from the image on the left, we have x86platformplugin attached. this means that apple's cpu power management drivers are working (the name of the cpu does not matter). if you see something similar to the image on the right, then there's likely an issue. make sure to check the following:\n\n * ssdt-plug.aml is both present and enabled in your config.plist and efi/oc/acpi\n   * if you're missing this, head to getting started with acpi on how to make this\n * ssdt-plug is set to the first thread of your cpu. you can check by selecting the first cpu listed (cp00 for our example) and make sure you see this in the properties:\n\ntip\n\nssdt-plug is not required on macos 12.3 and up.\n\nplugin-type | number | 0x1\n\n\nx99 note\n\nxcpm does not natively support haswell-e and broadwell-e, this means we need to spoof the cpu id into a model that does supports xcpm:\n\n * haswell-e:\n   \n   * kernel -> emulate:\n     * cpuid1data: c3060300 00000000 00000000 00000000\n     * cpuid1mask: ffffffff 00000000 00000000 00000000\n\n * broadwell-e:\n   \n   * kernel -> emulate:\n     * cpuid1data: d4060300 00000000 00000000 00000000\n     * cpuid1mask: ffffffff 00000000 00000000 00000000\n\n\n# manually modifying power management data\n\nin most cases, the native cpu power management data shipped with macos work out of the box. if you're experiencing issues, changing your smbios to something more appropriate to your system will provide different data and may be better for your usecase. in the cases where manual tuning is required, you can use cpufriend to inject modified power management data, but if you don't know what you're doing, you can severely break power management.\n\nwarning\n\nin most cases, you do not have to do this. change your smbios instead.\n\ntip\n\nthis is an example on how to change some parts of power management data. for more information, you should check out cpufriend's documentation.\n\n\n# using cpufriend\n\nto start, we're gonna need a couple things:\n\n * x86platformplugin loaded\n   * this means sandy bridge and amd cpus are not supported\n * cpufriend\n * cpufriendfriend\n\n\n# lfm: low frequency mode\n\nnow let's run cpufriendfriend.command:\n\n\n\nwhen you first open up cpufriendfriend, you'll be greeted with a prompt for choosing your lfm value. this can be seen as the floor of your cpu, or the lowest value it'll idle at. this value can greatly help with sleep functioning correctly as macos needs to be able to transition from s3(sleep) to s0(wake) easily.\n\nto determine your lfm value, you can either:\n\n * look for the tdp-down frequency on intel's ark site\n   * note most cpus do not have a listed value, so you'll need to determine yourself\n * or choose recommended values:\n\ngeneration                               lfm value   comment\nbroadwell+ laptops                       08          equivalent of 800mhz\nbroadwell+ desktops                      0a          equivalent of 1000mhz\nhaswell/broadwell hedt/server(ie. x99)   0d          equivalent of 1300mhz\nskylake+ hedt/server(ie. x299)           0c          equivalent of 1200mhz\n\n * note: lfm value is only available on broadwell and newer smbios\n * note 2: these values are not set in stone, each machine will have unique characteristics and so you'll need to experiment what works best for your hardware\n\nfor this example we'll be using the i9 7920x which has a base clock of 2.9 ghz but no lfm, so we'll choose 1.3 ghz(ie. 1300mhz) and work our way up/down until we find stability.\n\n * note that the lfm value is simply the cpu's multiplier, so you'll need to trim your value appropriately\n   * ie. divide by 100, then convert to hexadecimal\n\necho \"obase=16; 13\" | bc\n\n\n * pay close attention we used 13 for 1.3ghz and not 1.3\n\n\n# epp: energy performance preference\n\n\n\nnext up is the energy performance preference, epp. this tells macos how fast to turbo up the cpu to its full clock. 00 will tell macos to let the cpu go as fast as it can as quickly as it can while ff will tell macos to take things slowly and let the cpu ramp up over a much longer period of time. depending on what you're doing and the cooling on your machine, you may want to set something in the middle. below chart can help out a bit:\n\nepp         speed\n0x00-0x3f   max performance\n0x40-0x7f   balance performance\n0x80-0xbf   balance power\n0xc0-0xff   max power saving\n\nnote: only skylake and newer smbios officially support epp\n\n\n# performance bias\n\n\n\nthis final entry is to help macos out what kind of overall performance you'd like from your cpu. the general recommendation depends on your exact setup, and experimenting does help figure out what's best for you.\n\n\n# cleaning up\n\n\n\nonce you're finished, you'll be provided with a cpufrienddataprovider.kext and ssdt_data.aml. which you choose is your preference but i recommend the kext variant to avoid any headaches with data injection into windows and linux.\n\n * note: load order does not matter with the cpufrienddataprovider as it's just a plist-only kext\n * note 2: wake issues resulting from cpufriend are likely due to incorrect power management data. every system is unique so you'll need to play around until you get a stable config. kernel panics will have sleep wake failure in efi. reusing power management data from old macos versions can also cause issues, so recreate your data provider if you update macos. you can create multiple data providers and use opencore's minkernel/maxkernel feature in order to load different power management data for each macos version.\n * note 3: if you do choose to use ssdt_data.aml, note that ssdt-plug is no longer needed. however the setup for this ssdt is broken on hedt platforms like x99 and x299, so we highly recommend ssdt-plug with cpufrienddataprovider.kext instead.\n\n\n# sandy and ivy bridge power management\n\nwith sandy and ivy bridge, consumer pcs have issues connecting to apple's xcpm. so to get around this we need to create our own power management table.\n\nwhat we'll need:\n\n * ensure cpupm and cpu0ist tables are not dropped\n * ssdtprgen\n\ninitially with the setup in the ivy bridge section, we recommended users drop their cpupm and cpu0ist to avoid any issues with appleintelcpupowermanagement.kext. but dropping these tables has the adverse affect of breaking turbo boost in windows. so to resolve this, we'll want to keep our oem's table but we'll want to add a new table to supplement data only for macos. so once we're done creating our cpu-pm table, we'll re-add our oem's cpu ssdts.\n\nto start, grab your config.plist then head to acpi -> delete and ensure both of these sections have enabled set to yes:\n\nkey              type      value\nall              boolean   yes\ncomment          string    drop cpupm\nenabled          boolean   yes\noemtableid       data      437075506d000000\ntablelength      number    0\ntablesignature   data      53534454\nkey              type      value\n:---             :---      :---\nall              boolean   yes\ncomment          string    drop cpu0ist\nenabled          boolean   yes\noemtableid       data      4370753049737400\ntablelength      number    0\ntablesignature   data      53534454\n\nonce this is done, reboot, then grab ssdtprgen and run it:\n\n\n\nonce you're done, you'll be provided with an ssdt.aml under /users/your-name>/library/ssdtprgen/ssdt.dsl, you can easily find it with the cmd+shift+g shortcut and pasting ~/library/ssdtprgen/\n\n\n\nremember to now add this to both efi/oc/acpi and your config.plist, i recommend renaming it to ssdt-pm to find it more easily.\n\nfinally, we can disable our previous acpi -> delete entries (enabled set to no):\n\nkey              type      value\nall              boolean   yes\ncomment          string    drop cpupm\nenabled          boolean   no\noemtableid       data      437075506d000000\ntablelength      number    0\ntablesignature   data      53534454\nkey              type      value\n:---             :---      :---\nall              boolean   yes\ncomment          string    drop cpu0ist\nenabled          boolean   no\noemtableid       data      4370753049737400\ntablelength      number    0\ntablesignature   data      53534454\n\n\n# ssdtprgen troubleshooting\n\nwhile ssdtprgen tries to handle any incompatibility issues with your oem's ssdt, you may find it still clashes on boot as your oem has already declared certain devices or methods in sections like _ini or _dsm.\n\nif you find during boot up you get errors such as this one from ssdt-pm:\n\nacpi error: method parse/execution failed [\\_sb._ini] , ae_already_exist\n\n\nthis means there's some conflict, to resolve this, we recommend moving ssdtprgen's info into a format like this:\n\ndefinitionblock (\"ssdt.aml\", \"ssdt\", 1, \"apple \", \"cpupm\", 0x00021500)\n{\n    external (\\_pr_.cpu0, deviceobj) // external processor definition\n    external (\\_pr_.cpu1, deviceobj) // external processor definition\n\n    scope (\\_pr_.cpu0) // processor's scope\n    {\n        name (aplf, zero)\n        name (apsn, 0x04)\n        name (apss, package (0x20)\n        {\n            /*  … */\n        })\n\n        method (acst, 0, notserialized)\n        {\n            /*  … */\n        }\n\n        /*  … */\n    }\n\n\npay close attention to what we've done:\n\n * made sure the processor object is moved to external\n * move all your methods into the processor's scope\n\nfor editing and re-compiling the ssdt-pm, see here: getting started with acpi\n\n\n# bios troubleshooting\n\nfor some boards, you may need to ensure the following bios options are set for cpu power management:\n\n * c states: true\n * p states coordination: sw_all\n\n\n# amd cpu power management\n\nwhile macos might not officially support amd cpu power management, there are community efforts to add it, specifically being amdryzencpupowermanagement.\n\nwarning: this kext is known to be unstable, if you're receiving random kernel panics or issues booting do keep in mind this kext may be the culprit.",charsets:{cjk:!0}},{title:"Security and FileVault",frontmatter:{},regularPath:"/universal/security.html",relativePath:"universal/security.md",key:"v-b8f6e5cc",path:"/universal/security.html",lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:null,content:"# Security and FileVault\n\nSo something that makes OpenCore truly special is how it's been built with security in mind which is quite rare especially in the Hackintosh community. Well here we'll be going through and setting up some of OpenCore's great Security features:\n\n * FileVault\n   * Apple's built-in drive encryption\n * Vault\n   * OpenCore's semi-secure boot, used for snapshotting OpenCore so no unwanted changes happen\n * ScanPolicy\n   * OpenCore's drive policy, determines what types of disks show up in OpenCore's boot menu\n * OpenCore Password Setup\n   * Enable password in OpenCore boot menu\n * Apple Secure Boot\n   * Apple's variant of secure boot in the macOS kernel",normalizedContent:"# security and filevault\n\nso something that makes opencore truly special is how it's been built with security in mind which is quite rare especially in the hackintosh community. well here we'll be going through and setting up some of opencore's great security features:\n\n * filevault\n   * apple's built-in drive encryption\n * vault\n   * opencore's semi-secure boot, used for snapshotting opencore so no unwanted changes happen\n * scanpolicy\n   * opencore's drive policy, determines what types of disks show up in opencore's boot menu\n * opencore password setup\n   * enable password in opencore boot menu\n * apple secure boot\n   * apple's variant of secure boot in the macos kernel",charsets:{}},{title:"Apple Secure Boot",frontmatter:{},regularPath:"/universal/security/applesecureboot.html",relativePath:"universal/security/applesecureboot.md",key:"v-4cf0bc9c",path:"/universal/security/applesecureboot.html",headers:[{level:2,title:"What is Apple Secure Boot",slug:"what-is-apple-secure-boot",normalizedTitle:"what is apple secure boot",charIndex:192},{level:2,title:"DmgLoading",slug:"dmgloading",normalizedTitle:"dmgloading",charIndex:30},{level:2,title:"SecureBootModel",slug:"securebootmodel",normalizedTitle:"securebootmodel",charIndex:42},{level:3,title:"Special Notes with SecureBootModel",slug:"special-notes-with-securebootmodel",normalizedTitle:"special notes with securebootmodel",charIndex:3940},{level:2,title:"ApECID",slug:"apecid",normalizedTitle:"apecid",charIndex:62}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"What is Apple Secure Boot DmgLoading SecureBootModel Special Notes with SecureBootModel ApECID",content:"# Apple Secure Boot\n\n * Note: DmgLoading, SecureBootModel and ApECID require OpenCore 0.6.1 or newer\n * Note 2: macOS Big Sur requires OpenCore 0.6.3+ for proper Apple Secure Boot support\n\n\n# What is Apple Secure Boot\n\n * Information based off of vit9696's thread, Apple's T2 docs and Osy's Secure Boot page\n\nTo best understand Apple Secure Boot, lets take a look at how the boot process works in Macs vs OpenCore in regards to security:\n\n\n\nAs we can see, there's several layers of trust incorporated into Apple Secure Boot:\n\n * OpenCore will verify the boot.efi manifest (e.g. boot.efi.j137ap.im4m) to ensure that boot.efi was signed by Apple and can be used by this Secure Boot model.\n   \n   * For non-zero ApECID, OpenCore will additionally verify the ECID value, written in the boot.efi manifest (e.g. boot.efi.j137ap.XXXXXXXX.im4m), to ensure that a compromised hard drive from a different machine with the same Secure Boot model cannot be used in your computer.\n\n * boot.efi will verify the kernelcache to ensure it has not been tampered with\n\n * apfs.kext and AppleImage4 ensure your System Volume's snapshot has not been tampered with(Only applicable with Big Sur+)\n\nNot all of these verifications are required to boot, but they're all possible for those who want maximum security. Currently information regarding firmware-based Secure Boot is not covered however all Apple Secure Boot options are detailed below.\n\n\n# DmgLoading\n\nQuite a simple setting however important in regards to Apple Secure Boot. This setting allows you to set load policy with DMGs in OpenCore. By default we recommend using Signed however for best security Disabled may be preferred.\n\nPossible options for Misc -> Security -> DmgLoading:\n\nVALUE      COMMENT\nAny        Allows all DMGs to load in OpenCore, however this option\n           will cause a boot failure if Apple Secure Boot is enabled\nSigned     Allows only Apple-signed DMGs like macOS installers to load\nDisabled   Disables all external DMG loading, however internal recovery\n           is still allowed with this option\n\n\n# SecureBootModel\n\nSecureBootModel is used set the Apple Secure Boot hardware model and policy, allowing us to enable Apple's Secure Boot with any SMBIOS even if the original SMBIOS did not support it(ie. no T2 present on pre-2017 SMBIOS). Enabling SecureBootModel is the equivalent of \"Medium Security\", for Full Security please see ApECID\n\nCurrently the following options for Misc -> Security -> SecureBootModel are supported:\n\nVALUE       SMBIOS                                     MINIMUM MACOS VERSION\nDisabled    No model, Secure Boot will be disabled.    N/A\nDefault     Currently set to x86legacy                 11.0.1 (20B29)\nj137        iMacPro1,1 (December 2017)                 10.13.2 (17C2111)\nj680        MacBookPro15,1 (July 2018)                 10.13.6 (17G2112)\nj132        MacBookPro15,2 (July 2018)                 10.13.6 (17G2112)\nj174        Macmini8,1 (October 2018)                  10.14 (18A2063)\nj140k       MacBookAir8,1 (October 2018)               10.14.1 (18B2084)\nj780        MacBookPro15,3 (May 2019)                  10.14.5 (18F132)\nj213        MacBookPro15,4 (July 2019)                 10.14.5 (18F2058)\nj140a       MacBookAir8,2 (July 2019)                  10.14.5 (18F2058)\nj152f       MacBookPro16,1 (November 2019)             10.15.1 (19B2093)\nj160        MacPro7,1 (December 2019)                  10.15.1 (19B88)\nj230k       MacBookAir9,1 (March 2020)                 10.15.3 (19D2064)\nj214k       MacBookPro16,2 (May 2020)                  10.15.4 (19E2269)\nj223        MacBookPro16,3 (May 2020)                  10.15.4 (19E2265)\nj215        MacBookPro16,4 (June 2020)                 10.15.5 (19F96)\nj185        iMac20,1 (August 2020)                     10.15.6 (19G2005)\nj185f       iMac20,2 (August 2020)                     10.15.6 (19G2005)\nx86legacy   Non-T2 Macs in 11.0(Recommended for VMs)   11.0.1 (20B29)\n\n\n# Special Notes with SecureBootModel\n\n * The Default value is not recommended as if you plan to use this with ApECID for full security, we recommend setting a proper value (i.e. closest to your SMBIOS or versions of macOS you plan to boot) since the Default value is likely to be updated in the future.\n   * In addition, Default is set to x86legacy which will breaking booting High Sierra through Catalina.\n   * x86legacy is not required for normal Mac models without T2's, any of the above values are supported.\n * The list of cached drivers may be different, resulting in the need to change the list of Added or Forced kernel drivers.\n   * ie. IO80211Family cannot be injected in this case, as it is already present in the kernelcache\n * Unsigned and several signed kernel drivers cannot be used\n   * This includes Nvidia's Web Drivers in 10.13\n * System volume alterations on operating systems with sealing, like macOS 11, may result in the operating system being unbootable.\n   * If you plan to disable macOS's APFS snapshots, please remember to disable SecureBootModel as well\n * Certain boot errors are more likely to be triggered with Secure Boot enabled that were previously not required\n   * Commonly seen with certain APTIO IV systems where they may not require IgnoreInvalidFlexRatio and HashServices initially however Secure Boot does.\n * On older CPUs (ie. before Sandy Bridge) enabling Apple Secure Boot might cause slightly slower loading by up to 1 second\n * Operating systems released before Apple Secure Boot landed (ie. macOS 10.12 or earlier) will still boot until UEFI Secure Boot is enabled. This is so,\n   * This is due to Apple Secure Boot assuming they are incompatible and will be handled by the firmware just like Microsoft Windows is\n * Virtual Machines will want to use x86legacy for Secure Boot support\n   * Note using any other model will require ForceSecureBootScheme enabled\n\nTroubleshooting\n\nDue to an annoying bug on Apple's end, certain systems may be missing the secure boot files themselves on the drive. Because of this, you may get issues such as:\n\nOCB: LoadImage failed - Security Violation\n\n\nTo resolve, run the following in macOS:\n\n# First, find your Preboot volume\ndiskutil list\n\n# From the below list, we can see our Preboot volume is disk5s2\n/dev/disk5 (synthesized):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      APFS Container Scheme -                      +255.7 GB   disk5\n                                 Physical Store disk4s2\n   1:                APFS Volume ⁨Big Sur HD - Data⁩       122.5 GB   disk5s1\n   2:                APFS Volume ⁨Preboot⁩                 309.4 MB   disk5s2\n   3:                APFS Volume ⁨Recovery⁩                887.8 MB   disk5s3\n   4:                APFS Volume ⁨VM⁩                      1.1 MB     disk5s4\n   5:                APFS Volume ⁨Big Sur HD⁩              16.2 GB    disk5s5\n   6:              APFS Snapshot ⁨com.apple.os.update-...⁩ 16.2 GB    disk5s5s\n# Now mount the Preboot volume\ndiskutil mount disk5s2\n\n# CD into your Preboot volume\n# Note the actual volume is under /System/Volumes/Preboot in macOS\n# however in Recovery it's simply under /Volumes/Preboot\ncd /System/Volumes/Preboot\n\n# Grab your UUID\nls\n 46923F6E-968E-46E9-AC6D-9E6141DF52FD\n CD844C38-1A25-48D5-9388-5D62AA46CFB8\n\n# If multiple show up(ie. you dual boot multiple versions of macOS), you will\n# need to determine which UUID is correct.\n# Easiest way to determine is printing the value of .disk_label.contentDetails\n# of each volume.\ncat ./46923F6E-968E-46E9-AC6D-9E6141DF52FD/System/Library/CoreServices/.disk_label.contentDetails\n Big Sur HD%\n\ncat ./CD844C38-1A25-48D5-9388-5D62AA46CFB8/System/Library/CoreServices/.disk_label.contentDetails\n Catalina HD%\n\n# Next lets copy over the secure boot files, recovery will need different commands\n\n# Example commands for inside macOS\n# Replace CD844C38-1A25-48D5-9388-5D62AA46CFB8 with your UUID value\ncd ~\nsudo cp -a /usr/standalone/i386/. /System/Volumes/Preboot/CD844C38-1A25-48D5-9388-5D62AA46CFB8/System/Library/CoreServices\n\n# Example commands for Recovery\n# Replace Macintosh\\ HD and CD844C38-1A25-48D5-9388-5D62AA46CFB8 with\n# your System Volume's name and Preboot's UUID\ncp -a /Volumes/Macintosh\\ HD/usr/standalone/i386/. /Volumes/Preboot/CD844C38-1A25-48D5-9388-5D62AA46CFB8/System/Library/CoreServices\n\n\nNow you can enable SecureBootModel and reboot without issue! And since we're not editing the system volume itself we don't need to worry about disabling SIP or breaking macOS snapshots.\n\n\n# ApECID\n\nApECID is used as an Apple Enclave Identifier, what this means is it allows us to use personalized Apple Secure Boot identifiers and achieve \"Full Security\" as per Apple's secure boot page(when paired with SecureBootModel).\n\nTo generate your own ApECID value, you'll want some form of cryptographically secure random number generator that will output a 64-bit integer. Below we provide an example that can be run if Python 3 is installed on your machine:\n\npython3 -c 'import secrets; print(secrets.randbits(64))'\n\n\nWith this unique 64-bit int, you can now enter it under Misc -> ApECID in your config.plist\n\nHowever before setting ApECID, there's a few things we need to note:\n\n * Fresh installs with ApECID set to a non-zero value will require a network connection at install time for verification\n * SecureBootModel should have a defined value instead of Default to avoid issues if the value were to change in later OpenCore versions.\n * Pre-existing installs will need to personalize the volume, for this you'll need to first reboot into recovery and run the following command(Replace Macintosh HD with your system's volume name):\n\n# Run this command after setting your ApECID value\n# You'll also need an active network connection in recovery to run this command\nbless --folder \"/Volumes/Macintosh HD/System/Library/CoreServices\" --bootefi --personalize\n\n\nAnd something to note when reinstalling macOS 10.15 or older is that you may receive \"Unable to verify macOS\" error message. To work around this issue, you'll want to allocate a dedicated RAM disk of 2 MBs for macOS personalization by entering the following commands in the macOS recovery terminal before starting the installation:\n\ndisk=$(hdiutil attach -nomount ram://4096)\ndiskutil erasevolume HFS+ SecureBoot $disk\ndiskutil unmount $disk\nmkdir /var/tmp/OSPersonalizationTemp\ndiskutil mount -mountpoint /var/tmp/OSPersonalizationTemp $disk\n",normalizedContent:"# apple secure boot\n\n * note: dmgloading, securebootmodel and apecid require opencore 0.6.1 or newer\n * note 2: macos big sur requires opencore 0.6.3+ for proper apple secure boot support\n\n\n# what is apple secure boot\n\n * information based off of vit9696's thread, apple's t2 docs and osy's secure boot page\n\nto best understand apple secure boot, lets take a look at how the boot process works in macs vs opencore in regards to security:\n\n\n\nas we can see, there's several layers of trust incorporated into apple secure boot:\n\n * opencore will verify the boot.efi manifest (e.g. boot.efi.j137ap.im4m) to ensure that boot.efi was signed by apple and can be used by this secure boot model.\n   \n   * for non-zero apecid, opencore will additionally verify the ecid value, written in the boot.efi manifest (e.g. boot.efi.j137ap.xxxxxxxx.im4m), to ensure that a compromised hard drive from a different machine with the same secure boot model cannot be used in your computer.\n\n * boot.efi will verify the kernelcache to ensure it has not been tampered with\n\n * apfs.kext and appleimage4 ensure your system volume's snapshot has not been tampered with(only applicable with big sur+)\n\nnot all of these verifications are required to boot, but they're all possible for those who want maximum security. currently information regarding firmware-based secure boot is not covered however all apple secure boot options are detailed below.\n\n\n# dmgloading\n\nquite a simple setting however important in regards to apple secure boot. this setting allows you to set load policy with dmgs in opencore. by default we recommend using signed however for best security disabled may be preferred.\n\npossible options for misc -> security -> dmgloading:\n\nvalue      comment\nany        allows all dmgs to load in opencore, however this option\n           will cause a boot failure if apple secure boot is enabled\nsigned     allows only apple-signed dmgs like macos installers to load\ndisabled   disables all external dmg loading, however internal recovery\n           is still allowed with this option\n\n\n# securebootmodel\n\nsecurebootmodel is used set the apple secure boot hardware model and policy, allowing us to enable apple's secure boot with any smbios even if the original smbios did not support it(ie. no t2 present on pre-2017 smbios). enabling securebootmodel is the equivalent of \"medium security\", for full security please see apecid\n\ncurrently the following options for misc -> security -> securebootmodel are supported:\n\nvalue       smbios                                     minimum macos version\ndisabled    no model, secure boot will be disabled.    n/a\ndefault     currently set to x86legacy                 11.0.1 (20b29)\nj137        imacpro1,1 (december 2017)                 10.13.2 (17c2111)\nj680        macbookpro15,1 (july 2018)                 10.13.6 (17g2112)\nj132        macbookpro15,2 (july 2018)                 10.13.6 (17g2112)\nj174        macmini8,1 (october 2018)                  10.14 (18a2063)\nj140k       macbookair8,1 (october 2018)               10.14.1 (18b2084)\nj780        macbookpro15,3 (may 2019)                  10.14.5 (18f132)\nj213        macbookpro15,4 (july 2019)                 10.14.5 (18f2058)\nj140a       macbookair8,2 (july 2019)                  10.14.5 (18f2058)\nj152f       macbookpro16,1 (november 2019)             10.15.1 (19b2093)\nj160        macpro7,1 (december 2019)                  10.15.1 (19b88)\nj230k       macbookair9,1 (march 2020)                 10.15.3 (19d2064)\nj214k       macbookpro16,2 (may 2020)                  10.15.4 (19e2269)\nj223        macbookpro16,3 (may 2020)                  10.15.4 (19e2265)\nj215        macbookpro16,4 (june 2020)                 10.15.5 (19f96)\nj185        imac20,1 (august 2020)                     10.15.6 (19g2005)\nj185f       imac20,2 (august 2020)                     10.15.6 (19g2005)\nx86legacy   non-t2 macs in 11.0(recommended for vms)   11.0.1 (20b29)\n\n\n# special notes with securebootmodel\n\n * the default value is not recommended as if you plan to use this with apecid for full security, we recommend setting a proper value (i.e. closest to your smbios or versions of macos you plan to boot) since the default value is likely to be updated in the future.\n   * in addition, default is set to x86legacy which will breaking booting high sierra through catalina.\n   * x86legacy is not required for normal mac models without t2's, any of the above values are supported.\n * the list of cached drivers may be different, resulting in the need to change the list of added or forced kernel drivers.\n   * ie. io80211family cannot be injected in this case, as it is already present in the kernelcache\n * unsigned and several signed kernel drivers cannot be used\n   * this includes nvidia's web drivers in 10.13\n * system volume alterations on operating systems with sealing, like macos 11, may result in the operating system being unbootable.\n   * if you plan to disable macos's apfs snapshots, please remember to disable securebootmodel as well\n * certain boot errors are more likely to be triggered with secure boot enabled that were previously not required\n   * commonly seen with certain aptio iv systems where they may not require ignoreinvalidflexratio and hashservices initially however secure boot does.\n * on older cpus (ie. before sandy bridge) enabling apple secure boot might cause slightly slower loading by up to 1 second\n * operating systems released before apple secure boot landed (ie. macos 10.12 or earlier) will still boot until uefi secure boot is enabled. this is so,\n   * this is due to apple secure boot assuming they are incompatible and will be handled by the firmware just like microsoft windows is\n * virtual machines will want to use x86legacy for secure boot support\n   * note using any other model will require forcesecurebootscheme enabled\n\ntroubleshooting\n\ndue to an annoying bug on apple's end, certain systems may be missing the secure boot files themselves on the drive. because of this, you may get issues such as:\n\nocb: loadimage failed - security violation\n\n\nto resolve, run the following in macos:\n\n# first, find your preboot volume\ndiskutil list\n\n# from the below list, we can see our preboot volume is disk5s2\n/dev/disk5 (synthesized):\n   #:                       type name                    size       identifier\n   0:      apfs container scheme -                      +255.7 gb   disk5\n                                 physical store disk4s2\n   1:                apfs volume ⁨big sur hd - data⁩       122.5 gb   disk5s1\n   2:                apfs volume ⁨preboot⁩                 309.4 mb   disk5s2\n   3:                apfs volume ⁨recovery⁩                887.8 mb   disk5s3\n   4:                apfs volume ⁨vm⁩                      1.1 mb     disk5s4\n   5:                apfs volume ⁨big sur hd⁩              16.2 gb    disk5s5\n   6:              apfs snapshot ⁨com.apple.os.update-...⁩ 16.2 gb    disk5s5s\n# now mount the preboot volume\ndiskutil mount disk5s2\n\n# cd into your preboot volume\n# note the actual volume is under /system/volumes/preboot in macos\n# however in recovery it's simply under /volumes/preboot\ncd /system/volumes/preboot\n\n# grab your uuid\nls\n 46923f6e-968e-46e9-ac6d-9e6141df52fd\n cd844c38-1a25-48d5-9388-5d62aa46cfb8\n\n# if multiple show up(ie. you dual boot multiple versions of macos), you will\n# need to determine which uuid is correct.\n# easiest way to determine is printing the value of .disk_label.contentdetails\n# of each volume.\ncat ./46923f6e-968e-46e9-ac6d-9e6141df52fd/system/library/coreservices/.disk_label.contentdetails\n big sur hd%\n\ncat ./cd844c38-1a25-48d5-9388-5d62aa46cfb8/system/library/coreservices/.disk_label.contentdetails\n catalina hd%\n\n# next lets copy over the secure boot files, recovery will need different commands\n\n# example commands for inside macos\n# replace cd844c38-1a25-48d5-9388-5d62aa46cfb8 with your uuid value\ncd ~\nsudo cp -a /usr/standalone/i386/. /system/volumes/preboot/cd844c38-1a25-48d5-9388-5d62aa46cfb8/system/library/coreservices\n\n# example commands for recovery\n# replace macintosh\\ hd and cd844c38-1a25-48d5-9388-5d62aa46cfb8 with\n# your system volume's name and preboot's uuid\ncp -a /volumes/macintosh\\ hd/usr/standalone/i386/. /volumes/preboot/cd844c38-1a25-48d5-9388-5d62aa46cfb8/system/library/coreservices\n\n\nnow you can enable securebootmodel and reboot without issue! and since we're not editing the system volume itself we don't need to worry about disabling sip or breaking macos snapshots.\n\n\n# apecid\n\napecid is used as an apple enclave identifier, what this means is it allows us to use personalized apple secure boot identifiers and achieve \"full security\" as per apple's secure boot page(when paired with securebootmodel).\n\nto generate your own apecid value, you'll want some form of cryptographically secure random number generator that will output a 64-bit integer. below we provide an example that can be run if python 3 is installed on your machine:\n\npython3 -c 'import secrets; print(secrets.randbits(64))'\n\n\nwith this unique 64-bit int, you can now enter it under misc -> apecid in your config.plist\n\nhowever before setting apecid, there's a few things we need to note:\n\n * fresh installs with apecid set to a non-zero value will require a network connection at install time for verification\n * securebootmodel should have a defined value instead of default to avoid issues if the value were to change in later opencore versions.\n * pre-existing installs will need to personalize the volume, for this you'll need to first reboot into recovery and run the following command(replace macintosh hd with your system's volume name):\n\n# run this command after setting your apecid value\n# you'll also need an active network connection in recovery to run this command\nbless --folder \"/volumes/macintosh hd/system/library/coreservices\" --bootefi --personalize\n\n\nand something to note when reinstalling macos 10.15 or older is that you may receive \"unable to verify macos\" error message. to work around this issue, you'll want to allocate a dedicated ram disk of 2 mbs for macos personalization by entering the following commands in the macos recovery terminal before starting the installation:\n\ndisk=$(hdiutil attach -nomount ram://4096)\ndiskutil erasevolume hfs+ secureboot $disk\ndiskutil unmount $disk\nmkdir /var/tmp/ospersonalizationtemp\ndiskutil mount -mountpoint /var/tmp/ospersonalizationtemp $disk\n",charsets:{}},{title:"FileVault",frontmatter:{},regularPath:"/universal/security/filevault.html",relativePath:"universal/security/filevault.md",key:"v-da38efe8",path:"/universal/security/filevault.html",lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:null,content:"# FileVault\n\nFileVault is macOS's builtin drive encryption, and with OpenCore support for it has been drastically improved compared to the legacy Clover drivers.\n\nTo start, you'll need the following .efi drivers:\n\n * OpenRuntime.efi\n   * OpenUsbKbDxe.efi for DuetPkg users(systems without UEFI support)\n\nDo not use VirtualSMC.efi with OpenCore, its already baked inside. You do however require VirtualSMC.kext still\n\nSetting in your config.plist:\n\n * Misc -> Boot\n   * PollAppleHotKeys set to YES(While not needed can be helpful)\n * Misc -> Security\n   * AuthRestart set to YES(Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional)\n * NVRAM -> Add -> 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n   * UIScale set to 02 for high resolution small displays\n * UEFI -> Input\n   * KeySupport set to YES(Only when using OpenCore's builtin input, users of OpenUsbKbDxe should avoid)\n * UEFI -> Output\n   * ProvideConsoleGop to YES\n * UEFI -> ProtocolOverrides\n   * FirmwareVolume set to YES\n   * HashServices set to YES for Broadwell and older(this includes X99), this is needed for systems with broken SHA-1 hashing\n * UEFI -> Quirks\n   * RequestBootVarRouting set to YES\n   * ExitBootServicesDelay set to 3000-5000 if you receive Still waiting for root device on Aptio IV firmwares(Broadwell and older)\n\nWith all this, you can proceed to enable FileVault like on a normal mac under System Preferences -> Security & Privacy -> FileVault\n\nFor UI issues, see Fixing Resolution and Verbose",normalizedContent:"# filevault\n\nfilevault is macos's builtin drive encryption, and with opencore support for it has been drastically improved compared to the legacy clover drivers.\n\nto start, you'll need the following .efi drivers:\n\n * openruntime.efi\n   * openusbkbdxe.efi for duetpkg users(systems without uefi support)\n\ndo not use virtualsmc.efi with opencore, its already baked inside. you do however require virtualsmc.kext still\n\nsetting in your config.plist:\n\n * misc -> boot\n   * pollapplehotkeys set to yes(while not needed can be helpful)\n * misc -> security\n   * authrestart set to yes(enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional)\n * nvram -> add -> 4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n   * uiscale set to 02 for high resolution small displays\n * uefi -> input\n   * keysupport set to yes(only when using opencore's builtin input, users of openusbkbdxe should avoid)\n * uefi -> output\n   * provideconsolegop to yes\n * uefi -> protocoloverrides\n   * firmwarevolume set to yes\n   * hashservices set to yes for broadwell and older(this includes x99), this is needed for systems with broken sha-1 hashing\n * uefi -> quirks\n   * requestbootvarrouting set to yes\n   * exitbootservicesdelay set to 3000-5000 if you receive still waiting for root device on aptio iv firmwares(broadwell and older)\n\nwith all this, you can proceed to enable filevault like on a normal mac under system preferences -> security & privacy -> filevault\n\nfor ui issues, see fixing resolution and verbose",charsets:{}},{title:"OpenCore Menu Password",frontmatter:{},regularPath:"/universal/security/password.html",relativePath:"universal/security/password.md",key:"v-65af7c76",path:"/universal/security/password.html",lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:null,content:"# OpenCore Menu Password\n\nWith OpenCore 0.6.1 and newer, users are able to set a SHA-512 password to ensure best security with their setups. This will enable a password prompt whenever elevated tasks are required. This includes:\n\n * Showing boot menu\n * Booting non-default OSes and tools(ie. not blessed by Startup Disk or Bootcamp Utility)\n * Resetting NVRAM\n * Booting non-default modes(ie. Verbose or Safe Mode via hotkeys)\n\nWith OpenCore 0.6.7, a new tool called ocpasswordgen was added to aid users in generating passwords.\n\nTo start, lets grab OpenCore 0.6.7 or newer and run the ocpasswordgen binary under Utilities/ocpasswordgen/. It'll prompt you to create a password:\n\n\n\nFor this example, we chose Dortania as the password. ocpasswordgen then popped out 2 important values we need for our config.plist:\n\n * PasswordHash: Hash of the password\n * PasswordSalt: Ensures 2 users with the exact same password do not do not have the same hash\n\nNext let's open our config.plist and add these values to Misc -> Security:\n\n * Note: Don't forget to also enable EnablePassword\n\n\n\nOnce these changes have been made, you can save and reboot the machine. Now when you enter OpenCore's menu, you should receive a prompt:\n\n\n\nEnter your password and you should get your regular boot options:\n\n * Note: Between typing the password and entering the menu, some older machines and VMs can take 30 seconds+ to finish verification. Please be patient\n\n",normalizedContent:"# opencore menu password\n\nwith opencore 0.6.1 and newer, users are able to set a sha-512 password to ensure best security with their setups. this will enable a password prompt whenever elevated tasks are required. this includes:\n\n * showing boot menu\n * booting non-default oses and tools(ie. not blessed by startup disk or bootcamp utility)\n * resetting nvram\n * booting non-default modes(ie. verbose or safe mode via hotkeys)\n\nwith opencore 0.6.7, a new tool called ocpasswordgen was added to aid users in generating passwords.\n\nto start, lets grab opencore 0.6.7 or newer and run the ocpasswordgen binary under utilities/ocpasswordgen/. it'll prompt you to create a password:\n\n\n\nfor this example, we chose dortania as the password. ocpasswordgen then popped out 2 important values we need for our config.plist:\n\n * passwordhash: hash of the password\n * passwordsalt: ensures 2 users with the exact same password do not do not have the same hash\n\nnext let's open our config.plist and add these values to misc -> security:\n\n * note: don't forget to also enable enablepassword\n\n\n\nonce these changes have been made, you can save and reboot the machine. now when you enter opencore's menu, you should receive a prompt:\n\n\n\nenter your password and you should get your regular boot options:\n\n * note: between typing the password and entering the menu, some older machines and vms can take 30 seconds+ to finish verification. please be patient\n\n",charsets:{}},{title:"ScanPolicy",frontmatter:{},regularPath:"/universal/security/scanpolicy.html",relativePath:"universal/security/scanpolicy.md",key:"v-aaa59714",path:"/universal/security/scanpolicy.html",lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:null,content:"# ScanPolicy\n\nWhat this quirk allows to prevent scanning and booting from untrusted sources. Setting to 0 will allow all sources present to be bootable but calculating a specific ScanPolicy value will allow you a greater range of flexibility and security.\n\nTo calculate the ScanPolicy value, you simply add up all the hexadecimal values(with a hexadecimal calculator, you can access this from the built-in macOS calculator app with ⌘+3). Once it's all added up, you would add this hexadecimal value to ScanPolicy(you will need to convert it to a decimal value first, Xcode will automatically convert it when you paste it)\n\n0x00000001 (bit 0) — OC_SCAN_FILE_SYSTEM_LOCK\n\n * restricts scanning to only known file systems defined as a part of this policy. File system drivers may not be aware of this policy, and to avoid mounting of undesired file systems it is best not to load its driver. This bit does not affect dmg mounting, which may have any file system. Known file systems are prefixed with OC_SCAN_ALLOW_FS_.\n\n0x00000002 (bit 1) — OC_SCAN_DEVICE_LOCK\n\n * restricts scanning to only known device types defined as a part of this policy. This is not always possible to detect protocol tunneling, so be aware that on some systems it may be possible for e.g. USB HDDs to be recognized as SATA. Cases like this must be reported. Known device types are prefixed with OC_SCAN_ALLOW_DEVICE_.\n\n0x00000100 (bit 8) — OC_SCAN_ALLOW_FS_APFS\n\n * allows scanning of APFS file system.\n\n0x00000200 (bit 9) — OC_SCAN_ALLOW_FS_HFS\n\n * allows scanning of HFS file system.\n\n0x00000400 (bit 10) — OC_SCAN_ALLOW_FS_ESP\n\n * allows scanning of EFI System Partition file system.\n\n0x00010000 (bit 16) — OC_SCAN_ALLOW_DEVICE_SATA\n\n * allow scanning SATA devices.\n\n0x00020000 (bit 17) — OC_SCAN_ALLOW_DEVICE_SASEX\n\n * allow scanning SAS and Mac NVMe devices.\n\n0x00040000 (bit 18) — OC_SCAN_ALLOW_DEVICE_SCSI\n\n * allow scanning SCSI devices.\n\n0x00080000 (bit 19) — OC_SCAN_ALLOW_DEVICE_NVME\n\n * allow scanning NVMe devices.\n\n0x00100000 (bit 20) — OC_SCAN_ALLOW_DEVICE_ATAPI\n\n * allow scanning CD/DVD devices.\n\n0x00200000 (bit 21) — OC_SCAN_ALLOW_DEVICE_USB\n\n * allow scanning USB devices.\n\n0x00400000 (bit 22) - OC_SCAN_ALLOW_DEVICE_FIREWIRE\n\n * allow scanning FireWire devices.\n\n0x00800000 (bit 23) — OC_SCAN_ALLOW_DEVICE_SDCARD\n\n * allow scanning card reader devices.\n\n0x01000000 (bit 24) — OC_SCAN_ALLOW_DEVICE_PCI\n\n * allow scanning devices directly connected to PCI bus (e.g. VIRTIO).\n\nBy default, ScanPolicy is given a value of 0x10F0103(17,760,515) which is the combination of the following:\n\n * OC_SCAN_FILE_SYSTEM_LOCK\n * OC_SCAN_DEVICE_LOCK\n * OC_SCAN_ALLOW_FS_APFS\n * OC_SCAN_ALLOW_DEVICE_SATA\n * OC_SCAN_ALLOW_DEVICE_SASEX\n * OC_SCAN_ALLOW_DEVICE_SCSI\n * OC_SCAN_ALLOW_DEVICE_NVME\n * OC_SCAN_ALLOW_DEVICE_PCI\n\nAnd lets just say for this example that you want to add OC_SCAN_ALLOW_DEVICE_USB:\n\n0x00200000 + 0x10F0103 = 0x12F0103\n\nAnd converting this to decimal gives us 19,857,667",normalizedContent:"# scanpolicy\n\nwhat this quirk allows to prevent scanning and booting from untrusted sources. setting to 0 will allow all sources present to be bootable but calculating a specific scanpolicy value will allow you a greater range of flexibility and security.\n\nto calculate the scanpolicy value, you simply add up all the hexadecimal values(with a hexadecimal calculator, you can access this from the built-in macos calculator app with ⌘+3). once it's all added up, you would add this hexadecimal value to scanpolicy(you will need to convert it to a decimal value first, xcode will automatically convert it when you paste it)\n\n0x00000001 (bit 0) — oc_scan_file_system_lock\n\n * restricts scanning to only known file systems defined as a part of this policy. file system drivers may not be aware of this policy, and to avoid mounting of undesired file systems it is best not to load its driver. this bit does not affect dmg mounting, which may have any file system. known file systems are prefixed with oc_scan_allow_fs_.\n\n0x00000002 (bit 1) — oc_scan_device_lock\n\n * restricts scanning to only known device types defined as a part of this policy. this is not always possible to detect protocol tunneling, so be aware that on some systems it may be possible for e.g. usb hdds to be recognized as sata. cases like this must be reported. known device types are prefixed with oc_scan_allow_device_.\n\n0x00000100 (bit 8) — oc_scan_allow_fs_apfs\n\n * allows scanning of apfs file system.\n\n0x00000200 (bit 9) — oc_scan_allow_fs_hfs\n\n * allows scanning of hfs file system.\n\n0x00000400 (bit 10) — oc_scan_allow_fs_esp\n\n * allows scanning of efi system partition file system.\n\n0x00010000 (bit 16) — oc_scan_allow_device_sata\n\n * allow scanning sata devices.\n\n0x00020000 (bit 17) — oc_scan_allow_device_sasex\n\n * allow scanning sas and mac nvme devices.\n\n0x00040000 (bit 18) — oc_scan_allow_device_scsi\n\n * allow scanning scsi devices.\n\n0x00080000 (bit 19) — oc_scan_allow_device_nvme\n\n * allow scanning nvme devices.\n\n0x00100000 (bit 20) — oc_scan_allow_device_atapi\n\n * allow scanning cd/dvd devices.\n\n0x00200000 (bit 21) — oc_scan_allow_device_usb\n\n * allow scanning usb devices.\n\n0x00400000 (bit 22) - oc_scan_allow_device_firewire\n\n * allow scanning firewire devices.\n\n0x00800000 (bit 23) — oc_scan_allow_device_sdcard\n\n * allow scanning card reader devices.\n\n0x01000000 (bit 24) — oc_scan_allow_device_pci\n\n * allow scanning devices directly connected to pci bus (e.g. virtio).\n\nby default, scanpolicy is given a value of 0x10f0103(17,760,515) which is the combination of the following:\n\n * oc_scan_file_system_lock\n * oc_scan_device_lock\n * oc_scan_allow_fs_apfs\n * oc_scan_allow_device_sata\n * oc_scan_allow_device_sasex\n * oc_scan_allow_device_scsi\n * oc_scan_allow_device_nvme\n * oc_scan_allow_device_pci\n\nand lets just say for this example that you want to add oc_scan_allow_device_usb:\n\n0x00200000 + 0x10f0103 = 0x12f0103\n\nand converting this to decimal gives us 19,857,667",charsets:{}},{title:"Vault",frontmatter:{},regularPath:"/universal/security/vault.html",relativePath:"universal/security/vault.md",key:"v-4583f094",path:"/universal/security/vault.html",lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:null,content:"# Vault\n\nWhat is vaulting?\n\nWell vaulting is based around 2 things, vault.plist and vault.sig:\n\n * vault.plist: a \"snapshot\" of your EFI\n * vault.sig: validation of vault.plist\n\nThis can be seen as secure boot for OpenCore, so no one can modify it and get in without your permission.\n\nThe specifics of vaulting is that a 256 byte RSA-2048 signature of vault.plist will be shoved into our OpenCore.efi. This key can either be shoved into OpenCoreVault.c before compiling or with sign.command if you already have OpenCore.efi compiled.\n\nDo note that nvram.plist won't be vaulted so users with emulated NVRAM still have risk of someone adding/removing certain NVRAM variables\n\nSettings in your config.plist:\n\n * Misc -> Security -> Vault:\n   * Basic: Requires just vault.plist to be present, mainly used for filesystem integrity verification\n   * Secure: Requires both vault.plist and vault.sig, used for best security as vault.plist changes require a new signature\n * Booter -> ProtectSecureBoot: YES\n   * Needed with Insyde firmwares for fixing secure boot keys and reporting violations\n\nSetting up vault:\n\nGrab OpenCorePkg and open the CreateVault folder, inside we'll find the following:\n\n * create_vault.sh\n * RsaTool\n * sign.command\n\nThe last one is what we care about: sign.command\n\nSo when we run this command, it'll look for the EFI folder located beside our Utilities folder, so we want to bring either our personal EFI into the OpenCorePkg folder or bring Utilities into our EFI folder:\n\n\n\nNow we're ready to run sign.command:\n\n\n\nDisabling Vault after setup:\n\nIf you're doing heavy troubleshooting or have the need to disable Vault, the main things to change:\n\n * Grab a new copy of OpenCore.efi\n * Misc -> Security -> Vault set to Optional\n * Remove vault.plist and vault.sig",normalizedContent:"# vault\n\nwhat is vaulting?\n\nwell vaulting is based around 2 things, vault.plist and vault.sig:\n\n * vault.plist: a \"snapshot\" of your efi\n * vault.sig: validation of vault.plist\n\nthis can be seen as secure boot for opencore, so no one can modify it and get in without your permission.\n\nthe specifics of vaulting is that a 256 byte rsa-2048 signature of vault.plist will be shoved into our opencore.efi. this key can either be shoved into opencorevault.c before compiling or with sign.command if you already have opencore.efi compiled.\n\ndo note that nvram.plist won't be vaulted so users with emulated nvram still have risk of someone adding/removing certain nvram variables\n\nsettings in your config.plist:\n\n * misc -> security -> vault:\n   * basic: requires just vault.plist to be present, mainly used for filesystem integrity verification\n   * secure: requires both vault.plist and vault.sig, used for best security as vault.plist changes require a new signature\n * booter -> protectsecureboot: yes\n   * needed with insyde firmwares for fixing secure boot keys and reporting violations\n\nsetting up vault:\n\ngrab opencorepkg and open the createvault folder, inside we'll find the following:\n\n * create_vault.sh\n * rsatool\n * sign.command\n\nthe last one is what we care about: sign.command\n\nso when we run this command, it'll look for the efi folder located beside our utilities folder, so we want to bring either our personal efi into the opencorepkg folder or bring utilities into our efi folder:\n\n\n\nnow we're ready to run sign.command:\n\n\n\ndisabling vault after setup:\n\nif you're doing heavy troubleshooting or have the need to disable vault, the main things to change:\n\n * grab a new copy of opencore.efi\n * misc -> security -> vault set to optional\n * remove vault.plist and vault.sig",charsets:{}},{title:"Fixing Sleep",frontmatter:{},regularPath:"/universal/sleep.html",relativePath:"universal/sleep.md",key:"v-7a8662d4",path:"/universal/sleep.html",headers:[{level:2,title:"Preparations",slug:"preparations",normalizedTitle:"preparations",charIndex:1250},{level:2,title:"Main culprits",slug:"main-culprits",normalizedTitle:"main culprits",charIndex:2965},{level:3,title:"Fixing USB",slug:"fixing-usb",normalizedTitle:"fixing usb",charIndex:3054},{level:3,title:"Fixing GPUs",slug:"fixing-gpus",normalizedTitle:"fixing gpus",charIndex:4041},{level:3,title:"Fixing Thunderbolt",slug:"fixing-thunderbolt",normalizedTitle:"fixing thunderbolt",charIndex:6074},{level:3,title:"Fixing NICs",slug:"fixing-nics",normalizedTitle:"fixing nics",charIndex:6531},{level:3,title:"Fixing NVMe",slug:"fixing-nvme",normalizedTitle:"fixing nvme",charIndex:6855},{level:3,title:"Fixing CPU Power Management",slug:"fixing-cpu-power-management",normalizedTitle:"fixing cpu power management",charIndex:7558},{level:2,title:"Other Culprits",slug:"other-culprits",normalizedTitle:"other culprits",charIndex:8084},{level:3,title:"Displays",slug:"displays",normalizedTitle:"displays",charIndex:743},{level:3,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:755},{level:3,title:"RTC",slug:"rtc",normalizedTitle:"rtc",charIndex:764},{level:3,title:"IRQ Conflicts",slug:"irq-conflicts",normalizedTitle:"irq conflicts",charIndex:785},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:802},{level:3,title:"SMBus",slug:"smbus",normalizedTitle:"smbus",charIndex:811},{level:3,title:"TSC",slug:"tsc",normalizedTitle:"tsc",charIndex:820}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"Preparations Main culprits Fixing USB Fixing GPUs Fixing Thunderbolt Fixing NICs Fixing NVMe Fixing CPU Power Management Other Culprits Displays NVRAM RTC IRQ Conflicts Audio SMBus TSC",content:"# Fixing Sleep\n\nSo to understand how to fix sleep issues in macOS, we need to first look at what contributes to sleep issues most of the time:\n\n * Incorrectly managed devices(most commonly PCIe based devices)\n\nThe reason for this is when devices get an S3 call(or S0 for wake), the driver needs to power down the devices and put into a low state mode(vice versa when waking). Problems arise when such devices don't cooperate with the drivers and the main offenders of these issues are:\n\n * USB Controllers and Devices\n * GPUs\n * Thunderbolt Controllers and Devices\n * NICs(Both Ethernet and Wifi)\n * NVMe Drives\n\nAnd there are others that can cause sleep issues that aren't directly(or obviously) related to PCI/e:\n\n * CPU Power Management\n * Displays\n * NVRAM\n * RTC/System Clocks\n * IRQ Conflicts\n * Audio\n * SMBus\n * TSC\n\nAnd something many people forget are over and under-clocks:\n\n * CPUs\n   * AVX often breaks iGPUs and hurt overall stability\n * Bad RAM(Both overclocks and mismatched RAM)\n   * Even bad/mismatched timings can cause serious issues\n * Factory GPU Overclocks\n   * OEMs commonly push a card a bit too far with their custom VBIOS\n   * Generally these cards will have a physical switch, allowing you to choose a low power VBIOS\n\n\n# Preparations\n\nIn macOS:\n\nBefore we get in too deep, we'll want to first ready our system:\n\nsudo pmset autopoweroff 0\nsudo pmset powernap 0\nsudo pmset standby 0\nsudo pmset proximitywake 0\nsudo pmset tcpkeepalive 0\n\n\nThis will do 5 things for us:\n\n 1. Disables autopoweroff: This is a form of hibernation\n 2. Disables powernap: Used to periodically wake the machine for network, and updates(but not the display)\n 3. Disables standby: Used as a time period between sleep and going into hibernation\n 4. Disables wake from iPhone/Watch: Specifically when your iPhone or Apple Watch come near, the machine will wake\n 5. Disables TCP Keep Alive mechanism to prevent wake ups every 2 hours\n\nIn your config.plist:\n\nWhile minimal changes are needed, here are the ones we care about:\n\n * Misc -> Boot -> HibernateMode -> None\n   * We're gonna avoid the black magic that is S4 for this guide\n * NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> boot-args\n   * keepsyms=1 - Makes sure that if a kernel panic does happen during sleep, that we get all the important bits from it\n   * swd_panic=1 - Avoids issue where going to sleep results in a reboot, this should instead give us a kernel panic log\n\nIn your BIOS:\n\n * Disable:\n   * Wake on LAN\n   * Trusted Platform Module\n     * Note that if you're using BitLocker in Windows, disabling this will result in all your encryption keys being lost. If you're using BitLocker, either disable or note that it may be a cause for wake issues.\n   * Wake on USB(Certain boards may actually require this on to wake, but most will get random wakeup calls with it)\n * Enable:\n   * Wake on Bluetooth(If using a Bluetooth device for waking like a keyboard, otherwise you can disable)\n\n\n# Main culprits\n\n * USB\n * GPUs\n * Thunderbolt\n * NICs\n * NVMe\n * CPU Power Management\n\n\n# Fixing USB\n\nThis is the #1 cause of sleep issues on hacks, mainly because Apple's drivers are quite bad at guessing ports and the port limit patches have the ill-effect of creating instability.\n\n * USB Mapping\n\nThis guide also includes some other fixes than just mapping:\n\n * Fixing USB Power\n * Fixing Shutdown/Restart\n * GPRW/UPRW/LANC Instant Wake Patch\n * Keyboard Wake Issues\n\nUSB maps with macOS Catalina(10.15) and newer: You may find that even with USB mapping, your sleep breaks. one possible solution is renaming the IOClass value from AppleUSBMergeNub to AppleUSBHostMergeProperties. See here for more info: Changes in Catalina's USB IOClass\n\n * Note: Some USB devices that do not have proper drivers in macOS can unfortunately result in sleep issues. For example, Corsair water coolers with USB addressable control can prevent the machine from sleeping correctly. For these situations, we recommend users disconnect these troublesome devices when debugging sleep issues.\n\n\n# Fixing GPUs\n\nWith GPUs, it's fairly easy to know what might be causing issues. This being unsupported GPUs in macOS. By default, any GPU that doesn't have drivers already provided in the OS will run off very basic drivers known as VESA drivers. These provide minimal display output but also cause a big issue in that macOS doesn't actually know how to properly interact with these devices. To fix this, well need to either trick macOS into thinking it's a generic PCIe device(which it can better handle, ideal for desktops) or completely power off the card(on laptops, desktop dGPUs have issues powering down)\n\n * See here for more info:\n   * Disabling desktop dGPUs\n   * Disabling laptop dGPUs\n\nSpecial notes for iGPU users on 10.15.4 and newer:\n\n * iGPU wake is partially broken due to numerous hacks apple uses in AppleGraphicsPowerManagement.kext with real Macs, to get around this you'll likely need igfxonln=1 to force all displays online. Obviously test first to make sure you have this issue.\n * AAPL,ig-platform-id 07009B3E may fail for desktop Coffee Lake (UHD 630) users, you can try 00009B3E instead. 0300923E is also known to work sometimes.\n\nOther iGPU notes:\n\n * Some systems with iGPUs (e.g. Kaby Lake and Coffee Lake) may cause system instability in lower power states, and can sometimes manifest as NVMe kernel panics. To resolve, you can add forceRenderStandby=0 to your boot-args to disable RC6 Render Standby. See here for more info: IGP causes NVMe Kernel Panic CSTS=0xffffffff #1193\n * Certain Ice Lake laptops may also kernel panic on Cannot allow DC9 without disallowing DC6 due to issues with transitioning states. A work around for this is using either -noDC9 or -nodisplaysleepDC6 in your boot-args\n\nSpecial note for 4k Displays with AMD dGPUs:\n\n * Some displays may fail to wake randomly, mainly caused by AGDC preferences. To fix, apply this to your dGPU in DeviceProperties:\n   * CFG,CFG_USE_AGDC | Data | 00\n   * You can find the PciRoot of your GPU with gfxutil\n     * /path/to/gfxutil -f GFX0\n\n\n\n\n# Fixing Thunderbolt\n\nThunderbolt is a very tricky topic in the community, mainly due to the complexity of the situation. You really have just 2 paths to go down if you want Thunderbolt and sleep to work simultaneously:\n\n * Disable Thunderbolt 3 in the BIOS\n * Attempt to patch Thunderbolt 3:\n   * Thunderbolt 3 Fix\n   * ThunderboltReset\n   * ThunderboltPkg\n\nNote: Thunderbolt can be enabled without extra work if you're ok without sleep, and vice versa.\n\n\n# Fixing NICs\n\nNICs(network Interface Controllers) are fairly easy to fix with sleep, it's mainly the following:\n\n * Disable WakeOnLAN in the BIOS\n   * Most systems will enter a sleep/wake loop with this enabled\n * Disable Wake for network access in macOS(SystemPreferences -> Power)\n   * Seems to break on a lot of hacks\n\n\n# Fixing NVMe\n\nSo macOS can be quite picky when it comes to NVMe drives, and there's also the issue that Apple's power management drivers are limited to Apple branded drives only. So the main things to do are:\n\n * Make sure the NVMe is on the latest firmware(especially important for 970 Evo Plus drives)\n * Use NVMeFix.kext to allow for proper NVMe power management\n\nAnd avoid problematic drives, the main culprits:\n\n * Samsung's PM981 and PM991 SSDs\n * Micron's 2200S\n\nIf you however do have these drives in your system, it's best to disable them via an SSDT: Disabling desktop dGPUs. This guide is primarily for dGPU but works the exact same way with NVMe drives(as they're both just PCIe devices)\n\n\n# Fixing CPU Power Management\n\nFor Intel:\n\nTo verify you have working CPU Power Management, see the Fixing Power Management page.\n\nAlso note that incorrect power management data can result in wake issues, so verify that you're using the correct SMBIOS.\n\nA common kernel panic from wake would be:\n\nSleep Wake failure in EFI\n\n\nFor AMD:\n\nFret not, for their is still hope for you as well! AMDRyzenCPUPowerManagement.kext can add power management to Ryzen based CPUs. Installation and usage is explained on the repo's README.md\n\n\n# Other Culprits\n\n * Displays\n * NVRAM\n * RTC\n * IRQ Conflicts\n * Audio\n * SMBus\n * TSC\n\n\n# Displays\n\nSo display issues are mainly for laptop lid detection, specifically:\n\n * Incorrectly made SSDT-PNLF\n * OS vs firmware lid wake\n * Keyboard spams from lid waking it(On PS2 based keyboards)\n\nThe former is quite easy to fix, see here: Backlight PNLF\n\nFor the middle, macOS's lid wake detection can bit a bit broken and you may need to outright disable it:\n\nsudo pmset lidwake 0\n\n\nAnd set lidwake 1 to re-enable it.\n\nThe latter requires a bit more work. What we'll be doing is trying to nullify semi random key spams that happen on Skylake and newer based HPs though pop up in other OEMs as well. This will also assume that your keyboard is PS2 based and are running VoodooPS2.\n\nTo fix this, grab SSDT-HP-FixLidSleep.dsl and adapt the ACPI pathing to your keyboard(_CID value being PNP0303). Once this is done, compile and drop into both EFI/OC/ACPI and under config.plist -> ACPI -> Add.\n\nFor 99% of HP users, this will fix the random key spam. If not, see below threads:\n\n * RehabMan's brightness key guide\n\n\n# NVRAM\n\nTo verify you have working NVRAM, see the Emulated NVRAM page to verify you have working NVRAM. And if not, then patch accordingly.\n\n\n# RTC\n\nThis is mainly relevant for Intel 300 series motherboards(Z3xx), specifically that there's 2 issues:\n\n * Be default the RTC is disabled(instead using AWAC)\n * The RTC is usually not compatible with macOS\n\nTo get around the first issue, see here: Fixing AWAC\n\nFor the second one, it's quite easy to tell you have RTC issues when you either shutdown or restart. Specifically you'll be greeted with a \"BIOS Restarted in Safemode\" error. To fix this, we'll need to prevent macOS from writing to the RTC regions causing these issues. There are a couple fixes:\n\n * DisableRtcChecksum: Prevent writing to primary checksum (0x58-0x59), works with most boards\n * UEFI -> ProtoclOverride -> AppleRtcRam + NVRAM -> Add -> rtc-blacklist\n   * Blacklists certain regions at the firmware level, see Configuration.pdf for more info on how to set this up\n * RTCMemoryFixup + rtcfx_exclude=\n   * Blacklists certain regions at the kernel level, see README for more info on how to setup\n\nWith some legacy boards, you may actually need to patch your RTC: Z68 RTC\n\n\n# IRQ Conflicts\n\nIRQ issues usually occur during bootups but some may notice that IRQ calls can break with sleep, this fix is fairly easy:\n\n * SSDTTime\n   * First dump your DSDT in Linux/Windows\n   * then select FixHPET option\n\nThis will provide you with both SSDT-HPET.aml and patches_OC.plist, You will want to add the SSDT to EFI/OC/ACPI and add the ACPI patches into your config.plist from the patches_OC.plist\n\n\n# Audio\n\nUnmanaged or incorrectly managed audio devices can also cause issues, either disable unused audio devices in your BIOS or verify they're working correctly here:\n\n * Fixing Audio\n\n\n# SMBus\n\nMain reason you'd care about SMBus is AppleSMBus can help properly manage both SMBus and PCI devices like with power states. Problem is the kext usually won't load by itself, so you'll need to actually create the SSDT-SMBS-MCHC.\n\nSee here on more info on how to make it: Fixing SMBus support\n\n\n# TSC\n\nThe TSC(Time Stamp Counter) is responsible for making sure you're hardware is running at the correct speed, problem is some firmware(mainly HEDT/Server and Asus Laptops) will not write the TSC to all cores causing issues. To get around this, we have 3 options:\n\n * CpuTscSync\n   * For troublesome laptops\n * VoodooTSCSync\n   * For most HEDT hardware\n * TSCAdjustReset\n   * For Skylake X/W/SP and Cascade Lake X/W/SP hardware\n\nThe former 2 are plug n play, while the latter will need some customizations:\n\n * Open up the kext(ShowPackageContents in finder, Contents -> Info.plist) and change the Info.plist -> IOKitPersonalities -> IOPropertyMatch -> IOCPUNumber to the number of CPU threads you have starting from 0(i9 7980xe 18 core would be 35 as it has 36 threads total)\n * Compiled version can be found here: TSCAdjustReset.kext\n\n\n\nThe most common way to see the TSC issue:\n\nCASE 1   CASE 2\n         ",normalizedContent:"# fixing sleep\n\nso to understand how to fix sleep issues in macos, we need to first look at what contributes to sleep issues most of the time:\n\n * incorrectly managed devices(most commonly pcie based devices)\n\nthe reason for this is when devices get an s3 call(or s0 for wake), the driver needs to power down the devices and put into a low state mode(vice versa when waking). problems arise when such devices don't cooperate with the drivers and the main offenders of these issues are:\n\n * usb controllers and devices\n * gpus\n * thunderbolt controllers and devices\n * nics(both ethernet and wifi)\n * nvme drives\n\nand there are others that can cause sleep issues that aren't directly(or obviously) related to pci/e:\n\n * cpu power management\n * displays\n * nvram\n * rtc/system clocks\n * irq conflicts\n * audio\n * smbus\n * tsc\n\nand something many people forget are over and under-clocks:\n\n * cpus\n   * avx often breaks igpus and hurt overall stability\n * bad ram(both overclocks and mismatched ram)\n   * even bad/mismatched timings can cause serious issues\n * factory gpu overclocks\n   * oems commonly push a card a bit too far with their custom vbios\n   * generally these cards will have a physical switch, allowing you to choose a low power vbios\n\n\n# preparations\n\nin macos:\n\nbefore we get in too deep, we'll want to first ready our system:\n\nsudo pmset autopoweroff 0\nsudo pmset powernap 0\nsudo pmset standby 0\nsudo pmset proximitywake 0\nsudo pmset tcpkeepalive 0\n\n\nthis will do 5 things for us:\n\n 1. disables autopoweroff: this is a form of hibernation\n 2. disables powernap: used to periodically wake the machine for network, and updates(but not the display)\n 3. disables standby: used as a time period between sleep and going into hibernation\n 4. disables wake from iphone/watch: specifically when your iphone or apple watch come near, the machine will wake\n 5. disables tcp keep alive mechanism to prevent wake ups every 2 hours\n\nin your config.plist:\n\nwhile minimal changes are needed, here are the ones we care about:\n\n * misc -> boot -> hibernatemode -> none\n   * we're gonna avoid the black magic that is s4 for this guide\n * nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 -> boot-args\n   * keepsyms=1 - makes sure that if a kernel panic does happen during sleep, that we get all the important bits from it\n   * swd_panic=1 - avoids issue where going to sleep results in a reboot, this should instead give us a kernel panic log\n\nin your bios:\n\n * disable:\n   * wake on lan\n   * trusted platform module\n     * note that if you're using bitlocker in windows, disabling this will result in all your encryption keys being lost. if you're using bitlocker, either disable or note that it may be a cause for wake issues.\n   * wake on usb(certain boards may actually require this on to wake, but most will get random wakeup calls with it)\n * enable:\n   * wake on bluetooth(if using a bluetooth device for waking like a keyboard, otherwise you can disable)\n\n\n# main culprits\n\n * usb\n * gpus\n * thunderbolt\n * nics\n * nvme\n * cpu power management\n\n\n# fixing usb\n\nthis is the #1 cause of sleep issues on hacks, mainly because apple's drivers are quite bad at guessing ports and the port limit patches have the ill-effect of creating instability.\n\n * usb mapping\n\nthis guide also includes some other fixes than just mapping:\n\n * fixing usb power\n * fixing shutdown/restart\n * gprw/uprw/lanc instant wake patch\n * keyboard wake issues\n\nusb maps with macos catalina(10.15) and newer: you may find that even with usb mapping, your sleep breaks. one possible solution is renaming the ioclass value from appleusbmergenub to appleusbhostmergeproperties. see here for more info: changes in catalina's usb ioclass\n\n * note: some usb devices that do not have proper drivers in macos can unfortunately result in sleep issues. for example, corsair water coolers with usb addressable control can prevent the machine from sleeping correctly. for these situations, we recommend users disconnect these troublesome devices when debugging sleep issues.\n\n\n# fixing gpus\n\nwith gpus, it's fairly easy to know what might be causing issues. this being unsupported gpus in macos. by default, any gpu that doesn't have drivers already provided in the os will run off very basic drivers known as vesa drivers. these provide minimal display output but also cause a big issue in that macos doesn't actually know how to properly interact with these devices. to fix this, well need to either trick macos into thinking it's a generic pcie device(which it can better handle, ideal for desktops) or completely power off the card(on laptops, desktop dgpus have issues powering down)\n\n * see here for more info:\n   * disabling desktop dgpus\n   * disabling laptop dgpus\n\nspecial notes for igpu users on 10.15.4 and newer:\n\n * igpu wake is partially broken due to numerous hacks apple uses in applegraphicspowermanagement.kext with real macs, to get around this you'll likely need igfxonln=1 to force all displays online. obviously test first to make sure you have this issue.\n * aapl,ig-platform-id 07009b3e may fail for desktop coffee lake (uhd 630) users, you can try 00009b3e instead. 0300923e is also known to work sometimes.\n\nother igpu notes:\n\n * some systems with igpus (e.g. kaby lake and coffee lake) may cause system instability in lower power states, and can sometimes manifest as nvme kernel panics. to resolve, you can add forcerenderstandby=0 to your boot-args to disable rc6 render standby. see here for more info: igp causes nvme kernel panic csts=0xffffffff #1193\n * certain ice lake laptops may also kernel panic on cannot allow dc9 without disallowing dc6 due to issues with transitioning states. a work around for this is using either -nodc9 or -nodisplaysleepdc6 in your boot-args\n\nspecial note for 4k displays with amd dgpus:\n\n * some displays may fail to wake randomly, mainly caused by agdc preferences. to fix, apply this to your dgpu in deviceproperties:\n   * cfg,cfg_use_agdc | data | 00\n   * you can find the pciroot of your gpu with gfxutil\n     * /path/to/gfxutil -f gfx0\n\n\n\n\n# fixing thunderbolt\n\nthunderbolt is a very tricky topic in the community, mainly due to the complexity of the situation. you really have just 2 paths to go down if you want thunderbolt and sleep to work simultaneously:\n\n * disable thunderbolt 3 in the bios\n * attempt to patch thunderbolt 3:\n   * thunderbolt 3 fix\n   * thunderboltreset\n   * thunderboltpkg\n\nnote: thunderbolt can be enabled without extra work if you're ok without sleep, and vice versa.\n\n\n# fixing nics\n\nnics(network interface controllers) are fairly easy to fix with sleep, it's mainly the following:\n\n * disable wakeonlan in the bios\n   * most systems will enter a sleep/wake loop with this enabled\n * disable wake for network access in macos(systempreferences -> power)\n   * seems to break on a lot of hacks\n\n\n# fixing nvme\n\nso macos can be quite picky when it comes to nvme drives, and there's also the issue that apple's power management drivers are limited to apple branded drives only. so the main things to do are:\n\n * make sure the nvme is on the latest firmware(especially important for 970 evo plus drives)\n * use nvmefix.kext to allow for proper nvme power management\n\nand avoid problematic drives, the main culprits:\n\n * samsung's pm981 and pm991 ssds\n * micron's 2200s\n\nif you however do have these drives in your system, it's best to disable them via an ssdt: disabling desktop dgpus. this guide is primarily for dgpu but works the exact same way with nvme drives(as they're both just pcie devices)\n\n\n# fixing cpu power management\n\nfor intel:\n\nto verify you have working cpu power management, see the fixing power management page.\n\nalso note that incorrect power management data can result in wake issues, so verify that you're using the correct smbios.\n\na common kernel panic from wake would be:\n\nsleep wake failure in efi\n\n\nfor amd:\n\nfret not, for their is still hope for you as well! amdryzencpupowermanagement.kext can add power management to ryzen based cpus. installation and usage is explained on the repo's readme.md\n\n\n# other culprits\n\n * displays\n * nvram\n * rtc\n * irq conflicts\n * audio\n * smbus\n * tsc\n\n\n# displays\n\nso display issues are mainly for laptop lid detection, specifically:\n\n * incorrectly made ssdt-pnlf\n * os vs firmware lid wake\n * keyboard spams from lid waking it(on ps2 based keyboards)\n\nthe former is quite easy to fix, see here: backlight pnlf\n\nfor the middle, macos's lid wake detection can bit a bit broken and you may need to outright disable it:\n\nsudo pmset lidwake 0\n\n\nand set lidwake 1 to re-enable it.\n\nthe latter requires a bit more work. what we'll be doing is trying to nullify semi random key spams that happen on skylake and newer based hps though pop up in other oems as well. this will also assume that your keyboard is ps2 based and are running voodoops2.\n\nto fix this, grab ssdt-hp-fixlidsleep.dsl and adapt the acpi pathing to your keyboard(_cid value being pnp0303). once this is done, compile and drop into both efi/oc/acpi and under config.plist -> acpi -> add.\n\nfor 99% of hp users, this will fix the random key spam. if not, see below threads:\n\n * rehabman's brightness key guide\n\n\n# nvram\n\nto verify you have working nvram, see the emulated nvram page to verify you have working nvram. and if not, then patch accordingly.\n\n\n# rtc\n\nthis is mainly relevant for intel 300 series motherboards(z3xx), specifically that there's 2 issues:\n\n * be default the rtc is disabled(instead using awac)\n * the rtc is usually not compatible with macos\n\nto get around the first issue, see here: fixing awac\n\nfor the second one, it's quite easy to tell you have rtc issues when you either shutdown or restart. specifically you'll be greeted with a \"bios restarted in safemode\" error. to fix this, we'll need to prevent macos from writing to the rtc regions causing these issues. there are a couple fixes:\n\n * disablertcchecksum: prevent writing to primary checksum (0x58-0x59), works with most boards\n * uefi -> protocloverride -> applertcram + nvram -> add -> rtc-blacklist\n   * blacklists certain regions at the firmware level, see configuration.pdf for more info on how to set this up\n * rtcmemoryfixup + rtcfx_exclude=\n   * blacklists certain regions at the kernel level, see readme for more info on how to setup\n\nwith some legacy boards, you may actually need to patch your rtc: z68 rtc\n\n\n# irq conflicts\n\nirq issues usually occur during bootups but some may notice that irq calls can break with sleep, this fix is fairly easy:\n\n * ssdttime\n   * first dump your dsdt in linux/windows\n   * then select fixhpet option\n\nthis will provide you with both ssdt-hpet.aml and patches_oc.plist, you will want to add the ssdt to efi/oc/acpi and add the acpi patches into your config.plist from the patches_oc.plist\n\n\n# audio\n\nunmanaged or incorrectly managed audio devices can also cause issues, either disable unused audio devices in your bios or verify they're working correctly here:\n\n * fixing audio\n\n\n# smbus\n\nmain reason you'd care about smbus is applesmbus can help properly manage both smbus and pci devices like with power states. problem is the kext usually won't load by itself, so you'll need to actually create the ssdt-smbs-mchc.\n\nsee here on more info on how to make it: fixing smbus support\n\n\n# tsc\n\nthe tsc(time stamp counter) is responsible for making sure you're hardware is running at the correct speed, problem is some firmware(mainly hedt/server and asus laptops) will not write the tsc to all cores causing issues. to get around this, we have 3 options:\n\n * cputscsync\n   * for troublesome laptops\n * voodootscsync\n   * for most hedt hardware\n * tscadjustreset\n   * for skylake x/w/sp and cascade lake x/w/sp hardware\n\nthe former 2 are plug n play, while the latter will need some customizations:\n\n * open up the kext(showpackagecontents in finder, contents -> info.plist) and change the info.plist -> iokitpersonalities -> iopropertymatch -> iocpunumber to the number of cpu threads you have starting from 0(i9 7980xe 18 core would be 35 as it has 36 threads total)\n * compiled version can be found here: tscadjustreset.kext\n\n\n\nthe most common way to see the tsc issue:\n\ncase 1   case 2\n         ",charsets:{cjk:!0}},{title:"升级OpenCore和macOS",frontmatter:{},regularPath:"/universal/update.html",relativePath:"universal/update.md",key:"v-414bd070",path:"/universal/update.html",headers:[{level:2,title:"升级OpenCore",slug:"升级opencore",normalizedTitle:"升级opencore",charIndex:2},{level:3,title:"1. 下载最新版本的OpenCore",slug:"_1-下载最新版本的opencore",normalizedTitle:"1. 下载最新版本的opencore",charIndex:237},{level:3,title:"2. 挂载你的EFI",slug:"_2-挂载你的efi",normalizedTitle:"2. 挂载你的efi",charIndex:276},{level:3,title:"3. 将OpenCore文件替换为刚刚下载的文件",slug:"_3-将opencore文件替换为刚刚下载的文件",normalizedTitle:"3. 将opencore文件替换为刚刚下载的文件",charIndex:519},{level:3,title:"4. 将你的config.plist与新的Sample.plist进行比较",slug:"_4-将你的config-plist与新的sample-plist进行比较",normalizedTitle:"4. 将你的config.plist与新的sample.plist进行比较",charIndex:730},{level:3,title:"5. 引导！",slug:"_5-引导",normalizedTitle:"5. 引导！",charIndex:1412},{level:2,title:"更新内核扩展",slug:"更新内核扩展",normalizedTitle:"更新内核扩展",charIndex:1506},{level:2,title:"更新macOS",slug:"更新macos",normalizedTitle:"更新macos",charIndex:1663}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"升级OpenCore 1. 下载最新版本的OpenCore 2. 挂载你的EFI 3. 将OpenCore文件替换为刚刚下载的文件 4. 将你的config.plist与新的Sample.plist进行比较 5. 引导！ 更新内核扩展 更新macOS",content:"# 升级OpenCore和macOS\n\n\n# 升级OpenCore\n\nSo the main things to note with updating OpenCore:\n\n * 每个月的第一个星期一会有一个新的Release\n * Differences.pdf将告诉你与以前的版本相比，这个版本的OpenCore添加和删除的所有内容\n * OpenCore安装指南将在header中有一个关于它支持的发行版本的说明\n\n> 如何更新呢?\n\n所以这个过程是这样的:\n\n\n# 1. 下载最新版本的OpenCore\n\n * OpenCorePkg\n\n\n# 2. 挂载你的EFI\n\n * 因此，首先，让挂载您的硬盘驱动器的EFI，并在安全的地方复制MountEFI。我们不会首先更新驱动器的EFI，相反，我们将使用一个备用USB作为我们测试使用。这允许我们保留OpenCore的可用副本，以防我们的更新出错\n\n * 对于USB，它必须格式化为GUID。这样做的原因是GUID将自动创建一个EFI分区，尽管默认情况下它是隐藏的，所以您需要使用MountEFI挂载它。\n\n\n\n * 现在你可以把你的OpenCore EFI放在USB上\n\n\n\n\n# 3. 将OpenCore文件替换为刚刚下载的文件\n\n * 需要更新的重要内容:\n   \n   * EFI/BOOT/BOOTx64.efi\n   * EFI/OC/OpenCore.efi\n   * EFI/OC/Drivers/OpenRuntime.efi(不要忘记这个，它和OpenCore版本必须匹配，否则不会启动)\n\n * 你也可以更新你现有的其他驱动程序，这些只是为了正确启动而必须更新的驱动程序\n\n\n\n\n# 4. 将你的config.plist与新的Sample.plist进行比较\n\n * 有几种方法可以做到这一点:\n   \n   * OCConfigCompare 在样本之间进行比较Sample.plist和config.plist\n   * 在终端中使用diff (file input 1) (file input 2)\n   * Meld Merge, WinMerge, 或者其他你喜欢的比较软件\n   * 根据阅读更新的OpenCore安装指南进行新的配置\n\n\n\n * 一旦你做了调整，以确保你的配置符合最新版本的OpenCore，你可以使用OpenCore实用程序ocvalidate:这个工具将帮助确保你的config.plist匹配匹配构建的OpenCore规范。\n   * 请注意，ocvalidate必须与使用的OpenCore版本匹配，并且可能无法检测到文件中存在的所有配置缺陷。我们建议用OpenCore指南仔细检查您的设置，以设置所有内容，否则请阅读Differences.pdf以获取有关更改的更深入的文档。\n   * 要运行ocvalidate， cd进入OpenCore的Utilities/ocvalidate/，然后运行./ocvalidate <insert_config.plist>。注意，您可能需要运行chmod +x ocvalidate来执行它。\n   * 此外，更新ProperTree并执行OC快照(Ctrl/Cmd+R)，以确保您的ssdt，驱动程序，文本等的配置项符合OpenCore预期的格式。\n\n\n\n\n# 5. 引导！\n\n * 一旦虚拟USB正常工作，您就可以挂载EFI并将其移动到硬盘驱动器的EFI分区。记得保留一份你的旧EFI的副本，以防OpenCore在未来的道路上表现得很滑稽\n\n\n# 更新内核扩展\n\n * 更新内核扩展与更新OpenCore的过程类似，复制所有内容并在虚拟USB上更新，以防出现问题\n\n * 更新内核扩展最简单的方法是通过2个工具:\n   \n   * Lilu and Friends 来下载并编译内核扩展\n   * Kext Extractor 将它们合并到你的EFI中\n\n\n# 更新macOS\n\n * 通过操作系统更新来维护系统可能是最具挑战性的部分之一。要记住的主要事情:\n   \n   * 对于操作系统更新，请确保所有内容都已更新，并且您有某种形式的恢复，例如timemmachine或带有已知良好EFI的旧macOS安装程序\n   * 做一点谷歌搜索，看看其他人是否有最新的更新问题\n\n * 我还提供了更多macOS版本变化的详细地图，见下文:\n\nmacOS Catalina:\n\n * 10.15.0\n   * 需要proper EC\n   * 双插槽和大多数AMD cpu需要 AppleMCEReporterDisabler.kext\n   * 丢弃MacPro5,1支持\n * 10.15.1\n   * 需要WhateverGreen 1.3.4+\n   * 许多图形卡的DRM都坏了(查看DRM图表)\n   * 需要所有以前的修复\n * 10.15.2\n   * 修复了安装程序中Navi的支持\n   * 需要所有以前的修复\n * 10.15.3\n   * 无修改\n   * 需要所有以前的修复\n * 10.15.4\n   * AMD CPU 需要更新 cpuid_set_cpufamily补丁\n   * 修复了许多基于Ellesmere的Polaris图形卡的DRM\n   * 需要所有以前的修复(对于大多数用户来说，Polaris DRM不包括shikigva=80)\n * 10.15.5\n   * UHD 630的帧缓冲区中断了很多，如果你收到黑屏，你可能需要从07009B3E切换到00009B3E\n   * Comet Lake S不再需要CPU ID欺骗\n * 10.15.6\n   * 无修改\n   * 需要10.15.5以前的所有修复程序\n * 10.15.7\n   * No change\n   * 需要10.15.5以前的所有修复程序\n\nmacOS Big Sur:\n\n * 11.0.1\n   * 此处：OpenCore和macOS 11: Big Sur\n\nmacOS Monterey:\n\n * 12.0.1\n   * 此处OpenCore和macOS 12: Monterey",normalizedContent:"# 升级opencore和macos\n\n\n# 升级opencore\n\nso the main things to note with updating opencore:\n\n * 每个月的第一个星期一会有一个新的release\n * differences.pdf将告诉你与以前的版本相比，这个版本的opencore添加和删除的所有内容\n * opencore安装指南将在header中有一个关于它支持的发行版本的说明\n\n> 如何更新呢?\n\n所以这个过程是这样的:\n\n\n# 1. 下载最新版本的opencore\n\n * opencorepkg\n\n\n# 2. 挂载你的efi\n\n * 因此，首先，让挂载您的硬盘驱动器的efi，并在安全的地方复制mountefi。我们不会首先更新驱动器的efi，相反，我们将使用一个备用usb作为我们测试使用。这允许我们保留opencore的可用副本，以防我们的更新出错\n\n * 对于usb，它必须格式化为guid。这样做的原因是guid将自动创建一个efi分区，尽管默认情况下它是隐藏的，所以您需要使用mountefi挂载它。\n\n\n\n * 现在你可以把你的opencore efi放在usb上\n\n\n\n\n# 3. 将opencore文件替换为刚刚下载的文件\n\n * 需要更新的重要内容:\n   \n   * efi/boot/bootx64.efi\n   * efi/oc/opencore.efi\n   * efi/oc/drivers/openruntime.efi(不要忘记这个，它和opencore版本必须匹配，否则不会启动)\n\n * 你也可以更新你现有的其他驱动程序，这些只是为了正确启动而必须更新的驱动程序\n\n\n\n\n# 4. 将你的config.plist与新的sample.plist进行比较\n\n * 有几种方法可以做到这一点:\n   \n   * occonfigcompare 在样本之间进行比较sample.plist和config.plist\n   * 在终端中使用diff (file input 1) (file input 2)\n   * meld merge, winmerge, 或者其他你喜欢的比较软件\n   * 根据阅读更新的opencore安装指南进行新的配置\n\n\n\n * 一旦你做了调整，以确保你的配置符合最新版本的opencore，你可以使用opencore实用程序ocvalidate:这个工具将帮助确保你的config.plist匹配匹配构建的opencore规范。\n   * 请注意，ocvalidate必须与使用的opencore版本匹配，并且可能无法检测到文件中存在的所有配置缺陷。我们建议用opencore指南仔细检查您的设置，以设置所有内容，否则请阅读differences.pdf以获取有关更改的更深入的文档。\n   * 要运行ocvalidate， cd进入opencore的utilities/ocvalidate/，然后运行./ocvalidate <insert_config.plist>。注意，您可能需要运行chmod +x ocvalidate来执行它。\n   * 此外，更新propertree并执行oc快照(ctrl/cmd+r)，以确保您的ssdt，驱动程序，文本等的配置项符合opencore预期的格式。\n\n\n\n\n# 5. 引导！\n\n * 一旦虚拟usb正常工作，您就可以挂载efi并将其移动到硬盘驱动器的efi分区。记得保留一份你的旧efi的副本，以防opencore在未来的道路上表现得很滑稽\n\n\n# 更新内核扩展\n\n * 更新内核扩展与更新opencore的过程类似，复制所有内容并在虚拟usb上更新，以防出现问题\n\n * 更新内核扩展最简单的方法是通过2个工具:\n   \n   * lilu and friends 来下载并编译内核扩展\n   * kext extractor 将它们合并到你的efi中\n\n\n# 更新macos\n\n * 通过操作系统更新来维护系统可能是最具挑战性的部分之一。要记住的主要事情:\n   \n   * 对于操作系统更新，请确保所有内容都已更新，并且您有某种形式的恢复，例如timemmachine或带有已知良好efi的旧macos安装程序\n   * 做一点谷歌搜索，看看其他人是否有最新的更新问题\n\n * 我还提供了更多macos版本变化的详细地图，见下文:\n\nmacos catalina:\n\n * 10.15.0\n   * 需要proper ec\n   * 双插槽和大多数amd cpu需要 applemcereporterdisabler.kext\n   * 丢弃macpro5,1支持\n * 10.15.1\n   * 需要whatevergreen 1.3.4+\n   * 许多图形卡的drm都坏了(查看drm图表)\n   * 需要所有以前的修复\n * 10.15.2\n   * 修复了安装程序中navi的支持\n   * 需要所有以前的修复\n * 10.15.3\n   * 无修改\n   * 需要所有以前的修复\n * 10.15.4\n   * amd cpu 需要更新 cpuid_set_cpufamily补丁\n   * 修复了许多基于ellesmere的polaris图形卡的drm\n   * 需要所有以前的修复(对于大多数用户来说，polaris drm不包括shikigva=80)\n * 10.15.5\n   * uhd 630的帧缓冲区中断了很多，如果你收到黑屏，你可能需要从07009b3e切换到00009b3e\n   * comet lake s不再需要cpu id欺骗\n * 10.15.6\n   * 无修改\n   * 需要10.15.5以前的所有修复程序\n * 10.15.7\n   * no change\n   * 需要10.15.5以前的所有修复程序\n\nmacos big sur:\n\n * 11.0.1\n   * 此处：opencore和macos 11: big sur\n\nmacos monterey:\n\n * 12.0.1\n   * 此处opencore和macos 12: monterey",charsets:{cjk:!0}},{title:"Why should you USB map",frontmatter:{},regularPath:"/usb/",relativePath:"usb/README.md",key:"v-5cef85ca",path:"/usb/",headers:[{level:2,title:"macOS and the 15 Port Limit",slug:"macos-and-the-15-port-limit",normalizedTitle:"macos and the 15 port limit",charIndex:1409},{level:2,title:"Now with the backstory done, let's head to System Preparations",slug:"now-with-the-backstory-done-let-s-head-to-system-preparations",normalizedTitle:"now with the backstory done, let's head to system preparations",charIndex:3271}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"macOS and the 15 Port Limit Now with the backstory done, let's head to System Preparations",content:"# Why should you USB map\n\nSo the process of USB mapping is defining your ports to macOS and telling it what kind they are, the reasons we want to do this are:\n\n * macOS is very bad at guessing what kind of ports you have\n * Some ports may run below their rated speed(3.1 ports running at 2.0)\n * Some ports may outright not work\n * Bluetooth not working\n * Certain services like Handoff may not work correctly\n * Sleep may break\n * Broken Hot-Plug\n * Even data corruption from XhciPortLimit\n\nSo now that you know why you should USB map, we can now talk about technical info of USB mapping. This is a section you cannot skip, otherwise all info below will seem like a very broken Russian translation written by a very drunk slav.\n\nSo with USB, we need to understand not all ports are the same and that some ports are actually hiding other ports within them! What I mean by this is the following:\n\n * A USB 3.0 port is actually seen as 2 ports to macOS: a USB 2.0 and USB 3.0\n * This is also how USB can keep its backwards compatibility, as all USB 3.0 devices must support USB 2.0\n\nNow let's look at a diagram of a USB port to better understand this:\n\n\n\nAs you can see, the bottom 4 pins are dedicated to USB 2.0 and when the extra 5 pins above are recognized the device will switch to a USB 3.0 mode.\n\nNow with the basic understanding out of the way, we now have to talk about the dreadful 15 port limit.\n\n\n# macOS and the 15 Port Limit\n\nNow let me take you back in time to the late 2015's and the release of OS X 10.11, El Capitan. This was an update that established much of what both blesses us and pains us in the community like System Integrity Protection and the 15 port limit.\n\nWhat the 15 port limit is in macOS(then called OS X) is a strict limit of only 15 possible ports per controller, this becomes an issue when we look at the chipset ports included on your motherboard:\n\n * Z170 and newer Chipsets: 26 Ports in total\n\nAnd you may not even have 26 actual ports, but they're still declared in your ACPI tables causing issues as macOS can't tell the difference between a real port and one your firmware writers forgot to remove.\n\n> But why did Apple choose 15 ports as the limit?\n\nWell this gets into a fun subset of computers, the hexadecimal counting system! How this differs from our decimal system is that there are a total of 15 values with the last one being 0xF. This meant it was just cleaner to stop at 15 than to say expand the port limit to 255(0xFF), and in Apple's eyes it made little sense to have anything above 15 ports as no Macs they supported went over this limit. And if a Mac Pro user added a USB expansion card, it would get it's own 15 port limit.\n\nAnd now when we take into account the quirk XhciPortLimit, you can see why data corruption can happen. As we're pushing past the 0xF limit and going into someone else's space. So avoid this quirk when possible.\n\n * Note: While the name XhciPortLimit may seem that it's limiting the number of XHCI ports, it's in-fact patching the XHCI Port Limit to a higher value.\n\n> What about USB hubs?\n\nUSB Hubs attached to one of your USB controller's ports have a different kind of port limit. In total, a single USB port can be split into 127 ports. This includes USB hubs attached to USB hubs\n\n\n# Now with the backstory done, let's head to System Preparations",normalizedContent:"# why should you usb map\n\nso the process of usb mapping is defining your ports to macos and telling it what kind they are, the reasons we want to do this are:\n\n * macos is very bad at guessing what kind of ports you have\n * some ports may run below their rated speed(3.1 ports running at 2.0)\n * some ports may outright not work\n * bluetooth not working\n * certain services like handoff may not work correctly\n * sleep may break\n * broken hot-plug\n * even data corruption from xhciportlimit\n\nso now that you know why you should usb map, we can now talk about technical info of usb mapping. this is a section you cannot skip, otherwise all info below will seem like a very broken russian translation written by a very drunk slav.\n\nso with usb, we need to understand not all ports are the same and that some ports are actually hiding other ports within them! what i mean by this is the following:\n\n * a usb 3.0 port is actually seen as 2 ports to macos: a usb 2.0 and usb 3.0\n * this is also how usb can keep its backwards compatibility, as all usb 3.0 devices must support usb 2.0\n\nnow let's look at a diagram of a usb port to better understand this:\n\n\n\nas you can see, the bottom 4 pins are dedicated to usb 2.0 and when the extra 5 pins above are recognized the device will switch to a usb 3.0 mode.\n\nnow with the basic understanding out of the way, we now have to talk about the dreadful 15 port limit.\n\n\n# macos and the 15 port limit\n\nnow let me take you back in time to the late 2015's and the release of os x 10.11, el capitan. this was an update that established much of what both blesses us and pains us in the community like system integrity protection and the 15 port limit.\n\nwhat the 15 port limit is in macos(then called os x) is a strict limit of only 15 possible ports per controller, this becomes an issue when we look at the chipset ports included on your motherboard:\n\n * z170 and newer chipsets: 26 ports in total\n\nand you may not even have 26 actual ports, but they're still declared in your acpi tables causing issues as macos can't tell the difference between a real port and one your firmware writers forgot to remove.\n\n> but why did apple choose 15 ports as the limit?\n\nwell this gets into a fun subset of computers, the hexadecimal counting system! how this differs from our decimal system is that there are a total of 15 values with the last one being 0xf. this meant it was just cleaner to stop at 15 than to say expand the port limit to 255(0xff), and in apple's eyes it made little sense to have anything above 15 ports as no macs they supported went over this limit. and if a mac pro user added a usb expansion card, it would get it's own 15 port limit.\n\nand now when we take into account the quirk xhciportlimit, you can see why data corruption can happen. as we're pushing past the 0xf limit and going into someone else's space. so avoid this quirk when possible.\n\n * note: while the name xhciportlimit may seem that it's limiting the number of xhci ports, it's in-fact patching the xhci port limit to a higher value.\n\n> what about usb hubs?\n\nusb hubs attached to one of your usb controller's ports have a different kind of port limit. in total, a single usb port can be split into 127 ports. this includes usb hubs attached to usb hubs\n\n\n# now with the backstory done, let's head to system preparations",charsets:{}},{title:"USB Mapping",frontmatter:{},regularPath:"/usb/amd-mapping/amd.html",relativePath:"usb/amd-mapping/amd.md",key:"v-56866196",path:"/usb/amd-mapping/amd.html",headers:[{level:2,title:"AMD and 3rd Party USB Mapping",slug:"amd-and-3rd-party-usb-mapping",normalizedTitle:"amd and 3rd party usb mapping",charIndex:38},{level:2,title:"Creating the map",slug:"creating-the-map",normalizedTitle:"creating the map",charIndex:71},{level:2,title:"Port mapping on screwed up DSDTs",slug:"port-mapping-on-screwed-up-dsdts",normalizedTitle:"port mapping on screwed up dsdts",charIndex:91},{level:2,title:"Port mapping with generic AppleUSB20XHCIPort/'AppleUSB30XHCIPort",slug:"port-mapping-with-generic-appleusb20xhciport-appleusb30xhciport",normalizedTitle:"port mapping with generic appleusb20xhciport/'appleusb30xhciport",charIndex:6273},{level:2,title:"Port mapping when you have multiple of the same controller",slug:"port-mapping-when-you-have-multiple-of-the-same-controller",normalizedTitle:"port mapping when you have multiple of the same controller",charIndex:127},{level:3,title:"IOPathMatch property",slug:"iopathmatch-property",normalizedTitle:"iopathmatch property",charIndex:7238},{level:3,title:"SSDT Recreation",slug:"ssdt-recreation",normalizedTitle:"ssdt recreation",charIndex:7360}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"AMD and 3rd Party USB Mapping Creating the map Port mapping on screwed up DSDTs Port mapping with generic AppleUSB20XHCIPort/'AppleUSB30XHCIPort Port mapping when you have multiple of the same controller IOPathMatch property SSDT Recreation",content:"# USB Mapping\n\nTable of Contents:\n\n * AMD and 3rd Party USB Mapping\n * Creating the map\n * Port mapping on screwed up DSDTs\n * Port mapping when you have multiple of the same controller\n\nSo with the prerequisites out of the way, we can finally get to the meat of this guide. And now we get to finally read one of my favorite books before I go to bed each night: The Advanced Configuration and Power Interface (ACPI) Specification!\n\nNow if you haven't read through this before(which I highly recommend you do, it's a thrilling tale), I'll point you to the meat of the USB situation:\n\n * Section 9.14: _UPC (USB Port Capabilities)\n\nHere we're greeted with all the possible USB ports in ACPI:\n\nTYPE   INFO                                                    COMMENTS\n0      USB 2.0 Type-A connector                                This is what macOS will default all ports to when no map is\n                                                               present\n3      USB 3.0 Type-A connector                                3.0, 3.1 and 3.2 ports share the same Type\n8      Type C connector - USB 2.0-only                         Mainly seen in phones\n9      Type C connector - USB 2.0 and USB 3.0 with Switch      Flipping the device does not change the ACPI port\n10     Type C connector - USB 2.0 and USB 3.0 without Switch   Flipping the device does change the ACPI port. generally\n                                                               seen on 3.1/2 motherboard headers\n255    Proprietary connector                                   For Internal USB ports like Bluetooth\n\n\n# AMD and 3rd Party USB Mapping\n\nThe steps are quite simple:\n\n * Read this guide\n * Cry a bit\n * Cry some more\n * Buy some Intel hardware\n * Return said hardware\n * Gather courage to USB map on AMD\n * Read the rest of the guide again and actually USB map\n\n\n# Creating the map\n\nSo to start off, open IORegistryExplorer and find the USB controller you'd wish to map. For controllers, they come in some variations:\n\n * XHC\n * XHC0\n * XHC1\n * XHC2\n * XHCI\n * XHCX\n * AS43\n * PTXH (Commonly associated with AMD Chipset controllers)\n * PTCP (Found on AsRock X399, in ACPI these ports are actually called PXTX but macOS will enumerate them differently)\n * PXSX(This is a generic PCIe device, double check it's a USB device)\n\nThe best way to find controllers is by searching for XHC and then looking at the results that come up, the parent of all the ports is the USB controller. Do note that many boards have multiple controllers but the port limit is per controller.\n\nFor today's example, we'll be both adding missing ports and getting under the 15 port limit for this X399 chipset which has the identifier PTXH\n\n\n\nAs you can see from the photo above, we're missing a shit ton of ports! Specifically ports POT3, POT4, POT7, POT8, PO12, PO13, PO15, PO16, PO17, PO18, PO19, PO20, PO21, PO22!\n\nSo how do we fix this? Well if you look in the corner you'll see the port value. This is going to be important to us when mapping\n\nNext, let's take a peek at our DSDT and check for our PTXH device with maciASL:\n\nTOP OF PTXH   BOTTOM OF PTXH\n              \n\nAll of our ports are here! So why in the world is macOS hiding them? Well there's a couple of reasons but this being the main: Conflicting SMBIOS USB map\n\nInside the AppleUSBHostPlatformProperties.kext you'll find the USB map for most SMBIOS, this means that that machine's USB map is forced onto your system.\n\nWell to kick out these bad maps, we gotta make a plugin kext. For us, that's the AMD-USB-Map.kext\n\nNow right-click and press Show Package Contents, then navigate to Contents/Info.plist\n\nIf the port values don't show in Xcode, right click and select Show Raw Keys/Values\n\nSo what kind of data do we shove into this plist? Well, there are a couple of sections to note:\n\n * Model: SMBIOS the kext will match against, set this up to what SMBIOS you are currently using\n * IONameMatch: The name of the controller it'll match against, in this example we'll use PTXH\n   * IOPathMatch is another entry you can use instead, if you have multiple controllers with the same name(ie. 2 XHC0)\n * port-count: The last/largest port value that you want to be injected\n * port: The address of the USB controller\n * UsbConnector: The type of USB connector, which can be found on the ACPI 6.3 spec, section 9.14\n\n> How do I know which ports are 2.0 and which are 3.0?\n\nWell, the easiest way is grabbing a USB 2.0 and USB 3.0 device, then write down which ports are what type from observing IOReg.\n\n * Remember: USB 3.0 ports have dual personalities, so you must test both a 2.0 drive and 3.0 to know which ports are associated with it in IOReg.\n\nNow, let's take this section:\n\nDevice (PO18)\n   {\n   Name (_ADR, 0x12) // _ADR: Address\n   Name (_UPC, Package (0x04) // _UPC: USB Port Capabilities\n      {\n         Zero,\n         0xFF,\n         Zero,\n         Zero\n      })\n   }\n\n\nFor us, what matters is the Name (_ADR, 0x12) // _ADR: Address as this tells us the location of the USB port. This value will be turned into our port value on the plist. Some DSDTs don't declare their USB address, for these situations we can see their IOReg properties.\n\n\n\nReminder: Don't drag and drop the kext, read the guide carefully. Rename IONameMatch value to the correct controller you're wanting to map and verify that the ports are named correctly to your DSDT. If you could drag and drop it and have it work for everyone there wouldn't be a guide ;p\n\nNow save and add this to both your kext folder and config.plist then reboot!\n\nNow we can finally start to slowly remove unwanted ports from the Info.plist and remove the XhciPortLimit quirk once you have 15 ports total or less per controller.\n\n\n# Port mapping on screwed up DSDTs\n\nSomething you may have noticed is that your DSDT is even missing some ports, like for example:\n\n\n\nIn this DSDT, we're missing HS02, HS03, HS04, HS05, etc. When this happens, we actually need to outright remove all our ports from that controller in our DSDT. What this will let us do is allow macOS to build the ports itself instead of basing it off of the ACPI. Save this modified DSDT.aml and place it in your EFI/OC/ACPI folder and specify it in your config.plist -> ACPI -> Add(note that DSDT.aml must be forced to work correctly)\n\n\n# Port mapping with generic AppleUSB20XHCIPort/'AppleUSB30XHCIPort\n\nAn odd issue with some OEM's ACPI is that they never actually define or properly name the USB ports. And so when macOS's IOService starts scanning and building the ports, they're given a generic name. This makes it difficult to really know where your ports are.\n\nTo resolve this, we can simply add names with our USBmap.kext, this is thanks to us matching the USB map based off of the USB port's location instead of by name.\n\nSo before you USB map, you'll get something like this:\n\n\n\nWith our map, your kext should look something like this:\n\n\n\nAnd the end result once the map is applied:\n\n\n\n\n# Port mapping when you have multiple of the same controller\n\nThis becomes a problem when we run systems with many USB controllers which all want to have the same identifier, commonly being multiple XHC0 devices or AsMedia controllers showing up as generic PXSX devices. To fix this, we have 3 options:\n\n * IOPathMatch property\n * ACPI Rename (won't be covered in this guide, see ACPI section of OpenCore's configuration.pdf)\n * SSDT Recreation\n\n\n# IOPathMatch property\n\nActually quite simple, grab the sample USBmap.kext we provided earlier and look for the IONameMatch Property. Now rename this to IOPathMatch.\n\nFinally, grab IOreg and look for your USB controller:\n\n\n\nFrom here, pay very close attention to which actual device I selected. Specifically the child of XHC0@0,3 being XHC0@61000000, reason for this is that's our Root-hub(or what macOS uses to enumerate ports) The child with the same name is actually a root hub but does not concern us\n\nNow copy the XHC0@61000000 entry and paste it back into the IOPathMatch entry in our USBmap.kext's info.plist, this should result in quite a long path name:\n\nIOService:/AppleACPIPlatformExpert/S0D1@0/AppleACPIPCI/D1C0@7,1/IOPP/XHC0@0,3/XHC0@61000000\n\n\nAnd once done your USBmap's IOPathMatch should look like this:\n\n\n\n\n# SSDT Recreation\n\nWith the SSDT Recreation method, what we'll be doing is \"renaming\" the device but in reality creating a brand new device just for macOS that is in the exact same spot as your old USB controller.\n\nTo do this, grab the following SSDT:\n\n * SSDT-SHC0.dsl\n\nWhat you'll want to do is find a controller you want to rename, find its full ACPI path and replace the one in the sample SSDT. In our sample, we're be renaming PCI0.GP13.XHC0 to SHC0 so change accordingly.\n\n\n\nNote: In rare cases, macOS isn't able to properly rebuild the USB ports with the new \"fake\" USB controller. In these situations we need to manually add ports to it that are present in the original controller(ie. HS01, HS02, POT1, etc)\n\n> But how do I map a non-standard controller that shows up as PXSX?\n\nSimilar idea to regular SSDT renaming except you need to actually find the controller. This becomes difficult as SSDs, network controllers, and other generic PCIe devices can also show up as PXSX. Check the ACPI-path in IOreg to find its path:\n\n\n\nAs we can see, IOACPIPlane:/_SB/PC00@0/RP05@1c0004/PXSX@0 would be interpreted as SB.PC00.RP05.PXSX\n\nAnd so from the above SSDT, we change the following:\n\n * External (_SB_.PCI0.GP13, DeviceObj) -> External (_SB_.PC00.RP05, DeviceObj)\n * External (_SB_.PCI0.GP13.XHC0, DeviceObj) -> External (_SB_.PC00.RP05.PXSX, DeviceObj)\n * Scope (\\_SB.PCI0.GP13) -> Scope (\\_SB.PC00.RP05)\n * Scope (XHC0) -> Scope (PXSX)",normalizedContent:"# usb mapping\n\ntable of contents:\n\n * amd and 3rd party usb mapping\n * creating the map\n * port mapping on screwed up dsdts\n * port mapping when you have multiple of the same controller\n\nso with the prerequisites out of the way, we can finally get to the meat of this guide. and now we get to finally read one of my favorite books before i go to bed each night: the advanced configuration and power interface (acpi) specification!\n\nnow if you haven't read through this before(which i highly recommend you do, it's a thrilling tale), i'll point you to the meat of the usb situation:\n\n * section 9.14: _upc (usb port capabilities)\n\nhere we're greeted with all the possible usb ports in acpi:\n\ntype   info                                                    comments\n0      usb 2.0 type-a connector                                this is what macos will default all ports to when no map is\n                                                               present\n3      usb 3.0 type-a connector                                3.0, 3.1 and 3.2 ports share the same type\n8      type c connector - usb 2.0-only                         mainly seen in phones\n9      type c connector - usb 2.0 and usb 3.0 with switch      flipping the device does not change the acpi port\n10     type c connector - usb 2.0 and usb 3.0 without switch   flipping the device does change the acpi port. generally\n                                                               seen on 3.1/2 motherboard headers\n255    proprietary connector                                   for internal usb ports like bluetooth\n\n\n# amd and 3rd party usb mapping\n\nthe steps are quite simple:\n\n * read this guide\n * cry a bit\n * cry some more\n * buy some intel hardware\n * return said hardware\n * gather courage to usb map on amd\n * read the rest of the guide again and actually usb map\n\n\n# creating the map\n\nso to start off, open ioregistryexplorer and find the usb controller you'd wish to map. for controllers, they come in some variations:\n\n * xhc\n * xhc0\n * xhc1\n * xhc2\n * xhci\n * xhcx\n * as43\n * ptxh (commonly associated with amd chipset controllers)\n * ptcp (found on asrock x399, in acpi these ports are actually called pxtx but macos will enumerate them differently)\n * pxsx(this is a generic pcie device, double check it's a usb device)\n\nthe best way to find controllers is by searching for xhc and then looking at the results that come up, the parent of all the ports is the usb controller. do note that many boards have multiple controllers but the port limit is per controller.\n\nfor today's example, we'll be both adding missing ports and getting under the 15 port limit for this x399 chipset which has the identifier ptxh\n\n\n\nas you can see from the photo above, we're missing a shit ton of ports! specifically ports pot3, pot4, pot7, pot8, po12, po13, po15, po16, po17, po18, po19, po20, po21, po22!\n\nso how do we fix this? well if you look in the corner you'll see the port value. this is going to be important to us when mapping\n\nnext, let's take a peek at our dsdt and check for our ptxh device with maciasl:\n\ntop of ptxh   bottom of ptxh\n              \n\nall of our ports are here! so why in the world is macos hiding them? well there's a couple of reasons but this being the main: conflicting smbios usb map\n\ninside the appleusbhostplatformproperties.kext you'll find the usb map for most smbios, this means that that machine's usb map is forced onto your system.\n\nwell to kick out these bad maps, we gotta make a plugin kext. for us, that's the amd-usb-map.kext\n\nnow right-click and press show package contents, then navigate to contents/info.plist\n\nif the port values don't show in xcode, right click and select show raw keys/values\n\nso what kind of data do we shove into this plist? well, there are a couple of sections to note:\n\n * model: smbios the kext will match against, set this up to what smbios you are currently using\n * ionamematch: the name of the controller it'll match against, in this example we'll use ptxh\n   * iopathmatch is another entry you can use instead, if you have multiple controllers with the same name(ie. 2 xhc0)\n * port-count: the last/largest port value that you want to be injected\n * port: the address of the usb controller\n * usbconnector: the type of usb connector, which can be found on the acpi 6.3 spec, section 9.14\n\n> how do i know which ports are 2.0 and which are 3.0?\n\nwell, the easiest way is grabbing a usb 2.0 and usb 3.0 device, then write down which ports are what type from observing ioreg.\n\n * remember: usb 3.0 ports have dual personalities, so you must test both a 2.0 drive and 3.0 to know which ports are associated with it in ioreg.\n\nnow, let's take this section:\n\ndevice (po18)\n   {\n   name (_adr, 0x12) // _adr: address\n   name (_upc, package (0x04) // _upc: usb port capabilities\n      {\n         zero,\n         0xff,\n         zero,\n         zero\n      })\n   }\n\n\nfor us, what matters is the name (_adr, 0x12) // _adr: address as this tells us the location of the usb port. this value will be turned into our port value on the plist. some dsdts don't declare their usb address, for these situations we can see their ioreg properties.\n\n\n\nreminder: don't drag and drop the kext, read the guide carefully. rename ionamematch value to the correct controller you're wanting to map and verify that the ports are named correctly to your dsdt. if you could drag and drop it and have it work for everyone there wouldn't be a guide ;p\n\nnow save and add this to both your kext folder and config.plist then reboot!\n\nnow we can finally start to slowly remove unwanted ports from the info.plist and remove the xhciportlimit quirk once you have 15 ports total or less per controller.\n\n\n# port mapping on screwed up dsdts\n\nsomething you may have noticed is that your dsdt is even missing some ports, like for example:\n\n\n\nin this dsdt, we're missing hs02, hs03, hs04, hs05, etc. when this happens, we actually need to outright remove all our ports from that controller in our dsdt. what this will let us do is allow macos to build the ports itself instead of basing it off of the acpi. save this modified dsdt.aml and place it in your efi/oc/acpi folder and specify it in your config.plist -> acpi -> add(note that dsdt.aml must be forced to work correctly)\n\n\n# port mapping with generic appleusb20xhciport/'appleusb30xhciport\n\nan odd issue with some oem's acpi is that they never actually define or properly name the usb ports. and so when macos's ioservice starts scanning and building the ports, they're given a generic name. this makes it difficult to really know where your ports are.\n\nto resolve this, we can simply add names with our usbmap.kext, this is thanks to us matching the usb map based off of the usb port's location instead of by name.\n\nso before you usb map, you'll get something like this:\n\n\n\nwith our map, your kext should look something like this:\n\n\n\nand the end result once the map is applied:\n\n\n\n\n# port mapping when you have multiple of the same controller\n\nthis becomes a problem when we run systems with many usb controllers which all want to have the same identifier, commonly being multiple xhc0 devices or asmedia controllers showing up as generic pxsx devices. to fix this, we have 3 options:\n\n * iopathmatch property\n * acpi rename (won't be covered in this guide, see acpi section of opencore's configuration.pdf)\n * ssdt recreation\n\n\n# iopathmatch property\n\nactually quite simple, grab the sample usbmap.kext we provided earlier and look for the ionamematch property. now rename this to iopathmatch.\n\nfinally, grab ioreg and look for your usb controller:\n\n\n\nfrom here, pay very close attention to which actual device i selected. specifically the child of xhc0@0,3 being xhc0@61000000, reason for this is that's our root-hub(or what macos uses to enumerate ports) the child with the same name is actually a root hub but does not concern us\n\nnow copy the xhc0@61000000 entry and paste it back into the iopathmatch entry in our usbmap.kext's info.plist, this should result in quite a long path name:\n\nioservice:/appleacpiplatformexpert/s0d1@0/appleacpipci/d1c0@7,1/iopp/xhc0@0,3/xhc0@61000000\n\n\nand once done your usbmap's iopathmatch should look like this:\n\n\n\n\n# ssdt recreation\n\nwith the ssdt recreation method, what we'll be doing is \"renaming\" the device but in reality creating a brand new device just for macos that is in the exact same spot as your old usb controller.\n\nto do this, grab the following ssdt:\n\n * ssdt-shc0.dsl\n\nwhat you'll want to do is find a controller you want to rename, find its full acpi path and replace the one in the sample ssdt. in our sample, we're be renaming pci0.gp13.xhc0 to shc0 so change accordingly.\n\n\n\nnote: in rare cases, macos isn't able to properly rebuild the usb ports with the new \"fake\" usb controller. in these situations we need to manually add ports to it that are present in the original controller(ie. hs01, hs02, pot1, etc)\n\n> but how do i map a non-standard controller that shows up as pxsx?\n\nsimilar idea to regular ssdt renaming except you need to actually find the controller. this becomes difficult as ssds, network controllers, and other generic pcie devices can also show up as pxsx. check the acpi-path in ioreg to find its path:\n\n\n\nas we can see, ioacpiplane:/_sb/pc00@0/rp05@1c0004/pxsx@0 would be interpreted as sb.pc00.rp05.pxsx\n\nand so from the above ssdt, we change the following:\n\n * external (_sb_.pci0.gp13, deviceobj) -> external (_sb_.pc00.rp05, deviceobj)\n * external (_sb_.pci0.gp13.xhc0, deviceobj) -> external (_sb_.pc00.rp05.pxsx, deviceobj)\n * scope (\\_sb.pci0.gp13) -> scope (\\_sb.pc00.rp05)\n * scope (xhc0) -> scope (pxsx)",charsets:{}},{title:"USB Mapping",frontmatter:{},regularPath:"/usb/intel-mapping/intel.html",relativePath:"usb/intel-mapping/intel.md",key:"v-5cae2b96",path:"/usb/intel-mapping/intel.html",headers:[{level:3,title:"This guide is  outdated, see USBMap's README for updated information until this guide is rewritten",slug:"this-guide-is-outdated-see-usbmap-s-readme-for-updated-information-until-this-guide-is-rewritten",normalizedTitle:"this guide is  outdated, see usbmap's readme for updated information until this guide is rewritten",charIndex:null},{level:3,title:"Intel USB Mapping",slug:"intel-usb-mapping",normalizedTitle:"intel usb mapping",charIndex:140}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"This guide is  outdated, see USBMap's README for updated information until this guide is rewritten Intel USB Mapping",content:"# USB Mapping\n\n\n# This guide is outdated, see USBMap's README for updated information until this guide is rewritten\n\nTable of Contents:\n\n * Intel USB Mapping\n\nSo with the prerequisites out of the way, we can finally get to the meat of this guide. And now we get to finally read one of my favorite books before I go to bed each night: The Advanced Configuration and Power Interface (ACPI) Specification!\n\nNow if you haven't read through this before(which I highly recommend you do, it's a thrilling tale), I'll point you to the meat of the USB situation:\n\n * Section 9.14: _UPC (USB Port Capabilities)\n\nHere we're greeted with all the possible USB ports in ACPI:\n\nTYPE   INFO                                                    COMMENTS\n0      USB 2.0 Type-A connector                                This is what macOS will default all ports to when no map is\n                                                               present\n3      USB 3.0 Type-A connector                                3.0, 3.1 and 3.2 ports share the same Type\n8      Type C connector - USB 2.0-only                         Mainly seen in phones\n9      Type C connector - USB 2.0 and USB 3.0 with Switch      Flipping the device does not change the ACPI port\n10     Type C connector - USB 2.0 and USB 3.0 without Switch   Flipping the device does change the ACPI port. generally\n                                                               seen on 3.1/2 motherboard headers\n255    Proprietary connector                                   For Internal USB ports like Bluetooth\n\n\n# Intel USB Mapping\n\nUSB mapping on Intel is super easy mainly because both the ACPI is sane and more tools available for the platform. For this guide we'll be using the USBmap tool from CorpNewt.\n\nNow open up USBmap.command and select D. Discover Ports:\n\n\n\nThe interface for USBmap is quite simple and easy to grasp so won't go into detail here, the README.md should do you well enough. The basic idea is insert a device, give it a name to remember the port by, remove and then try another port until you have a whole list of ports you want to keep.\n\n * Note: USRx(ie. USR1, USR2) ports are not real USB ports, they're specifically USBR ports which macOS has no support for(and why real Macs don't have this). These can be excluded from your USB map.\n\nOnce you're done discovering your ports, select Press Q then [enter] to stop then head to P. Edit Plist & Create SSDT/Kext from the main menu.\n\nFor this example, I'll choose all the ports that were discovered, remember that there is a 15 port limit so you cannot go over it. USB hubs will count as one USB port so you can expand from there if you are limited on ports.\n\n\n\nT:1,3,4,5,6,7,16,17,19,21,22:3\n\n\nThe above will set all ports listed to type 3 which is USB 3.0.\n\nT:9:255\n\n\nThis will set my Bluetooth to internal, this is super important as macOS expects Bluetooth to always be internal.\n\n\n\nNow we can select K. Build USBMap.kext and let it build our kext for us.\n\nNote: Do not use either the SSDT-UIAC.aml or USBInjectAll with the USBmap.kext. This kext we just made should be used by itself with no other USB kexts besides XhciUnsupported if your system needs it. Reason for this is USBInjectAll is no longer being maintained and the USBmap.kext version is how real Macs USB map as well so as close to \"Apple Like\" as possible to fit the OpenCore mood.\n\nNow reboot and run USBmap again, you should see a lot less ports in your map:\n\n",normalizedContent:"# usb mapping\n\n\n# this guide is outdated, see usbmap's readme for updated information until this guide is rewritten\n\ntable of contents:\n\n * intel usb mapping\n\nso with the prerequisites out of the way, we can finally get to the meat of this guide. and now we get to finally read one of my favorite books before i go to bed each night: the advanced configuration and power interface (acpi) specification!\n\nnow if you haven't read through this before(which i highly recommend you do, it's a thrilling tale), i'll point you to the meat of the usb situation:\n\n * section 9.14: _upc (usb port capabilities)\n\nhere we're greeted with all the possible usb ports in acpi:\n\ntype   info                                                    comments\n0      usb 2.0 type-a connector                                this is what macos will default all ports to when no map is\n                                                               present\n3      usb 3.0 type-a connector                                3.0, 3.1 and 3.2 ports share the same type\n8      type c connector - usb 2.0-only                         mainly seen in phones\n9      type c connector - usb 2.0 and usb 3.0 with switch      flipping the device does not change the acpi port\n10     type c connector - usb 2.0 and usb 3.0 without switch   flipping the device does change the acpi port. generally\n                                                               seen on 3.1/2 motherboard headers\n255    proprietary connector                                   for internal usb ports like bluetooth\n\n\n# intel usb mapping\n\nusb mapping on intel is super easy mainly because both the acpi is sane and more tools available for the platform. for this guide we'll be using the usbmap tool from corpnewt.\n\nnow open up usbmap.command and select d. discover ports:\n\n\n\nthe interface for usbmap is quite simple and easy to grasp so won't go into detail here, the readme.md should do you well enough. the basic idea is insert a device, give it a name to remember the port by, remove and then try another port until you have a whole list of ports you want to keep.\n\n * note: usrx(ie. usr1, usr2) ports are not real usb ports, they're specifically usbr ports which macos has no support for(and why real macs don't have this). these can be excluded from your usb map.\n\nonce you're done discovering your ports, select press q then [enter] to stop then head to p. edit plist & create ssdt/kext from the main menu.\n\nfor this example, i'll choose all the ports that were discovered, remember that there is a 15 port limit so you cannot go over it. usb hubs will count as one usb port so you can expand from there if you are limited on ports.\n\n\n\nt:1,3,4,5,6,7,16,17,19,21,22:3\n\n\nthe above will set all ports listed to type 3 which is usb 3.0.\n\nt:9:255\n\n\nthis will set my bluetooth to internal, this is super important as macos expects bluetooth to always be internal.\n\n\n\nnow we can select k. build usbmap.kext and let it build our kext for us.\n\nnote: do not use either the ssdt-uiac.aml or usbinjectall with the usbmap.kext. this kext we just made should be used by itself with no other usb kexts besides xhciunsupported if your system needs it. reason for this is usbinjectall is no longer being maintained and the usbmap.kext version is how real macs usb map as well so as close to \"apple like\" as possible to fit the opencore mood.\n\nnow reboot and run usbmap again, you should see a lot less ports in your map:\n\n",charsets:{}},{title:"USB Mapping",frontmatter:{},regularPath:"/usb/manual/manual.html",relativePath:"usb/manual/manual.md",key:"v-7d29fd94",path:"/usb/manual/manual.html",headers:[{level:2,title:"USB Mapping: The manual way",slug:"usb-mapping-the-manual-way",normalizedTitle:"usb mapping: the manual way",charIndex:1411},{level:2,title:"Finding your USB ports",slug:"finding-your-usb-ports",normalizedTitle:"finding your usb ports",charIndex:2625},{level:3,title:"Finding which ports match with which controller",slug:"finding-which-ports-match-with-which-controller",normalizedTitle:"finding which ports match with which controller",charIndex:4441},{level:3,title:"USB-A mapping",slug:"usb-a-mapping",normalizedTitle:"usb-a mapping",charIndex:4922},{level:3,title:"Creating a personal map",slug:"creating-a-personal-map",normalizedTitle:"creating a personal map",charIndex:5910},{level:3,title:"USB-C mapping",slug:"usb-c-mapping",normalizedTitle:"usb-c mapping",charIndex:6443},{level:3,title:"Continuing mapping",slug:"continuing-mapping",normalizedTitle:"continuing mapping",charIndex:7409},{level:3,title:"Special Notes",slug:"special-notes",normalizedTitle:"special notes",charIndex:7634},{level:2,title:"Creating our kext",slug:"creating-our-kext",normalizedTitle:"creating our kext",charIndex:10368},{level:3,title:"Determining the properties",slug:"determining-the-properties",normalizedTitle:"determining the properties",charIndex:11483},{level:3,title:"IOProviderMergeProperties",slug:"ioprovidermergeproperties",normalizedTitle:"ioprovidermergeproperties",charIndex:11408},{level:3,title:"Continuing on",slug:"continuing-on",normalizedTitle:"continuing on",charIndex:15572},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:15892}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"USB Mapping: The manual way Finding your USB ports Finding which ports match with which controller USB-A mapping Creating a personal map USB-C mapping Continuing mapping Special Notes Creating our kext Determining the properties IOProviderMergeProperties Continuing on Cleaning up",content:"# USB Mapping\n\nSo with the prerequisites out of the way, we can finally get to the meat of this guide. And now we get to finally read one of my favorite books before I go to bed each night: The Advanced Configuration and Power Interface (ACPI) Specification!\n\nNow if you haven't read through this before(which I highly recommend you do, it's a thrilling tale), I'll point you to the meat of the USB situation:\n\n * Section 9.14: _UPC (USB Port Capabilities)\n\nHere we're greeted with all the possible USB ports in ACPI:\n\nTYPE   INFO                                                    COMMENTS\n0      USB 2.0 Type-A connector                                This is what macOS will default all ports to when no map is\n                                                               present\n3      USB 3.0 Type-A connector                                3.0, 3.1 and 3.2 ports share the same Type\n8      Type C connector - USB 2.0-only                         Mainly seen in phones\n9      Type C connector - USB 2.0 and USB 3.0 with Switch      Flipping the device does not change the ACPI port\n10     Type C connector - USB 2.0 and USB 3.0 without Switch   Flipping the device does change the ACPI port. generally\n                                                               seen on 3.1/2 motherboard headers\n255    Proprietary connector                                   For Internal USB ports like Bluetooth\n\n\n# USB Mapping: The manual way\n\nThis section is for those who want to get down into the meats of their hackintosh, to really understand what it's doing and help if there's any issues with USBmap.py and other mapping tools. To start, we'll need a few things:\n\n * Installed version of macOS\n   * This is due to how macOS enumerates ports, trying to map from other OSes makes this difficult\n   * Note: This guide will be focusing on OS X 10.11, El Capitan and newer. Older OSes shouldn't require any USB mapping\n * Non-conflicting USB names\n   * See previous section: Checking what renames you need\n * A USB 2.0 and USB 3.0 device to test with\n   * You must have 2 separate devices as to ensure no mix ups with personalities\n * IORegistryExplorer.app\n   * To view the inner workings of macOS more easily\n   * If you plan to use Discord for troubleshooting, v2.1.0 is a bit easier on file size.\n * USBInjectAll\n   * This is only required for older USB controllers like Broadwell and older, however some Coffee Lake systems may still require it\n   * Reminder this kext does not work on AMD\n * Sample-USB-Map.kext\n * ProperTree\n   * Or any other plist editor\n\nNow with all this out of the way, lets get to USB mapping!\n\n\n# Finding your USB ports\n\nLets open our previously downloaded IORegistryExplorer.app and search for our USB controller(s).\n\nThe 2 main search terms are XHC and EHC, but if you have a legacy board with UHCI or OHCI controllers you'll need to adjust. A blanket USB search may show too many entries and confuse you.\n\nFor this example, lets try and map an Asus X299-E Strix board:\n\n\n\nFrom the above image we can see 3 USB controllers:\n\n * PXSX(1, Top)\n * PXSX(2, Middle)\n * XHCI(3, Bottom)\n\nPay attention that they're individual controllers, as this means each USB controller has it's own port limit. So you're not as starved for USB ports as you may think.\n\nNow I personally know which USB controllers match up with which physical ports, problem is it's not always as obvious which ports match with which controllers. So lets try to figure out which is what.\n\nNote: The AppleUSBLegacyRoot entry is an entry that lists all active USB controllers and ports, these are not USB controllers themselves so you can outright ignore them.\n\nNote 2: Keep in mind every motherboard model will have a unique set of port combos, controller types and names. So while our example uses PXSX, yours might have the XHC0 or PTCP name. And quite common on older motherboards is that you may only have 1 controller, this is alright so don't stress about having the exact same setup as the example.\n\nCommon names you can check:\n\n * USB 3.x controllers:\n   * XHC\n   * XHC0\n   * XHC1\n   * XHC2\n   * XHCI\n   * XHCX\n   * AS43\n   * PTXH\n     * Commonly associated with AMD Chipset controllers\n   * PTCP\n     * Found on AsRock X399\n   * PXSX\n     * This is a generic PCIe device, double check it's a USB device as NVMe controllers and other devices can use the same name.\n * USB 2.x controllers:\n   * EHCI\n   * EHC1\n   * EHC2\n   * EUSB\n   * USBE\n\n\n# Finding which ports match with which controller\n\nTo start, I'm going to plug a USB device into my front USB 3.1(Type-A) and 3.2(Type-C):\n\n\n\nNext lets look at IOReg, and we can see where our USB devices fell:\n\nUSB-C   USB-A\n        \n\nHere we see a few things:\n\n * Front 3.2 Type-C is on the PXSX(2, middle) Controller\n * Front 3.1 Type-A is on the XHCI(3, Bottom) Controller\n\nNow that we have an idea of which ports go to which controller, can can now look into how we USB map.\n\n\n# USB-A mapping\n\nAs mentioned before, USB 3.x ports are split into 2 personalities: USB 2.0 and USB 3.0. This is to ensure backwards compatibility but macOS itself has difficulties determining which personalities match up to which ports. That's where we come in to help.\n\nSo lets take our USB-A port, when we plug in a USB 3.0 device into it we see XHCI -> SS03 light up. This is the USB 3.0 personality of the port. Now we'll want to plug a USB 2.0 device into that port:\n\n3.0 PERSONALITY   2.0 PERSONALITY\n                  \n\nWe see that the USB 2.0 personality of our 3.0 port is XHCI -> HS03, now you should be able to get an idea of what we're trying to do:\n\n * Front Type-A:\n   * HS03: 2.0 Personality\n   * SS03: 3.0 Personality\n\nNote: If your USB ports show up as either AppleUSB20XHCIPort or AppleUSB30XHCIPort, you can still map however it will be a bit more difficult. Instead of writing down the names, pay very close attention to the port property on the right hand side:\n\n\n\n\n# Creating a personal map\n\nThis is where we pull out pen and paper, and start to write down which ports physically match up with which digital ports. An example of what your map can look like:\n\nNAME MAPPING   PROPERTY MAPPING\n               \n\nYour own map doesn't need to look exactly like this, however you'll want something that you can easily understand and refer to down the line.\n\nNote:\n\n * Name Mapping: When a proper name shows up in IOReg(ie. HS01)\n * Property Mapping: When no proper name is given(ie. AppleUSB30XHCIPort)\n\n\n# USB-C mapping\n\nNext lets map our USB-C port, this is where it gets quite tricky as you may have noticed earlier:\n\nTYPE   INFO                                                    COMMENTS\n8      Type C connector - USB 2.0-only                         Mainly seen in phones\n9      Type C connector - USB 2.0 and USB 3.0 with Switch      Flipping the device does not change the ACPI port\n10     Type C connector - USB 2.0 and USB 3.0 without Switch   Flipping the device does change the ACPI port. generally\n                                                               seen on 3.1/2 motherboard headers\n\nSo when we map our USB-C header, we notice it occupies the SS01 port. But when we flip it, we actually populate it on the SS02 port. When this happens, you'll want to write this down for when we apply the port type.\n\n * Note: All personalities from this port will be put under the Type 10\n * Note 2: Not all USB-C headers will be Type 10, double check yours\n\n\n\n\n# Continuing mapping\n\nNow that you have the basic idea, you'll want to go around with every USB port and map it out. This will take time, and don't forget to write it down. Your final diagram should look similar to this:\n\n\n\n\n# Special Notes\n\n * Bluetooth\n * USRx Ports\n * Missing USB Ports\n\n# Bluetooth\n\nSo while not obvious to many, Bluetooth actually runs over the USB interface internally. This means that when mapping, you'll need to pay close attention to devices that already show up in IOReg:\n\n\n\nKeep this in mind, as this plays into the Type 255 and getting certain services like handoff working correctly.\n\n# USRx Ports\n\nWhen mapping, you may notice some extra ports left over, specifically USR1 and USR2. These ports are known as \"USBR\" ports, or more specifically USB Redirection Ports. Use of these is for remote management but real Macs don't ship with USBR devices and so has no support for them OS-wise. You can actually ignore these entries in your USB map:\n\n\n\n# Missing USB ports\n\nIn some rare situations, certain USB ports may not show up in macOS at all. This is likely due to a missing definition in your ACPI tables, and so we have a few options:\n\n * Coffee Lake and older should use USBInjectAll\n   * Don't forget to add this to both EFI/OC/Kexts and you config.plist's kernel -> Add\n * Comet Lake and newer should use SSDT-RHUB\n * AMD systems should also use SSDT-RHUB\n\nSSDT-RHUB's purpose is to reset your USB controller, and force macOS to reenumerate them. This avoids the hassle of trying to patch your existing ACPI tables.\n\nTo create your own SSDT-RHUB-MAP:\n\n * Grab a copy of the SSDT: SSDT-RHUB.dsl\n * Grab maciASL\n\nNext, open our newly downloaded SSDT with maciASL, you should be presented with the following:\n\n\n\nNow, open IOReg and find the USB controller you want to reset(pay very close attention its the USB controller and not the child RHUB with the same name):\n\nIf you look to the right side, you should see the acpi-apth property. Here we're going to need to translate it to something our SSDT can use:\n\n# before modifying\nIOService:/AppleACPIPlatformExpert/PC00@0/AppleACPIPCI/RP05@1C,4/IOPP/PXSX@0\n\n\nNow we'll want to strip out any unnecessary data:\n\n * IOService:/AppleACPIPlatformExpert/\n * @##\n * IOPP\n\nOnce cleaned up, yours should look similar:\n\n# After modifying\nPC00.RP05.PXSX\n\n\nFollowing the example from above, we'll be renaming PCI0.XHC1.RHUB to PC00.RP05.PXSX.RHUB:\n\nBefore:\n\nExternal (_SB_.PCI0.XHC1.RHUB, DeviceObj) <- Rename this\n\nScope (_SB.PCI0.XHC1.RHUB) <- Rename this\n\n\n\n\nFollowing the example pathing we found, the SSDT should look something like this:\n\nAfter:\n\nExternal (_SB.PC00.RP05.PXSX.RHUB, DeviceObj) <- Renamed\n\nScope (_SB.PC00.RP05.PXSX.RHUB) <- Renamed\n\n\n\n\nOnce you've edited the SSDT to your USB controller's path, you can export it with File -> SaveAs -> ACPI Machine Language Binary:\n\n\n\nFinally, remember to add this SSDT to both EFI/OC/ACPI and your config.plist under ACPI -> Add.\n\n\n# Creating our kext\n\nIts the time you've all been waiting for, we finally get to create our USB map!\n\nFirst off, we'll want to grab a sample USB map kext:\n\n * Sample-USB-Map.kext\n\nNext right click the .kext, and select Show Package Contents. then drill down to the info.plist:\n\nSHOW CONTENTS   INFO.PLIST\n                \n\nNow lets open ProperTree and look at this info.plist:\n\n\n\nHere we see a few sections, under IOKitPersonalities:\n\n * RP05 - PXSX(1)\n * RP07 - PXSX(2)\n * XHCI - XHCI\n\nEach entry here represents a USB controller, specifically the map for each controller. The names of the entry don't matter much however, it's more for book keeping so you know which entry to has which USB map.\n\nNext lets head into the RP05 - PXSX(1) entry:\n\n\n\nHere we see a few more important properties:\n\nPROPERTY                    COMMENT\nIOPathMatch                 The device macOS will choose to attach the map to\nIOProviderClass             The USB driver macOS will choose to attach\nmodel                       The SMBIOS the USB map attaches too\nIOProviderMergeProperties   The dictionary holding the actual port map\n\n\n# Determining the properties\n\nDetermining the value for each property is actually quite straight forward:\n\n * IOPathMatch\n * IOProviderClass\n * model\n * IOProviderMergeProperties\n\n# IOPathMatch\n\nFinding IOPathMatch is super easy, first find the USB controller you want to map and then select the Root HUB(so the PXSX child with the same name as the parent, don't worry it's less confusing when you look at the image):\n\n\n\nNow with the PXSX entry selected, simply copy(Cmd+C) and paste it into our info.plist. Your property should look similar to the below:\n\nIOService:/AppleACPIPlatformExpert/PC00@0/AppleACPIPCI/RP05@1C,4/IOPP/PXSX@0/PXSX@01000000\n\n\nNote: Each USB Controller will have a unique IOPathMatch value, keep this in mind if you have multiple controllers of the same name. This Asus X299 board has 2 PXSX USB controllers, so each new USB map dictionary will have a unique entry for IOPathMatch.\n\n# IOProviderClass\n\nFinding IOProviderClass is also easy, select the Root-hub once again and look for the CFBundleIdentifier value:\n\nIOREG   INFO.PLIST\n        \n\nNow we can't take that value 1-1, instead we need to trim it to the Kext's short name being AppleUSBXHCIPCI(So we removed com.apple.driver.usb.)\n\n# model\n\nIf you've forgotten what SMBIOS you're using, you can simply check the top level device in IOReg:\n\nIOREG   INFO.PLIST\n        \n\n\n# IOProviderMergeProperties\n\nNow lets open the IOProviderMergeProperties dictionary:\n\n\n\nHere we have a lot of data to work through:\n\nPROPERTY       COMMENT\nname           The name of the USB port's dictionary\nport-count     This is the largest port value you're injecting\nUsbConnector   This is the type of USB port as mentioned in the ACPI 9.14\n               section\nport           The physical location of your USB port in ACPI\nComment        An optional entry to help you keep track of all your ports\n\nAnd a reminder of all possible port types:\n\nTYPE   INFO                                                    COMMENTS\n0      USB 2.0 Type-A connector                                This is what macOS will default all ports to when no map is\n                                                               present\n3      USB 3.0 Type-A connector                                3.0, 3.1 and 3.2 ports share the same Type\n8      Type C connector - USB 2.0-only                         Mainly seen in phones\n9      Type C connector - USB 2.0 and USB 3.0 with Switch      Flipping the device does not change the ACPI port\n10     Type C connector - USB 2.0 and USB 3.0 without Switch   Flipping the device does change the ACPI port. generally\n                                                               seen on 3.1/2 motherboard headers\n255    Proprietary connector                                   For Internal USB ports like Bluetooth\n\nIt should be coming full circle now, as you can see how our previous work with mapping out our ports works.\n\n# Name\n\nThe name property is actually the name of the USB port's dictionary, and is used solely for house keeping. Keep in mind every USB port you want to use needs to have its own unique USB port dictionary.\n\nThe name itself holds no value besides showing up in IOReg and so this can be whatever you like. To keep this sane, we use the name already given by our ACPI tables(in this case HS01) but the name can be any 4 character entry. However do not go over this 4 char limit, as unintended side effects can happen.\n\n * Note: Those with AppleUSB20XHCIPort or AppleUSB30XHCIPort names for USB ports, you should choose a name easy to identify. On Intel, this is HSxx for 2.0 personalities and SSxx for 3.0 personalities\n\n\n\n# port\n\nTo find the port value, simply select your USB port in IOReg and look for the port entry:\n\nIOREG   INFO.PLIST\n        \n\nFrom here we get <03 00 00 00>, you can simply remove any spaces and add it to your USB map\n\n# port-count\n\nThe final value remaining, look back at your USB map and see which port entry is the largest:\n\n\n\nHere we see the largest in PXSX(1) is <04000000>, do keep in mind that port uses hexadecimal if you get any letters in your USB map.\n\n\n# Continuing on\n\nNow that we've gone over how to map your USB ports for a specific controller, you should have enough understanding to map more controllers. The sample USB-Map.kext I provided has 3 USB controllers listed in it(PXSX-1, PXSX-2 and XHCI). Remember to edit accordingly and to remove any unnecessary maps.\n\n\n# Cleaning up\n\nOnce your saved your USB map's info.plist, remember to add the kext to both your EFI/OC/Kexts and under you config.plist's Kernel -> Add(ProperTree's snapshot can do this for you)\n\nNext, remove/disable:\n\n * USBInjectAll.kext(if you're using it)\n   * Reason for this is USBInjectAll actually breaks how Apple builds port maps. So while it's great for initial port mapping, it can break you final USB map\n * Kernel -> Quirks -> XhciPortLimit -> False\n   * Now that we're finally under the 15 port limit, we no longer need this hacky fix\n\nThen reboot, and check IOReg one last time:\n\n\n\nVoila! As you can see, our USB map applied successfully!\n\nThe main properties to verify are:\n\n * Correct UsbConnector property on your USB ports\n * Comment applied(if injected)\n * Unused ports were removed",normalizedContent:"# usb mapping\n\nso with the prerequisites out of the way, we can finally get to the meat of this guide. and now we get to finally read one of my favorite books before i go to bed each night: the advanced configuration and power interface (acpi) specification!\n\nnow if you haven't read through this before(which i highly recommend you do, it's a thrilling tale), i'll point you to the meat of the usb situation:\n\n * section 9.14: _upc (usb port capabilities)\n\nhere we're greeted with all the possible usb ports in acpi:\n\ntype   info                                                    comments\n0      usb 2.0 type-a connector                                this is what macos will default all ports to when no map is\n                                                               present\n3      usb 3.0 type-a connector                                3.0, 3.1 and 3.2 ports share the same type\n8      type c connector - usb 2.0-only                         mainly seen in phones\n9      type c connector - usb 2.0 and usb 3.0 with switch      flipping the device does not change the acpi port\n10     type c connector - usb 2.0 and usb 3.0 without switch   flipping the device does change the acpi port. generally\n                                                               seen on 3.1/2 motherboard headers\n255    proprietary connector                                   for internal usb ports like bluetooth\n\n\n# usb mapping: the manual way\n\nthis section is for those who want to get down into the meats of their hackintosh, to really understand what it's doing and help if there's any issues with usbmap.py and other mapping tools. to start, we'll need a few things:\n\n * installed version of macos\n   * this is due to how macos enumerates ports, trying to map from other oses makes this difficult\n   * note: this guide will be focusing on os x 10.11, el capitan and newer. older oses shouldn't require any usb mapping\n * non-conflicting usb names\n   * see previous section: checking what renames you need\n * a usb 2.0 and usb 3.0 device to test with\n   * you must have 2 separate devices as to ensure no mix ups with personalities\n * ioregistryexplorer.app\n   * to view the inner workings of macos more easily\n   * if you plan to use discord for troubleshooting, v2.1.0 is a bit easier on file size.\n * usbinjectall\n   * this is only required for older usb controllers like broadwell and older, however some coffee lake systems may still require it\n   * reminder this kext does not work on amd\n * sample-usb-map.kext\n * propertree\n   * or any other plist editor\n\nnow with all this out of the way, lets get to usb mapping!\n\n\n# finding your usb ports\n\nlets open our previously downloaded ioregistryexplorer.app and search for our usb controller(s).\n\nthe 2 main search terms are xhc and ehc, but if you have a legacy board with uhci or ohci controllers you'll need to adjust. a blanket usb search may show too many entries and confuse you.\n\nfor this example, lets try and map an asus x299-e strix board:\n\n\n\nfrom the above image we can see 3 usb controllers:\n\n * pxsx(1, top)\n * pxsx(2, middle)\n * xhci(3, bottom)\n\npay attention that they're individual controllers, as this means each usb controller has it's own port limit. so you're not as starved for usb ports as you may think.\n\nnow i personally know which usb controllers match up with which physical ports, problem is it's not always as obvious which ports match with which controllers. so lets try to figure out which is what.\n\nnote: the appleusblegacyroot entry is an entry that lists all active usb controllers and ports, these are not usb controllers themselves so you can outright ignore them.\n\nnote 2: keep in mind every motherboard model will have a unique set of port combos, controller types and names. so while our example uses pxsx, yours might have the xhc0 or ptcp name. and quite common on older motherboards is that you may only have 1 controller, this is alright so don't stress about having the exact same setup as the example.\n\ncommon names you can check:\n\n * usb 3.x controllers:\n   * xhc\n   * xhc0\n   * xhc1\n   * xhc2\n   * xhci\n   * xhcx\n   * as43\n   * ptxh\n     * commonly associated with amd chipset controllers\n   * ptcp\n     * found on asrock x399\n   * pxsx\n     * this is a generic pcie device, double check it's a usb device as nvme controllers and other devices can use the same name.\n * usb 2.x controllers:\n   * ehci\n   * ehc1\n   * ehc2\n   * eusb\n   * usbe\n\n\n# finding which ports match with which controller\n\nto start, i'm going to plug a usb device into my front usb 3.1(type-a) and 3.2(type-c):\n\n\n\nnext lets look at ioreg, and we can see where our usb devices fell:\n\nusb-c   usb-a\n        \n\nhere we see a few things:\n\n * front 3.2 type-c is on the pxsx(2, middle) controller\n * front 3.1 type-a is on the xhci(3, bottom) controller\n\nnow that we have an idea of which ports go to which controller, can can now look into how we usb map.\n\n\n# usb-a mapping\n\nas mentioned before, usb 3.x ports are split into 2 personalities: usb 2.0 and usb 3.0. this is to ensure backwards compatibility but macos itself has difficulties determining which personalities match up to which ports. that's where we come in to help.\n\nso lets take our usb-a port, when we plug in a usb 3.0 device into it we see xhci -> ss03 light up. this is the usb 3.0 personality of the port. now we'll want to plug a usb 2.0 device into that port:\n\n3.0 personality   2.0 personality\n                  \n\nwe see that the usb 2.0 personality of our 3.0 port is xhci -> hs03, now you should be able to get an idea of what we're trying to do:\n\n * front type-a:\n   * hs03: 2.0 personality\n   * ss03: 3.0 personality\n\nnote: if your usb ports show up as either appleusb20xhciport or appleusb30xhciport, you can still map however it will be a bit more difficult. instead of writing down the names, pay very close attention to the port property on the right hand side:\n\n\n\n\n# creating a personal map\n\nthis is where we pull out pen and paper, and start to write down which ports physically match up with which digital ports. an example of what your map can look like:\n\nname mapping   property mapping\n               \n\nyour own map doesn't need to look exactly like this, however you'll want something that you can easily understand and refer to down the line.\n\nnote:\n\n * name mapping: when a proper name shows up in ioreg(ie. hs01)\n * property mapping: when no proper name is given(ie. appleusb30xhciport)\n\n\n# usb-c mapping\n\nnext lets map our usb-c port, this is where it gets quite tricky as you may have noticed earlier:\n\ntype   info                                                    comments\n8      type c connector - usb 2.0-only                         mainly seen in phones\n9      type c connector - usb 2.0 and usb 3.0 with switch      flipping the device does not change the acpi port\n10     type c connector - usb 2.0 and usb 3.0 without switch   flipping the device does change the acpi port. generally\n                                                               seen on 3.1/2 motherboard headers\n\nso when we map our usb-c header, we notice it occupies the ss01 port. but when we flip it, we actually populate it on the ss02 port. when this happens, you'll want to write this down for when we apply the port type.\n\n * note: all personalities from this port will be put under the type 10\n * note 2: not all usb-c headers will be type 10, double check yours\n\n\n\n\n# continuing mapping\n\nnow that you have the basic idea, you'll want to go around with every usb port and map it out. this will take time, and don't forget to write it down. your final diagram should look similar to this:\n\n\n\n\n# special notes\n\n * bluetooth\n * usrx ports\n * missing usb ports\n\n# bluetooth\n\nso while not obvious to many, bluetooth actually runs over the usb interface internally. this means that when mapping, you'll need to pay close attention to devices that already show up in ioreg:\n\n\n\nkeep this in mind, as this plays into the type 255 and getting certain services like handoff working correctly.\n\n# usrx ports\n\nwhen mapping, you may notice some extra ports left over, specifically usr1 and usr2. these ports are known as \"usbr\" ports, or more specifically usb redirection ports. use of these is for remote management but real macs don't ship with usbr devices and so has no support for them os-wise. you can actually ignore these entries in your usb map:\n\n\n\n# missing usb ports\n\nin some rare situations, certain usb ports may not show up in macos at all. this is likely due to a missing definition in your acpi tables, and so we have a few options:\n\n * coffee lake and older should use usbinjectall\n   * don't forget to add this to both efi/oc/kexts and you config.plist's kernel -> add\n * comet lake and newer should use ssdt-rhub\n * amd systems should also use ssdt-rhub\n\nssdt-rhub's purpose is to reset your usb controller, and force macos to reenumerate them. this avoids the hassle of trying to patch your existing acpi tables.\n\nto create your own ssdt-rhub-map:\n\n * grab a copy of the ssdt: ssdt-rhub.dsl\n * grab maciasl\n\nnext, open our newly downloaded ssdt with maciasl, you should be presented with the following:\n\n\n\nnow, open ioreg and find the usb controller you want to reset(pay very close attention its the usb controller and not the child rhub with the same name):\n\nif you look to the right side, you should see the acpi-apth property. here we're going to need to translate it to something our ssdt can use:\n\n# before modifying\nioservice:/appleacpiplatformexpert/pc00@0/appleacpipci/rp05@1c,4/iopp/pxsx@0\n\n\nnow we'll want to strip out any unnecessary data:\n\n * ioservice:/appleacpiplatformexpert/\n * @##\n * iopp\n\nonce cleaned up, yours should look similar:\n\n# after modifying\npc00.rp05.pxsx\n\n\nfollowing the example from above, we'll be renaming pci0.xhc1.rhub to pc00.rp05.pxsx.rhub:\n\nbefore:\n\nexternal (_sb_.pci0.xhc1.rhub, deviceobj) <- rename this\n\nscope (_sb.pci0.xhc1.rhub) <- rename this\n\n\n\n\nfollowing the example pathing we found, the ssdt should look something like this:\n\nafter:\n\nexternal (_sb.pc00.rp05.pxsx.rhub, deviceobj) <- renamed\n\nscope (_sb.pc00.rp05.pxsx.rhub) <- renamed\n\n\n\n\nonce you've edited the ssdt to your usb controller's path, you can export it with file -> saveas -> acpi machine language binary:\n\n\n\nfinally, remember to add this ssdt to both efi/oc/acpi and your config.plist under acpi -> add.\n\n\n# creating our kext\n\nits the time you've all been waiting for, we finally get to create our usb map!\n\nfirst off, we'll want to grab a sample usb map kext:\n\n * sample-usb-map.kext\n\nnext right click the .kext, and select show package contents. then drill down to the info.plist:\n\nshow contents   info.plist\n                \n\nnow lets open propertree and look at this info.plist:\n\n\n\nhere we see a few sections, under iokitpersonalities:\n\n * rp05 - pxsx(1)\n * rp07 - pxsx(2)\n * xhci - xhci\n\neach entry here represents a usb controller, specifically the map for each controller. the names of the entry don't matter much however, it's more for book keeping so you know which entry to has which usb map.\n\nnext lets head into the rp05 - pxsx(1) entry:\n\n\n\nhere we see a few more important properties:\n\nproperty                    comment\niopathmatch                 the device macos will choose to attach the map to\nioproviderclass             the usb driver macos will choose to attach\nmodel                       the smbios the usb map attaches too\nioprovidermergeproperties   the dictionary holding the actual port map\n\n\n# determining the properties\n\ndetermining the value for each property is actually quite straight forward:\n\n * iopathmatch\n * ioproviderclass\n * model\n * ioprovidermergeproperties\n\n# iopathmatch\n\nfinding iopathmatch is super easy, first find the usb controller you want to map and then select the root hub(so the pxsx child with the same name as the parent, don't worry it's less confusing when you look at the image):\n\n\n\nnow with the pxsx entry selected, simply copy(cmd+c) and paste it into our info.plist. your property should look similar to the below:\n\nioservice:/appleacpiplatformexpert/pc00@0/appleacpipci/rp05@1c,4/iopp/pxsx@0/pxsx@01000000\n\n\nnote: each usb controller will have a unique iopathmatch value, keep this in mind if you have multiple controllers of the same name. this asus x299 board has 2 pxsx usb controllers, so each new usb map dictionary will have a unique entry for iopathmatch.\n\n# ioproviderclass\n\nfinding ioproviderclass is also easy, select the root-hub once again and look for the cfbundleidentifier value:\n\nioreg   info.plist\n        \n\nnow we can't take that value 1-1, instead we need to trim it to the kext's short name being appleusbxhcipci(so we removed com.apple.driver.usb.)\n\n# model\n\nif you've forgotten what smbios you're using, you can simply check the top level device in ioreg:\n\nioreg   info.plist\n        \n\n\n# ioprovidermergeproperties\n\nnow lets open the ioprovidermergeproperties dictionary:\n\n\n\nhere we have a lot of data to work through:\n\nproperty       comment\nname           the name of the usb port's dictionary\nport-count     this is the largest port value you're injecting\nusbconnector   this is the type of usb port as mentioned in the acpi 9.14\n               section\nport           the physical location of your usb port in acpi\ncomment        an optional entry to help you keep track of all your ports\n\nand a reminder of all possible port types:\n\ntype   info                                                    comments\n0      usb 2.0 type-a connector                                this is what macos will default all ports to when no map is\n                                                               present\n3      usb 3.0 type-a connector                                3.0, 3.1 and 3.2 ports share the same type\n8      type c connector - usb 2.0-only                         mainly seen in phones\n9      type c connector - usb 2.0 and usb 3.0 with switch      flipping the device does not change the acpi port\n10     type c connector - usb 2.0 and usb 3.0 without switch   flipping the device does change the acpi port. generally\n                                                               seen on 3.1/2 motherboard headers\n255    proprietary connector                                   for internal usb ports like bluetooth\n\nit should be coming full circle now, as you can see how our previous work with mapping out our ports works.\n\n# name\n\nthe name property is actually the name of the usb port's dictionary, and is used solely for house keeping. keep in mind every usb port you want to use needs to have its own unique usb port dictionary.\n\nthe name itself holds no value besides showing up in ioreg and so this can be whatever you like. to keep this sane, we use the name already given by our acpi tables(in this case hs01) but the name can be any 4 character entry. however do not go over this 4 char limit, as unintended side effects can happen.\n\n * note: those with appleusb20xhciport or appleusb30xhciport names for usb ports, you should choose a name easy to identify. on intel, this is hsxx for 2.0 personalities and ssxx for 3.0 personalities\n\n\n\n# port\n\nto find the port value, simply select your usb port in ioreg and look for the port entry:\n\nioreg   info.plist\n        \n\nfrom here we get <03 00 00 00>, you can simply remove any spaces and add it to your usb map\n\n# port-count\n\nthe final value remaining, look back at your usb map and see which port entry is the largest:\n\n\n\nhere we see the largest in pxsx(1) is <04000000>, do keep in mind that port uses hexadecimal if you get any letters in your usb map.\n\n\n# continuing on\n\nnow that we've gone over how to map your usb ports for a specific controller, you should have enough understanding to map more controllers. the sample usb-map.kext i provided has 3 usb controllers listed in it(pxsx-1, pxsx-2 and xhci). remember to edit accordingly and to remove any unnecessary maps.\n\n\n# cleaning up\n\nonce your saved your usb map's info.plist, remember to add the kext to both your efi/oc/kexts and under you config.plist's kernel -> add(propertree's snapshot can do this for you)\n\nnext, remove/disable:\n\n * usbinjectall.kext(if you're using it)\n   * reason for this is usbinjectall actually breaks how apple builds port maps. so while it's great for initial port mapping, it can break you final usb map\n * kernel -> quirks -> xhciportlimit -> false\n   * now that we're finally under the 15 port limit, we no longer need this hacky fix\n\nthen reboot, and check ioreg one last time:\n\n\n\nvoila! as you can see, our usb map applied successfully!\n\nthe main properties to verify are:\n\n * correct usbconnector property on your usb ports\n * comment applied(if injected)\n * unused ports were removed",charsets:{}},{title:"Miscellaneous Fixes",frontmatter:{},regularPath:"/usb/misc/",relativePath:"usb/misc/README.md",key:"v-5aa07f55",path:"/usb/misc/",lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:null,content:"# Miscellaneous Fixes\n\n * Fixing USB Power\n * Fixing Shutdown/Restart\n * GPRW/UPRW/LANC Instant Wake Patch\n * Keyboard Wake Issues",normalizedContent:"# miscellaneous fixes\n\n * fixing usb power\n * fixing shutdown/restart\n * gprw/uprw/lanc instant wake patch\n * keyboard wake issues",charsets:{}},{title:"GPRW/UPRW/LANC Instant Wake Patch",frontmatter:{},regularPath:"/usb/misc/instant-wake.html",relativePath:"usb/misc/instant-wake.md",key:"v-07f5c6b6",path:"/usb/misc/instant-wake.html",lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:null,content:'# GPRW/UPRW/LANC Instant Wake Patch\n\nSimilar idea to the "Fixing Shutdown/Restart" section, macOS will instant wake if either USB or power states change while sleeping. To fix this we need to reroute the GPRW/UPRW/LANC calls to a new SSDT, verify you have instant wake issues before trying the below.\n\nBest way to check:\n\npmset -g log | grep -e "Sleep.*due to" -e "Wake.*due to"\n\n\nAnd generally you\'ll get results like these:\n\n * Wake [CDNVA] due to GLAN: Using AC\n   * Generally caused by WakeOnLAN enabled, try to disable this option first in the BIOS\n   * If WOL wasn\'t the issue, you can try the below patches\n * Wake [CDNVA] due to HDEF: Using AC\n   * Similar to the GLAN issue\n * Wake [CDNVA] due to XHC: Using AC\n   * Generally caused by WakeOnUSB enabled, try to disable this option first in the BIOS\n   * GPRW patch is likely needed\n * DarkWake from Normal Sleep [CDNPB] : due to RTC/Maintenance Using AC\n   * Generally caused by PowerNap\n * Wake reason: RTC (Alarm)\n   * Generally caused by an app waking the system, quitting said app before you sleep should fix it\n\nDo not use all these patches at once, look through your DSDT and see what you have:\n\nSSDT        ACPI PATCH           COMMENTS\nSSDT-GPRW   GPRW to XPRW Patch   Use this if you have Method (GPRW, 2 in your ACPI\nSSDT-UPRW   UPRW to XPRW Patch   Use this if you have Method (UPRW, 2 in your ACPI\nSSDT-LANC   LANC to XPRW Patch   Use this if you have Device (LANC) in your ACPI\n\nACPI Patches and SSDTs courtesy of Rehabman, 1Revenger1 and Fewtarius',normalizedContent:'# gprw/uprw/lanc instant wake patch\n\nsimilar idea to the "fixing shutdown/restart" section, macos will instant wake if either usb or power states change while sleeping. to fix this we need to reroute the gprw/uprw/lanc calls to a new ssdt, verify you have instant wake issues before trying the below.\n\nbest way to check:\n\npmset -g log | grep -e "sleep.*due to" -e "wake.*due to"\n\n\nand generally you\'ll get results like these:\n\n * wake [cdnva] due to glan: using ac\n   * generally caused by wakeonlan enabled, try to disable this option first in the bios\n   * if wol wasn\'t the issue, you can try the below patches\n * wake [cdnva] due to hdef: using ac\n   * similar to the glan issue\n * wake [cdnva] due to xhc: using ac\n   * generally caused by wakeonusb enabled, try to disable this option first in the bios\n   * gprw patch is likely needed\n * darkwake from normal sleep [cdnpb] : due to rtc/maintenance using ac\n   * generally caused by powernap\n * wake reason: rtc (alarm)\n   * generally caused by an app waking the system, quitting said app before you sleep should fix it\n\ndo not use all these patches at once, look through your dsdt and see what you have:\n\nssdt        acpi patch           comments\nssdt-gprw   gprw to xprw patch   use this if you have method (gprw, 2 in your acpi\nssdt-uprw   uprw to xprw patch   use this if you have method (uprw, 2 in your acpi\nssdt-lanc   lanc to xprw patch   use this if you have device (lanc) in your acpi\n\nacpi patches and ssdts courtesy of rehabman, 1revenger1 and fewtarius',charsets:{cjk:!0}},{title:"Keyboard Wake Issues",frontmatter:{},regularPath:"/usb/misc/keyboard.html",relativePath:"usb/misc/keyboard.md",key:"v-94f37b54",path:"/usb/misc/keyboard.html",headers:[{level:2,title:"Method 1 - Add Wake Type Property (Recommended)",slug:"method-1-add-wake-type-property-recommended",normalizedTitle:"method 1 - add wake type property (recommended)",charIndex:706},{level:2,title:"Method 2 - Create a fake ACPI Device",slug:"method-2-create-a-fake-acpi-device",normalizedTitle:"method 2 - create a fake acpi device",charIndex:1275},{level:2,title:"Method 3 - Configuring darkwake",slug:"method-3-configuring-darkwake",normalizedTitle:"method 3 - configuring darkwake",charIndex:2023}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"Method 1 - Add Wake Type Property (Recommended) Method 2 - Create a fake ACPI Device Method 3 - Configuring darkwake",content:"# Keyboard Wake Issues\n\nSo an odd bug with Intel's 100 series chipsets and newer is that sometimes macOS requires a second keyboard press or some other wake event to power up the monitor as well, with some requiring a keypress+power button to wake. Well to fix this, we need to either:\n\n * Set acpi-wake-type to the USB Controller(Recommended)\n * Create a fake ACPI Device\n * Disable darkwake(not ideal, as background tasks will also turn on the display)\n\nYou can find a great write up on the whole situation and the fixes here: USB Fix.\n\nIt's an excellent read and highly recommend to truly understand what is exactly happening, and it's not like you've done enough reading already with this guide ;p\n\n\n# Method 1 - Add Wake Type Property (Recommended)\n\nSo the ideal method is to declare the XHCI Controller(This is our USB Controller) to be an ACPI wake device, as we don't have compatible ECs for macOS to handle proper wake calls.\n\nTo start, we'll need to grab the PciRoot of our USB Controller(we'll use gfxutil, Generally the names would be XHC, XHC1 and XHCI)\n\n\n\nNow with the PciRoot, open your config.plist and add a new entry under DeviceProperties -> Add, and add your PciRoot. Then create a child with the following attributes:\n\nacpi-wake-type | Data | <01>\n\n\n\n\n# Method 2 - Create a fake ACPI Device\n\nThis method creates a fake ACPI Device that will be associated with the GPE, then add the property of acpi-wake-type with USBWakeFixup.kext.\n\nIt's actually quite easy to setup, you'll need the following:\n\n * USBWakeFixup.kext\n   * Both under EFI/OC/Kexts and your config.plist\n * SSDT-USBW.dsl\n\nTo create the SSDT-USBW for your specific system, you're gonna need the ACPI path of your USB controller. If we look back above to the gfxutil example, we can see it also lists our ACPI path:\n\n * /PC00@0/XHCI@14 -> \\_SB.PC00.XHCI\n\nNow we can shove that into our SSDT:\n\n\n\nNow with that done, you can compile and add it to your EFI and config.plist. See Getting Started With ACPI for more info on compiling SSDTs\n\n\n# Method 3 - Configuring darkwake\n\nBefore we get deep into configuring darkwake, it would be best to explain what darkwake is. A great in-depth thread by holyfield can be found here: DarkWake on macOS Catalina\n\nIn its simplest form, you can think of darkwake as \"partial wake\", where only certain parts of your hardware are lit up for maintenance tasks while others remain asleep(ie. Display). Reason we may care about this is that darkwake can add extra steps to the wake process like keyboard press, but outright disabling it can make our hack wake randomly. So ideally we'd go through the below table to find an ideal value.\n\nNow lets take a look at IOPMrootDomain's source code:\n\n// gDarkWakeFlags\nenum {\n    kDarkWakeFlagHIDTickleEarly      = 0x01, // hid tickle before gfx suppression\n    kDarkWakeFlagHIDTickleLate       = 0x02, // hid tickle after gfx suppression\n    kDarkWakeFlagHIDTickleNone       = 0x03, // hid tickle is not posted\n    kDarkWakeFlagHIDTickleMask       = 0x03,\n    kDarkWakeFlagAlarmIsDark         = 0x0100,\n    kDarkWakeFlagGraphicsPowerState1 = 0x0200,\n    kDarkWakeFlagAudioNotSuppressed  = 0x0400\n};\n\n\nNow lets go through each bit:\n\nBIT    NAME                     COMMENT\n0      N/A                      Supposedly disables darkwake\n1      HID Tickle Early         Helps with wake from lid, may require pwr-button press to\n                                wake in addition\n2      HID Tickle Late          Helps single keypress wake but disables auto-sleep\n3      HID Tickle None          Default darkwake value if none is set\n3      HID Tickle Mask          To be paired with other\n256    Alarm Is Dark            To be explored\n512    Graphics Power State 1   Enables wranglerTickled to wake fully from hibernation and\n                                RTC\n1024   Audio Not Suppressed     Supposedly helps with audio disappearing after wake\n\n * Note that HID = Human-interface devices(Keyboards, mice, pointing devices, etc)\n\nTo apply the above table to your system, it's as simple as grabbing calculator, adding up your desired darkwake values and then applying the final value to your boot-args. However we recommend trying 1 at a time rather than merging all at once, unless you know what you're doing(though you likely wouldn't be reading this guide).\n\nFor this example, lets try and combine kDarkWakeFlagHIDTickleLate and kDarkWakeFlagGraphicsPowerState1:\n\n * 2= kDarkWakeFlagHIDTickleLate\n * 512= kDarkWakeFlagAudioNotSuppressed\n\nSo our final value would be darkwake=514, which we can next place into boot-args:\n\nNVRAM\n|---Add\n  |---7C436110-AB2A-4BBB-A880-FE41995C9F82\n    |---boot-args | Sting | darkwake=514\n\n\nThe below is more for clarification for users who are already using darkwake or are looking into it, specifically clarifying what values no longer work:\n\n * darkwake=8: This hasn't been in the kernel since Mavericks\n   * Correct boot-arg would be darkwake=0\n * darkwake=10: This hasn't been in the kernel since Mavericks\n   * Correct boot-arg would be darkwake=2",normalizedContent:"# keyboard wake issues\n\nso an odd bug with intel's 100 series chipsets and newer is that sometimes macos requires a second keyboard press or some other wake event to power up the monitor as well, with some requiring a keypress+power button to wake. well to fix this, we need to either:\n\n * set acpi-wake-type to the usb controller(recommended)\n * create a fake acpi device\n * disable darkwake(not ideal, as background tasks will also turn on the display)\n\nyou can find a great write up on the whole situation and the fixes here: usb fix.\n\nit's an excellent read and highly recommend to truly understand what is exactly happening, and it's not like you've done enough reading already with this guide ;p\n\n\n# method 1 - add wake type property (recommended)\n\nso the ideal method is to declare the xhci controller(this is our usb controller) to be an acpi wake device, as we don't have compatible ecs for macos to handle proper wake calls.\n\nto start, we'll need to grab the pciroot of our usb controller(we'll use gfxutil, generally the names would be xhc, xhc1 and xhci)\n\n\n\nnow with the pciroot, open your config.plist and add a new entry under deviceproperties -> add, and add your pciroot. then create a child with the following attributes:\n\nacpi-wake-type | data | <01>\n\n\n\n\n# method 2 - create a fake acpi device\n\nthis method creates a fake acpi device that will be associated with the gpe, then add the property of acpi-wake-type with usbwakefixup.kext.\n\nit's actually quite easy to setup, you'll need the following:\n\n * usbwakefixup.kext\n   * both under efi/oc/kexts and your config.plist\n * ssdt-usbw.dsl\n\nto create the ssdt-usbw for your specific system, you're gonna need the acpi path of your usb controller. if we look back above to the gfxutil example, we can see it also lists our acpi path:\n\n * /pc00@0/xhci@14 -> \\_sb.pc00.xhci\n\nnow we can shove that into our ssdt:\n\n\n\nnow with that done, you can compile and add it to your efi and config.plist. see getting started with acpi for more info on compiling ssdts\n\n\n# method 3 - configuring darkwake\n\nbefore we get deep into configuring darkwake, it would be best to explain what darkwake is. a great in-depth thread by holyfield can be found here: darkwake on macos catalina\n\nin its simplest form, you can think of darkwake as \"partial wake\", where only certain parts of your hardware are lit up for maintenance tasks while others remain asleep(ie. display). reason we may care about this is that darkwake can add extra steps to the wake process like keyboard press, but outright disabling it can make our hack wake randomly. so ideally we'd go through the below table to find an ideal value.\n\nnow lets take a look at iopmrootdomain's source code:\n\n// gdarkwakeflags\nenum {\n    kdarkwakeflaghidtickleearly      = 0x01, // hid tickle before gfx suppression\n    kdarkwakeflaghidticklelate       = 0x02, // hid tickle after gfx suppression\n    kdarkwakeflaghidticklenone       = 0x03, // hid tickle is not posted\n    kdarkwakeflaghidticklemask       = 0x03,\n    kdarkwakeflagalarmisdark         = 0x0100,\n    kdarkwakeflaggraphicspowerstate1 = 0x0200,\n    kdarkwakeflagaudionotsuppressed  = 0x0400\n};\n\n\nnow lets go through each bit:\n\nbit    name                     comment\n0      n/a                      supposedly disables darkwake\n1      hid tickle early         helps with wake from lid, may require pwr-button press to\n                                wake in addition\n2      hid tickle late          helps single keypress wake but disables auto-sleep\n3      hid tickle none          default darkwake value if none is set\n3      hid tickle mask          to be paired with other\n256    alarm is dark            to be explored\n512    graphics power state 1   enables wranglertickled to wake fully from hibernation and\n                                rtc\n1024   audio not suppressed     supposedly helps with audio disappearing after wake\n\n * note that hid = human-interface devices(keyboards, mice, pointing devices, etc)\n\nto apply the above table to your system, it's as simple as grabbing calculator, adding up your desired darkwake values and then applying the final value to your boot-args. however we recommend trying 1 at a time rather than merging all at once, unless you know what you're doing(though you likely wouldn't be reading this guide).\n\nfor this example, lets try and combine kdarkwakeflaghidticklelate and kdarkwakeflaggraphicspowerstate1:\n\n * 2= kdarkwakeflaghidticklelate\n * 512= kdarkwakeflagaudionotsuppressed\n\nso our final value would be darkwake=514, which we can next place into boot-args:\n\nnvram\n|---add\n  |---7c436110-ab2a-4bbb-a880-fe41995c9f82\n    |---boot-args | sting | darkwake=514\n\n\nthe below is more for clarification for users who are already using darkwake or are looking into it, specifically clarifying what values no longer work:\n\n * darkwake=8: this hasn't been in the kernel since mavericks\n   * correct boot-arg would be darkwake=0\n * darkwake=10: this hasn't been in the kernel since mavericks\n   * correct boot-arg would be darkwake=2",charsets:{cjk:!0}},{title:"Fixing USB Power",frontmatter:{},regularPath:"/usb/misc/power.html",relativePath:"usb/misc/power.md",key:"v-22f6d288",path:"/usb/misc/power.html",lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:null,content:"# Fixing USB Power\n\nWith Skylake and newer SMBIOS, Apple no longer provides USB power settings via IOUSBHostFamily, this means we need to adopt the same method real Macs do and supply macOS with a USBX device. This will set both the wake and sleep power values for all your USB ports, and can help fix many high power devices:\n\n * Mics\n * DACs\n * Webcams\n * Bluetooth Dongles\n\nThe following SMBIOS need USBX:\n\n * iMac17,x and newer\n * MacPro7,1 and newer\n * iMacPro1,1 and newer\n * Macmini8,1 and newer\n * MacBook9,x and newer\n * MacBookAir8,x and newer\n * MacBookPro13,x and newer\n\nLuckily you can use a precompiled file for USBX: SSDT-USBX",normalizedContent:"# fixing usb power\n\nwith skylake and newer smbios, apple no longer provides usb power settings via iousbhostfamily, this means we need to adopt the same method real macs do and supply macos with a usbx device. this will set both the wake and sleep power values for all your usb ports, and can help fix many high power devices:\n\n * mics\n * dacs\n * webcams\n * bluetooth dongles\n\nthe following smbios need usbx:\n\n * imac17,x and newer\n * macpro7,1 and newer\n * imacpro1,1 and newer\n * macmini8,1 and newer\n * macbook9,x and newer\n * macbookair8,x and newer\n * macbookpro13,x and newer\n\nluckily you can use a precompiled file for usbx: ssdt-usbx",charsets:{}},{title:"Fixing Shutdown/Restart",frontmatter:{},regularPath:"/usb/misc/shutdown.html",relativePath:"usb/misc/shutdown.md",key:"v-698f32f6",path:"/usb/misc/shutdown.html",lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:null,content:"# Fixing Shutdown/Restart\n\nSo an odd quirk you may run into with macOS is that when you shutdown, your PC may instead restart itself. This is actually due to a missing S5 call that powers down the controller. Of course Windows and Linux implement hacks to get around this but macOS has no such fixes, instead we need to do the dirty work and fix their ACPI writing. Don't worry, this won't harm other OSes.\n\nFor this we need the following:\n\n * FixShutdown-USB-SSDT.dsl\n * _PTS to ZPTS Patch\n * USB Controller's ACPI Path\n\nTo find the USB Controller that needs fixing, search for _PRW in your DSDT and see what Device is mentioned within it, generally this will be something like SB.PCI0.XHC.\n\nWith the ACPI path, edit FixShutdown-USB-SSDT.dsl and compile it to a .aml file(Assembled). MaciASL can help you with this",normalizedContent:"# fixing shutdown/restart\n\nso an odd quirk you may run into with macos is that when you shutdown, your pc may instead restart itself. this is actually due to a missing s5 call that powers down the controller. of course windows and linux implement hacks to get around this but macos has no such fixes, instead we need to do the dirty work and fix their acpi writing. don't worry, this won't harm other oses.\n\nfor this we need the following:\n\n * fixshutdown-usb-ssdt.dsl\n * _pts to zpts patch\n * usb controller's acpi path\n\nto find the usb controller that needs fixing, search for _prw in your dsdt and see what device is mentioned within it, generally this will be something like sb.pci0.xhc.\n\nwith the acpi path, edit fixshutdown-usb-ssdt.dsl and compile it to a .aml file(assembled). maciasl can help you with this",charsets:{}},{title:"System Preparation",frontmatter:{},regularPath:"/usb/system-preparation.html",relativePath:"usb/system-preparation.md",key:"v-c74d2d4c",path:"/usb/system-preparation.html",headers:[{level:2,title:"Checking what renames you need",slug:"checking-what-renames-you-need",normalizedTitle:"checking what renames you need",charIndex:67},{level:3,title:"Checking IOService",slug:"checking-ioservice",normalizedTitle:"checking ioservice",charIndex:3730}],lastUpdated:"9/2/2023, 10:47:37 AM",lastUpdatedTimestamp:1693651657e3,headersStr:"Checking what renames you need Checking IOService",content:"# System Preparation\n\nTable of Contents:\n\n * System Preparation\n * Checking what renames you need\n * Parting ways\n\nSo before we can USB map, we need to set a couple things:\n\n * USBInjectAll under both EFI/OC/Kexts and config.plist -> Kernel -> Add\n   * We need this kext to make sure any ports not defined in ACPI will still show up in macOS, note that this shouldn't be required on Skylake and newer as the USB ports are defined within ACPI.\n     * Because OEMs don't always include the ports even on newer systems, we recommend all Intel users use USBInjectAll until properly mapped.\n   * Note that this does not work on AMD\n * config.plist -> Kernel -> Quirks -> XhciPortLimit -> True\n   * So we can temporally get around the 15 port limit to map our ports\n * config.plist -> ACPI -> Patch -> EHCI and XHCI ACPI renames\n\nThe reason we need these ACPI renames are due to conflicting with Apple's own USB map, fun fact even Apple has to USB map as well! You can actually find Apple's USB map within IOUSBHostFamily.kext -> PlugIns -> AppleUSBHostPlatformProperties.kext in Catalina, though newer Macs actually port map with their ACPI tables instead.\n\nSMBIOSes that do not need the ACPI renames:\n\n * iMac18,x and newer\n * MacPro7,1 and newer\n * Macmini8,1 and newer\n * MacBook9,x and newer\n * MacBookAir8,x and newer\n * MacBookPro13,x and newer\n\nAnd so with older SMBIOSes(one's not listed above), we need to make sure their port map does not attach while we're trying to USB map ourselves. Else some ports may disappear, and please check you do have these ports in your ACPI tables before applying these patches as we don't want to patch the wrong devices. If you do find your USB controller needs renaming, write down their original names before the rename as this will make USB mapping down the road a bit easier:\n\n * XHC1 to SHCI: Needed for Skylake and older SMBIOS\n\nKEY              TYPE      VALUE\nComment          String    XHC1 to SHCI\nCount            Number    <0>\nEnabled          Boolean   YES\nFind             Data      <58484331>\nLimit            Number    <0>\nReplace          Data      <53484349>\nSkip             Number    <0>\nTableLength      Number    <0>\nTableSignature   Data      <>\n\n * EHC1 to EH01: Needed for Broadwell and older SMBIOS\n\nKEY              TYPE      VALUE\nComment          String    EHC1 to EH01\nCount            Number    <0>\nEnabled          Boolean   YES\nFind             Data      <45484331>\nLimit            Number    <0>\nReplace          Data      <45483031>\nSkip             Number    <0>\nTableLength      Number    <0>\nTableSignature   Data      <>\n\n * EHC2 to EH02: Needed for Broadwell and older SMBIOS\n\nKEY              TYPE      VALUE\nComment          String    EHC2 to EH02\nCount            Number    <0>\nEnabled          Boolean   YES\nFind             Data      <45484332>\nLimit            Number    <0>\nReplace          Data      <45483032>\nSkip             Number    <0>\nTableLength      Number    <0>\nTableSignature   Data      <>\n\n\n# Checking what renames you need\n\nSo with renames it's pretty easy to find out, first figure out what SMBIOS you're using(can be found in your config.plist under PlatformInfo -> Generic -> SystemProductName) and match figure out whether you even need a USB map:\n\nSMBIOS needing only XHC1 rename:\n\n * iMacPro1,1\n * iMac17,x and older\n * MacBookAir7,x\n\nSMBIOS needing XHC1 and EHC1 rename:\n\n * MacPro6,1\n * Macmini7,1\n * MacBook8,x\n * MacBookAir6,x\n * MacBookPro12,x\n\nSMBIOS needing XHC1, EHC1 and EHC2 renames:\n\n * iMac16,x and older\n * MacPro5,1 and older\n * Macmini6,x and older\n * MacBookAir5,x and older\n * MacBookPro11,x and older\n\nNow that we know what renames our SMBIOS need, we can next check the names of our USB controllers.\n\n\n# Checking IOService\n\nLet's take XHC1 and execute the following command:\n\nioreg -l -p IOService -w0 | grep -i XHC1\n\n\nIF YOU SEE THIS, YOU NEED A RENAME:   IF YOU SEE THIS, YOU DO NOT NEED A RENAME:\n                                      \n\nRepeat this step for all the other relevant conflicting devices (e.g. EHC1, EHC2) as listed in the table above for your model.\n\nioreg -l -p IOService -w0 | grep -i EHC1\nioreg -l -p IOService -w0 | grep -i EHC2\n\n\nIf nothing returns(like with the right image), you don't need any renames.\n\nIf one of the 3 entries return(like with the left image), you'll need a rename for whatever returns.\n\nIf you're in the latter camp, you'll now want to add the needed ACPI renames to your config.plist -> ACPI -> Patch, you can find a pre-made file here(note that you'll need to enable the ones you need):\n\n * usb-rename.plist\n   * Simply copy over the required patches to your config.plist\n\n\n# Parting ways\n\nBut now we must part into 2 sections, depending on which hardware you have:\n\n * Intel USB Mapping\n   * A more automated process, Intel only however\n * Manual USB Mapping\n   * More step by step process, and is the only way to map AMD and 3rd party USB controllers properly.",normalizedContent:"# system preparation\n\ntable of contents:\n\n * system preparation\n * checking what renames you need\n * parting ways\n\nso before we can usb map, we need to set a couple things:\n\n * usbinjectall under both efi/oc/kexts and config.plist -> kernel -> add\n   * we need this kext to make sure any ports not defined in acpi will still show up in macos, note that this shouldn't be required on skylake and newer as the usb ports are defined within acpi.\n     * because oems don't always include the ports even on newer systems, we recommend all intel users use usbinjectall until properly mapped.\n   * note that this does not work on amd\n * config.plist -> kernel -> quirks -> xhciportlimit -> true\n   * so we can temporally get around the 15 port limit to map our ports\n * config.plist -> acpi -> patch -> ehci and xhci acpi renames\n\nthe reason we need these acpi renames are due to conflicting with apple's own usb map, fun fact even apple has to usb map as well! you can actually find apple's usb map within iousbhostfamily.kext -> plugins -> appleusbhostplatformproperties.kext in catalina, though newer macs actually port map with their acpi tables instead.\n\nsmbioses that do not need the acpi renames:\n\n * imac18,x and newer\n * macpro7,1 and newer\n * macmini8,1 and newer\n * macbook9,x and newer\n * macbookair8,x and newer\n * macbookpro13,x and newer\n\nand so with older smbioses(one's not listed above), we need to make sure their port map does not attach while we're trying to usb map ourselves. else some ports may disappear, and please check you do have these ports in your acpi tables before applying these patches as we don't want to patch the wrong devices. if you do find your usb controller needs renaming, write down their original names before the rename as this will make usb mapping down the road a bit easier:\n\n * xhc1 to shci: needed for skylake and older smbios\n\nkey              type      value\ncomment          string    xhc1 to shci\ncount            number    <0>\nenabled          boolean   yes\nfind             data      <58484331>\nlimit            number    <0>\nreplace          data      <53484349>\nskip             number    <0>\ntablelength      number    <0>\ntablesignature   data      <>\n\n * ehc1 to eh01: needed for broadwell and older smbios\n\nkey              type      value\ncomment          string    ehc1 to eh01\ncount            number    <0>\nenabled          boolean   yes\nfind             data      <45484331>\nlimit            number    <0>\nreplace          data      <45483031>\nskip             number    <0>\ntablelength      number    <0>\ntablesignature   data      <>\n\n * ehc2 to eh02: needed for broadwell and older smbios\n\nkey              type      value\ncomment          string    ehc2 to eh02\ncount            number    <0>\nenabled          boolean   yes\nfind             data      <45484332>\nlimit            number    <0>\nreplace          data      <45483032>\nskip             number    <0>\ntablelength      number    <0>\ntablesignature   data      <>\n\n\n# checking what renames you need\n\nso with renames it's pretty easy to find out, first figure out what smbios you're using(can be found in your config.plist under platforminfo -> generic -> systemproductname) and match figure out whether you even need a usb map:\n\nsmbios needing only xhc1 rename:\n\n * imacpro1,1\n * imac17,x and older\n * macbookair7,x\n\nsmbios needing xhc1 and ehc1 rename:\n\n * macpro6,1\n * macmini7,1\n * macbook8,x\n * macbookair6,x\n * macbookpro12,x\n\nsmbios needing xhc1, ehc1 and ehc2 renames:\n\n * imac16,x and older\n * macpro5,1 and older\n * macmini6,x and older\n * macbookair5,x and older\n * macbookpro11,x and older\n\nnow that we know what renames our smbios need, we can next check the names of our usb controllers.\n\n\n# checking ioservice\n\nlet's take xhc1 and execute the following command:\n\nioreg -l -p ioservice -w0 | grep -i xhc1\n\n\nif you see this, you need a rename:   if you see this, you do not need a rename:\n                                      \n\nrepeat this step for all the other relevant conflicting devices (e.g. ehc1, ehc2) as listed in the table above for your model.\n\nioreg -l -p ioservice -w0 | grep -i ehc1\nioreg -l -p ioservice -w0 | grep -i ehc2\n\n\nif nothing returns(like with the right image), you don't need any renames.\n\nif one of the 3 entries return(like with the left image), you'll need a rename for whatever returns.\n\nif you're in the latter camp, you'll now want to add the needed acpi renames to your config.plist -> acpi -> patch, you can find a pre-made file here(note that you'll need to enable the ones you need):\n\n * usb-rename.plist\n   * simply copy over the required patches to your config.plist\n\n\n# parting ways\n\nbut now we must part into 2 sections, depending on which hardware you have:\n\n * intel usb mapping\n   * a more automated process, intel only however\n * manual usb mapping\n   * more step by step process, and is the only way to map amd and 3rd party usb controllers properly.",charsets:{cjk:!0}}],themeConfig:{lastUpdated:!0,repo:"https://github.com/xuanxuan1231/OpenCore-Post-Install",editLinks:!0,editLinkText:"帮助我们改进此页！",logo:"/homepage.png",nav:[{text:"Dortania指南翻译",items:[{text:"主页",link:"https://xuanxuan1231.github.io/"},{text:"OpenCore安装指南",link:"https://xuanxuan1231.github.io/OpenCore-Install-Guide/"},{text:"OpenCore多重引导",link:"https://xuanxuan1231.github.io/OpenCore-Multiboot/"},{text:"ACPI入门",link:"https://xuanxuan1231.github.io/Getting-Started-With-ACPI/"},{text:"图形卡购买指南",link:"https://xuanxuan1231.github.io/GPU-Buyers-Guide/"},{text:"无线网卡购买指南",link:"https://xuanxuan1231.github.io/Wireless-Buyers-Guide/"},{text:"购买踩坑指南",link:"https://xuanxuan1231.github.io/Anti-Hackintosh-Buyers-Guide/"}]}],sidebar:[{title:"介绍",collapsable:!1,sidebarDepth:1,children:[""]},{title:"通用",collapsable:!1,sidebarDepth:2,children:[["/universal/audio","修复声音"],["/universal/oc2hdd","不用USB引导"],["/universal/update","升级OpenCore，内核扩展和macOS"],["/universal/drm","修复 DRM"],["/universal/iservices","修复i服务"],["/universal/pm","修复电源管理"],["/universal/sleep","修复睡眠"]]},{title:"修复USB",collapsable:!1,sidebarDepth:1,children:[["/usb/","USB映射：介绍"],["/usb/system-preparation","准备系统"],{title:"USB映射",collapsable:!0,sidebarDepth:2,children:[["/usb/intel-mapping/intel","Intel USB映射"],["/usb/manual/manual","手动映射"]]},{title:"其他修复",collapsable:!0,sidebarDepth:1,children:[["/usb/misc/power","修复USB电源"],["/usb/misc/shutdown","修复关机/重启"],["/usb/misc/instant-wake","修复瞬间唤醒"],["/usb/misc/keyboard","修复键盘唤醒问题"]]}]},{title:"安全性",collapsable:!1,sidebarDepth:2,children:[["/universal/security","安全性和FileVault"],{title:"",collapsable:!1,sidebarDepth:2,children:[["/universal/security/filevault","FileVault"],["/universal/security/vault","Vault"],["/universal/security/scanpolicy","ScanPolicy（扫描策略）"],["/universal/security/password","OpenCore菜单密码"],["/universal/security/applesecureboot","Apple安全启动"]]}]},{title:"笔记本的特殊性",collapsable:!1,children:[["/laptop-specific/battery","修复电池读数"]]},{title:"美化",collapsable:!1,children:[["/cosmetic/verbose","修复分辨率和啰嗦模式"],["/cosmetic/gui","添加GUI和引导铃声"],["/universal/memory","修复在MacPro7,1上发生的内存问题"]]},{title:"多重引导",collapsable:!1,children:[["https://xuanxuan1231.github.io/OpenCore-Multiboot/","OpenCore多重引导（未翻译）"],["/multiboot/bootstrap","设置启动器选项"],["/multiboot/bootcamp","安装BootCamp"]]},{title:"其他",collapsable:!1,children:[["/misc/rtc","修复RTC"],["/misc/msr-lock","修复CFG锁"],["/misc/nvram","模拟NVRAM"]]},{title:"图形卡补丁",collapsable:!1,children:[["/gpu-patching/","深度的图形卡补丁"],{title:"现代Intel核芯显卡",collapsable:!1,children:[["/gpu-patching/intel-patching/","核芯显卡补丁介绍"],["/gpu-patching/intel-patching/vram","显存补丁"],["/gpu-patching/intel-patching/connector","连接器类型补丁"],["/gpu-patching/intel-patching/busid","BusID补丁"]]},{title:"旧版Intel核芯显卡",collapsable:!1,children:[["/gpu-patching/legacy-intel/","GMA补丁"]]},{title:"旧版Nvidia",collapsable:!1,children:[["/gpu-patching/nvidia-patching/","Nvidia补丁"]]}]}]}};t(238);$t.component("Badge",()=>Promise.all([t.e(0),t.e(6)]).then(t.bind(null,467))),$t.component("ThemeManager",()=>t.e(7).then(t.bind(null,466))),$t.component("Badge",()=>Promise.all([t.e(0),t.e(37)]).then(t.bind(null,509))),$t.component("CodeBlock",()=>Promise.all([t.e(0),t.e(4)]).then(t.bind(null,462))),$t.component("CodeGroup",()=>Promise.all([t.e(0),t.e(5)]).then(t.bind(null,463)));t(239);var Ws={name:"BackToTop",props:{threshold:{type:Number,default:300}},data:()=>({scrollTop:null}),computed:{show(){return this.scrollTop>this.threshold}},mounted(){this.scrollTop=this.getScrollTop(),window.addEventListener("scroll",xs()(()=>{this.scrollTop=this.getScrollTop()},100))},methods:{getScrollTop:()=>window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,scrollToTop(){window.scrollTo({top:0,behavior:"smooth"}),this.scrollTop=0}}},$s=(t(240),Object(zs.a)(Ws,(function(){var e=this._self._c;return e("transition",{attrs:{name:"fade"}},[this.show?e("svg",{staticClass:"go-to-top",attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 49.484 28.284"},on:{click:this.scrollToTop}},[e("g",{attrs:{transform:"translate(-229 -126.358)"}},[e("rect",{attrs:{fill:"currentColor",width:"35",height:"5",rx:"2",transform:"translate(229 151.107) rotate(-45)"}}),this._v(" "),e("rect",{attrs:{fill:"currentColor",width:"35",height:"5",rx:"2",transform:"translate(274.949 154.642) rotate(-135)"}})])]):this._e()])}),[],!1,null,"5fd4ef0c",null).exports);t(241);function qs(e){const n=document.documentElement.getBoundingClientRect(),t=e.getBoundingClientRect();return{x:t.left-n.left,y:t.top-n.top}}var Xs=[{},({Vue:e})=>{e.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},{},({Vue:e})=>{e.component("BackToTop",$s)},({Vue:e,router:n})=>{n.options.scrollBehavior=(n,t,o)=>{if(o)return window.scrollTo({top:o.y,behavior:"smooth"});if(n.hash){if(e.$vuepress.$get("disableScrollBehavior"))return!1;const t=document.querySelector(n.hash);return!!t&&window.scrollTo({top:qs(t).y,behavior:"smooth"})}return window.scrollTo({top:0,behavior:"smooth"})}}],Ys=t(46);class Ks extends class{constructor(){this.store=new $t({data:{state:{}}})}$get(e){return this.store.state[e]}$set(e,n){$t.set(this.store.state,e,n)}$emit(...e){this.store.$emit(...e)}$on(...e){this.store.$on(...e)}}{}Object.assign(Ks.prototype,{getPageAsyncComponent:rs,getLayoutAsyncComponent:ss,getAsyncComponent:ls,getVueComponent:cs});var Qs={install(e){const n=new Ks;e.$vuepress=n,e.prototype.$vuepress=n}};function Zs(e,n){const t=n.toLowerCase();return e.options.routes.some(e=>e.path.toLowerCase()===t)}var Js={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(e){const n=this.pageKey||this.$parent.$page.key;return ds("pageKey",n),$t.component(n)||$t.component(n,rs(n)),$t.component(n)?e(n):e("")}},el={functional:!0,props:{slotKey:String,required:!0},render:(e,{props:n,slots:t})=>e("div",{class:["content__"+n.slotKey]},t()[n.slotKey])},nl={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},tl=(t(242),t(243),Object(zs.a)(nl,(function(){var e=this._self._c;return e("span",[e("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[e("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),e("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),e("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),ol={functional:!0,render(e,{parent:n,children:t}){if(n._isMounted)return t;n.$once("hook:mounted",()=>{n.$forceUpdate()})}};$t.config.productionTip=!1,$t.use(Hr),$t.use(Qs),$t.mixin(function(e,n,t=$t){!function(e){e.locales&&Object.keys(e.locales).forEach(n=>{e.locales[n].path=n});Object.freeze(e)}(n),t.$vuepress.$set("siteData",n);const o=new(e(t.$vuepress.$get("siteData"))),i=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(o)),a={};return Object.keys(i).reduce((e,n)=>(n.startsWith("$")&&(e[n]=i[n].get),e),a),{computed:a}}(e=>class{setPage(e){this.__page=e}get $site(){return e}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:e={}}=this.$site;let n,t;for(const o in e)"/"===o?t=e[o]:0===this.$page.path.indexOf(o)&&(n=e[o]);return n||t||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:e}=this.$page.frontmatter;return"string"==typeof e&&e}get $title(){const e=this.$page,{metaTitle:n}=this.$page.frontmatter;if("string"==typeof n)return n;const t=this.$siteTitle,o=e.frontmatter.home?null:e.frontmatter.title||e.title;return t?o?o+" | "+t:t:o||"VuePress"}get $description(){const e=function(e){if(e){const n=e.filter(e=>"description"===e.name)[0];if(n)return n.content}}(this.$page.frontmatter.meta);return e||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(e,n){for(let t=0;t<e.length;t++){const o=e[t];if(o.path.toLowerCase()===n.toLowerCase())return o}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},Hs)),$t.component("Content",Js),$t.component("ContentSlotsDistributor",el),$t.component("OutboundLink",tl),$t.component("ClientOnly",ol),$t.component("Layout",ss("Layout")),$t.component("NotFound",ss("NotFound")),$t.prototype.$withBase=function(e){const n=this.$site.base;return"/"===e.charAt(0)?n+e.slice(1):e},window.__VUEPRESS__={version:"1.9.10",hash:"ed878da"},async function(e){const n="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:Hs.routerBase||Hs.base,t=new Hr({base:n,mode:"history",fallback:!1,routes:Vs,scrollBehavior:(e,n,t)=>t||(e.hash?!$t.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(e.hash)}:{x:0,y:0})});!function(e){e.beforeEach((n,t,o)=>{if(Zs(e,n.path))o();else if(/(\/|\.html)$/.test(n.path))if(/\/$/.test(n.path)){const t=n.path.replace(/\/$/,"")+".html";Zs(e,t)?o(t):o()}else o();else{const t=n.path+"/",i=n.path+".html";Zs(e,i)?o(i):Zs(e,t)?o(t):o()}})}(t);const o={};try{await Promise.all(Xs.filter(e=>"function"==typeof e).map(n=>n({Vue:$t,options:o,router:t,siteData:Hs,isServer:e})))}catch(e){console.error(e)}return{app:new $t(Object.assign(o,{router:t,render:e=>e("div",{attrs:{id:"app"}},[e("RouterView",{ref:"layout"}),e("div",{class:"global-ui"},Ys.a.map(n=>e(n)))])})),router:t}}(!1).then(({app:e,router:n})=>{n.onReady(()=>{e.$mount("#app")})})}]);