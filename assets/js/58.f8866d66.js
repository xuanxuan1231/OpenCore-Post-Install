(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{480:function(e,t,a){"use strict";a.r(t);var o=a(10),s=Object(o.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"emulated-nvram"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#emulated-nvram"}},[e._v("#")]),e._v(" Emulated NVRAM")]),e._v(" "),t("div",{staticClass:"custom-block danger"},[t("p",{staticClass:"custom-block-title"},[e._v("DANGER")]),e._v(" "),t("p",[e._v("This is not up to date for OpenCore 0.8.3!")])]),e._v(" "),t("p",[e._v("So this section is for those who don't have native NVRAM, the most common hardware to have incompatible native NVRAM with macOS are X99 and some X299 series chipsets:")]),e._v(" "),t("ul",[t("li",[e._v("X99")]),e._v(" "),t("li",[e._v("X299")])]),e._v(" "),t("p",[e._v("For B360, B365, H310, H370, and Z390 users, make sure you have "),t("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/",target:"_blank",rel:"noopener noreferrer"}},[e._v("SSDT-PMC"),t("OutboundLink")],1),e._v(" both under EFI/OC/ACPI and config.plist -> ACPI -> Add. For more info on making and compiling SSDTs, please see "),t("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/",target:"_blank",rel:"noopener noreferrer"}},[t("strong",[e._v("Getting started with ACPI")]),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"cleaning-out-the-clover-gunk"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cleaning-out-the-clover-gunk"}},[e._v("#")]),e._v(" Cleaning out the Clover gunk")]),e._v(" "),t("p",[e._v("So some may not have noticed but Clover may have installed RC scripts into macOS for proper NVRAM emulation. This is an issue as it conflicts with OpenCore's method of emulation.")]),e._v(" "),t("p",[e._v("Files to delete:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("/Volumes/EFI/EFI/CLOVER/drivers64UEFI/EmuVariableUefi-64.efi")])]),e._v(" "),t("li",[t("code",[e._v("/Volumes/EFI/nvram.plist")])]),e._v(" "),t("li",[t("code",[e._v("/etc/rc.clover.lib")])]),e._v(" "),t("li",[t("code",[e._v("/etc/rc.boot.d/10.save_and_rotate_boot_log.local")])]),e._v(" "),t("li",[t("code",[e._v("/etc/rc.boot.d/20.mount_ESP.local")])]),e._v(" "),t("li",[t("code",[e._v("/etc/rc.boot.d/70.disable_sleep_proxy_client.local.disabled")])]),e._v(" "),t("li",[t("code",[e._v("/etc/rc.shutdown.d/80.save_nvram_plist.local​")])])]),e._v(" "),t("p",[e._v("If folders are empty then delete them as well:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("/etc/rc.boot.d")])]),e._v(" "),t("li",[t("code",[e._v("/etc/rc.shutdown.d​")])])]),e._v(" "),t("h2",{attrs:{id:"verifying-if-you-have-working-nvram"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#verifying-if-you-have-working-nvram"}},[e._v("#")]),e._v(" Verifying if you have working NVRAM")]),e._v(" "),t("p",[e._v("To start, open the terminal and run the following command, which sets a variable named "),t("code",[e._v("test")]),e._v(" in your NVRAM to the current date and time:")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" nvram "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("myvar")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("date")]),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v('"')]),e._v("\n")])])]),t("p",[e._v("Now reboot and run this:")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("nvram myvar\n")])])]),t("p",[e._v("If nothing returns then your NVRAM is not working. If a line containing "),t("code",[e._v("myvar")]),e._v(" and then the current date, your NVRAM is working.")]),e._v(" "),t("h2",{attrs:{id:"emulating-nvram-with-a-nvram-plist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#emulating-nvram-with-a-nvram-plist"}},[e._v("#")]),e._v(" Emulating NVRAM (with a "),t("code",[e._v("nvram.plist")]),e._v(")")]),e._v(" "),t("p",[e._v("If you don't have native NVRAM, don't fret. We can set up emulated NVRAM by using a script to save the NVRAM contents to a plist during the shutdown process, which will then be loaded by OpenCore at the next startup.")]),e._v(" "),t("p",[e._v("To enable emulated NVRAM, you'll need the following set:")]),e._v(" "),t("p",[e._v("Within your config.plist:")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Booter -> Quirks")]),e._v(":\n"),t("ul",[t("li",[t("code",[e._v("DisableVariableWrite")]),e._v(": set to "),t("code",[e._v("NO")])])])]),e._v(" "),t("li",[t("strong",[e._v("Misc -> Security")]),e._v(":\n"),t("ul",[t("li",[t("code",[e._v("ExposeSensitiveData")]),e._v(": set to at least "),t("code",[e._v("0x1")])])])]),e._v(" "),t("li",[t("strong",[e._v("NVRAM")]),e._v(":\n"),t("ul",[t("li",[t("code",[e._v("LegacyOverwrite")]),e._v(" set to "),t("code",[e._v("YES")])]),e._v(" "),t("li",[t("code",[e._v("LegacySchema")]),e._v(": NVRAM variables set (OpenCore compares these to the variables present in "),t("code",[e._v("nvram.plist")]),e._v(")")]),e._v(" "),t("li",[t("code",[e._v("WriteFlash")]),e._v(": set to "),t("code",[e._v("YES")])])])])]),e._v(" "),t("p",[e._v("And within your EFI:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("OpenVariableRuntimeDxe.efi")]),e._v(" driver")]),e._v(" "),t("li",[t("code",[e._v("OpenRuntime.efi")]),e._v(" driver (this is needed for proper sleep, shutdown and other services to work correctly)")])]),e._v(" "),t("p",[e._v("Make sure to snapshot after to make sure the drivers are listed in your config.plist. Afterwards, make sure that both "),t("code",[e._v("OpenVariableRuntimeDxe.efi")]),e._v(" and "),t("code",[e._v("OpenRuntime.efi")]),e._v(" have "),t("code",[e._v("LoadEarly")]),e._v(" set to "),t("code",[e._v("YES")]),e._v(", and that "),t("code",[e._v("OpenVariableRuntimeDxe.efi")]),e._v(" is placed "),t("em",[e._v("before")]),e._v(" "),t("code",[e._v("OpenRuntime.efi")]),e._v(" in your config .")]),e._v(" "),t("p",[e._v("Now grab the "),t("a",{attrs:{href:"https://github.com/acidanthera/OpenCorePkg/releases",target:"_blank",rel:"noopener noreferrer"}},[e._v("LogoutHook folder"),t("OutboundLink")],1),e._v(" (inside "),t("code",[e._v("Utilities")]),e._v(") and place it somewhere safe (e.g. within your user directory, as shown below):")]),e._v(" "),t("p",[t("code",[e._v("/Users/$(whoami)/LogoutHook/")])]),e._v(" "),t("p",[e._v("Open up terminal and run the following (one at a time):")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" /Users/"),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("whoami")]),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("/LogoutHook/\n./Launchd.command "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" \n")])])]),t("p",[e._v("And voila! You have emulated NVRAM!")])])}),[],!1,null,null,null);t.default=s.exports}}]);